                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module redefine
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _v_reset_timers
                             12 	.globl _v_interrupt
                             13 	.globl _v_draw_logo
                             14 	.globl _v_print
                             15 	.globl _v_print_c
                             16 	.globl _v_wipe_scr
                             17 	.globl _v_clr_scr
                             18 	.globl _v_reset_pal
                             19 	.globl _v_blk_scr
                             20 	.globl _u_map_char_to_key
                             21 	.globl _u_map_key_to_char
                             22 	.globl _u_wait
                             23 	.globl _cpct_waitVSYNC
                             24 	.globl _cpct_getKeypressedAsASCII
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_scanKeyboard_f
                             27 	.globl _cpct_removeInterruptHandler
                             28 	.globl _cpct_setInterruptHandler
                             29 	.globl _controls
                             30 	.globl _r_start
                             31 	.globl _r_stop
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; ram data
                             37 ;--------------------------------------------------------
                             38 	.area _DATA
   0000                      39 _controls::
   0000                      40 	.ds 18
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _INITIALIZED
                             45 ;--------------------------------------------------------
                             46 ; absolute external ram data
                             47 ;--------------------------------------------------------
                             48 	.area _DABS (ABS)
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area _HOME
                             53 	.area _GSINIT
                             54 	.area _GSFINAL
                             55 	.area _GSINIT
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area _HOME
                             60 	.area _HOME
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area _CODE
                             65 ;src/redefine.c:30: void r_start(void) {
                             66 ;	---------------------------------
                             67 ; Function r_start
                             68 ; ---------------------------------
   0000                      69 _r_start::
   0000 DD E5         [15]   70 	push	ix
   0002 DD 21 00 00   [14]   71 	ld	ix,#0
   0006 DD 39         [15]   72 	add	ix,sp
   0008 F5            [11]   73 	push	af
                             74 ;src/redefine.c:38: v_blk_scr();
   0009 CDr00r00      [17]   75 	call	_v_blk_scr
                             76 ;src/redefine.c:39: v_clr_scr();
   000C CDr00r00      [17]   77 	call	_v_clr_scr
                             78 ;src/redefine.c:42: for (u8 i = 0; i < 9; i++)
   000F 01r00r00      [10]   79 	ld	bc, #_controls+0
   0012 1E 00         [ 7]   80 	ld	e, #0x00
   0014                      81 00132$:
   0014 7B            [ 4]   82 	ld	a, e
   0015 D6 09         [ 7]   83 	sub	a, #0x09
   0017 30 1D         [12]   84 	jr	NC,00101$
                             85 ;src/redefine.c:43: controls[i] = g_controls[i];
   0019 6B            [ 4]   86 	ld	l, e
   001A 26 00         [ 7]   87 	ld	h, #0x00
   001C 29            [11]   88 	add	hl, hl
   001D E5            [11]   89 	push	hl
   001E FD E1         [14]   90 	pop	iy
   0020 FD 09         [15]   91 	add	iy, bc
   0022 3Er00         [ 7]   92 	ld	a, #<(_g_controls)
   0024 85            [ 4]   93 	add	a, l
   0025 6F            [ 4]   94 	ld	l, a
   0026 3Es00         [ 7]   95 	ld	a, #>(_g_controls)
   0028 8C            [ 4]   96 	adc	a, h
   0029 67            [ 4]   97 	ld	h, a
   002A 7E            [ 7]   98 	ld	a, (hl)
   002B 23            [ 6]   99 	inc	hl
   002C 56            [ 7]  100 	ld	d, (hl)
   002D FD 77 00      [19]  101 	ld	0 (iy), a
   0030 FD 72 01      [19]  102 	ld	1 (iy), d
                            103 ;src/redefine.c:42: for (u8 i = 0; i < 9; i++)
   0033 1C            [ 4]  104 	inc	e
   0034 18 DE         [12]  105 	jr	00132$
   0036                     106 00101$:
                            107 ;src/redefine.c:46: v_draw_logo();
   0036 C5            [11]  108 	push	bc
   0037 CDr00r00      [17]  109 	call	_v_draw_logo
   003A AF            [ 4]  110 	xor	a, a
   003B F5            [11]  111 	push	af
   003C 33            [ 6]  112 	inc	sp
   003D CDr87r01      [17]  113 	call	_h_draw_redefine
   0040 33            [ 6]  114 	inc	sp
   0041 CDr00r00      [17]  115 	call	_v_reset_pal
   0044 CDr00r00      [17]  116 	call	_v_reset_timers
   0047 CDr00r00      [17]  117 	call	_cpct_waitVSYNC
   004A 21r00r00      [10]  118 	ld	hl, #_v_interrupt
   004D CDr00r00      [17]  119 	call	_cpct_setInterruptHandler
   0050 C1            [10]  120 	pop	bc
                            121 ;src/redefine.c:55: while (current <= KEY_PAUSE) {
   0051 1E 00         [ 7]  122 	ld	e, #0x00
   0053                     123 00127$:
   0053 3E 04         [ 7]  124 	ld	a, #0x04
   0055 93            [ 4]  125 	sub	a, e
   0056 DAr3Fr01      [10]  126 	jp	C, 00129$
                            127 ;src/redefine.c:58: cpct_scanKeyboard_f();
   0059 C5            [11]  128 	push	bc
   005A D5            [11]  129 	push	de
   005B CDr00r00      [17]  130 	call	_cpct_scanKeyboard_f
   005E CDr00r00      [17]  131 	call	_cpct_getKeypressedAsASCII
   0061 D1            [10]  132 	pop	de
   0062 C1            [10]  133 	pop	bc
   0063 55            [ 4]  134 	ld	d, l
                            135 ;src/redefine.c:62: if ((ascii != 0) && (ascii >= 65) && (ascii <= 122)) {
   0064 7A            [ 4]  136 	ld	a, d
   0065 B7            [ 4]  137 	or	a, a
   0066 28 29         [12]  138 	jr	Z,00121$
   0068 7A            [ 4]  139 	ld	a, d
   0069 D6 41         [ 7]  140 	sub	a, #0x41
   006B 38 24         [12]  141 	jr	C,00121$
   006D 3E 7A         [ 7]  142 	ld	a, #0x7a
   006F 92            [ 4]  143 	sub	a, d
   0070 3E 00         [ 7]  144 	ld	a, #0x00
   0072 17            [ 4]  145 	rla
   0073 6F            [ 4]  146 	ld	l, a
   0074 CB 45         [ 8]  147 	bit	0, l
   0076 20 19         [12]  148 	jr	NZ,00121$
                            149 ;src/redefine.c:64: if (ascii >= 'a' && ascii <= 'z')
   0078 7A            [ 4]  150 	ld	a, d
   0079 D6 61         [ 7]  151 	sub	a, #0x61
   007B 38 08         [12]  152 	jr	C,00103$
   007D CB 45         [ 8]  153 	bit	0, l
   007F 20 04         [12]  154 	jr	NZ,00103$
                            155 ;src/redefine.c:65: ascii = ascii - 32;
   0081 7A            [ 4]  156 	ld	a, d
   0082 C6 E0         [ 7]  157 	add	a, #0xe0
   0084 57            [ 4]  158 	ld	d, a
   0085                     159 00103$:
                            160 ;src/redefine.c:67: key = u_map_char_to_key(ascii);
   0085 C5            [11]  161 	push	bc
   0086 D5            [11]  162 	push	de
   0087 D5            [11]  163 	push	de
   0088 33            [ 6]  164 	inc	sp
   0089 CDr00r00      [17]  165 	call	_u_map_char_to_key
   008C 33            [ 6]  166 	inc	sp
   008D D1            [10]  167 	pop	de
   008E C1            [10]  168 	pop	bc
   008F 18 5E         [12]  169 	jr	00122$
   0091                     170 00121$:
                            171 ;src/redefine.c:71: if (cpct_isKeyPressed(Key_Esc))
   0091 C5            [11]  172 	push	bc
   0092 D5            [11]  173 	push	de
   0093 21 08 04      [10]  174 	ld	hl, #0x0408
   0096 CDr00r00      [17]  175 	call	_cpct_isKeyPressed
   0099 D1            [10]  176 	pop	de
   009A C1            [10]  177 	pop	bc
   009B 7D            [ 4]  178 	ld	a, l
   009C B7            [ 4]  179 	or	a, a
                            180 ;src/redefine.c:72: return;	
   009D C2r6Br01      [10]  181 	jp	NZ,00137$
                            182 ;src/redefine.c:73: else if (cpct_isKeyPressed(Key_CursorLeft))
   00A0 C5            [11]  183 	push	bc
   00A1 D5            [11]  184 	push	de
   00A2 21 01 01      [10]  185 	ld	hl, #0x0101
   00A5 CDr00r00      [17]  186 	call	_cpct_isKeyPressed
   00A8 D1            [10]  187 	pop	de
   00A9 C1            [10]  188 	pop	bc
   00AA 7D            [ 4]  189 	ld	a, l
   00AB B7            [ 4]  190 	or	a, a
   00AC 28 05         [12]  191 	jr	Z,00115$
                            192 ;src/redefine.c:74: key = Key_CursorLeft;
   00AE 21 01 01      [10]  193 	ld	hl, #0x0101
   00B1 18 3C         [12]  194 	jr	00122$
   00B3                     195 00115$:
                            196 ;src/redefine.c:75: else if (cpct_isKeyPressed(Key_CursorRight))
   00B3 C5            [11]  197 	push	bc
   00B4 D5            [11]  198 	push	de
   00B5 21 00 02      [10]  199 	ld	hl, #0x0200
   00B8 CDr00r00      [17]  200 	call	_cpct_isKeyPressed
   00BB D1            [10]  201 	pop	de
   00BC C1            [10]  202 	pop	bc
   00BD 7D            [ 4]  203 	ld	a, l
   00BE B7            [ 4]  204 	or	a, a
   00BF 28 05         [12]  205 	jr	Z,00112$
                            206 ;src/redefine.c:76: key = Key_CursorRight;
   00C1 21 00 02      [10]  207 	ld	hl, #0x0200
   00C4 18 29         [12]  208 	jr	00122$
   00C6                     209 00112$:
                            210 ;src/redefine.c:77: else if (cpct_isKeyPressed(Key_CursorUp))
   00C6 C5            [11]  211 	push	bc
   00C7 D5            [11]  212 	push	de
   00C8 21 00 01      [10]  213 	ld	hl, #0x0100
   00CB CDr00r00      [17]  214 	call	_cpct_isKeyPressed
   00CE D1            [10]  215 	pop	de
   00CF C1            [10]  216 	pop	bc
   00D0 7D            [ 4]  217 	ld	a, l
   00D1 B7            [ 4]  218 	or	a, a
   00D2 28 05         [12]  219 	jr	Z,00109$
                            220 ;src/redefine.c:78: key = Key_CursorUp;
   00D4 21 00 01      [10]  221 	ld	hl, #0x0100
   00D7 18 16         [12]  222 	jr	00122$
   00D9                     223 00109$:
                            224 ;src/redefine.c:79: else if (cpct_isKeyPressed(Key_CursorDown))
   00D9 C5            [11]  225 	push	bc
   00DA D5            [11]  226 	push	de
   00DB 21 00 04      [10]  227 	ld	hl, #0x0400
   00DE CDr00r00      [17]  228 	call	_cpct_isKeyPressed
   00E1 D1            [10]  229 	pop	de
   00E2 C1            [10]  230 	pop	bc
   00E3 7D            [ 4]  231 	ld	a, l
   00E4 B7            [ 4]  232 	or	a, a
   00E5 28 05         [12]  233 	jr	Z,00106$
                            234 ;src/redefine.c:80: key = Key_CursorDown;
   00E7 21 00 04      [10]  235 	ld	hl, #0x0400
   00EA 18 03         [12]  236 	jr	00122$
   00EC                     237 00106$:
                            238 ;src/redefine.c:82: key = controls[0];
   00EC 2Ar00r00      [16]  239 	ld	hl, (#_controls + 0)
   00EF                     240 00122$:
                            241 ;src/redefine.c:85: if (!r_is_control_used(key)) {
   00EF E5            [11]  242 	push	hl
   00F0 C5            [11]  243 	push	bc
   00F1 D5            [11]  244 	push	de
   00F2 E5            [11]  245 	push	hl
   00F3 CDr93r03      [17]  246 	call	_r_is_control_used
   00F6 F1            [10]  247 	pop	af
   00F7 7D            [ 4]  248 	ld	a, l
   00F8 D1            [10]  249 	pop	de
   00F9 C1            [10]  250 	pop	bc
   00FA E1            [10]  251 	pop	hl
   00FB CB 47         [ 8]  252 	bit	0, a
   00FD C2r53r00      [10]  253 	jp	NZ, 00127$
                            254 ;src/redefine.c:86: controls[current] = key;
   0100 DD 73 FE      [19]  255 	ld	-2 (ix), e
   0103 DD 36 FF 00   [19]  256 	ld	-1 (ix), #0x00
   0107 DD CB FE 26   [23]  257 	sla	-2 (ix)
   010B DD CB FF 16   [23]  258 	rl	-1 (ix)
   010F FD 21r00r00   [14]  259 	ld	iy, #_controls
   0113 C5            [11]  260 	push	bc
   0114 DD 4E FE      [19]  261 	ld	c,-2 (ix)
   0117 DD 46 FF      [19]  262 	ld	b,-1 (ix)
   011A FD 09         [15]  263 	add	iy, bc
   011C C1            [10]  264 	pop	bc
   011D FD 75 00      [19]  265 	ld	0 (iy), l
   0120 FD 74 01      [19]  266 	ld	1 (iy), h
                            267 ;src/redefine.c:87: ++current;
   0123 1C            [ 4]  268 	inc	e
                            269 ;src/redefine.c:88: cpct_waitVSYNC();
   0124 C5            [11]  270 	push	bc
   0125 D5            [11]  271 	push	de
   0126 CDr00r00      [17]  272 	call	_cpct_waitVSYNC
   0129 D1            [10]  273 	pop	de
   012A D5            [11]  274 	push	de
   012B 7B            [ 4]  275 	ld	a, e
   012C F5            [11]  276 	push	af
   012D 33            [ 6]  277 	inc	sp
   012E CDr87r01      [17]  278 	call	_h_draw_redefine
   0131 33            [ 6]  279 	inc	sp
   0132 21 E8 03      [10]  280 	ld	hl, #0x03e8
   0135 E5            [11]  281 	push	hl
   0136 CDr00r00      [17]  282 	call	_u_wait
   0139 F1            [10]  283 	pop	af
   013A D1            [10]  284 	pop	de
   013B C1            [10]  285 	pop	bc
   013C C3r53r00      [10]  286 	jp	00127$
   013F                     287 00129$:
                            288 ;src/redefine.c:94: u_wait(1000);
   013F C5            [11]  289 	push	bc
   0140 21 E8 03      [10]  290 	ld	hl, #0x03e8
   0143 E5            [11]  291 	push	hl
   0144 CDr00r00      [17]  292 	call	_u_wait
   0147 F1            [10]  293 	pop	af
   0148 C1            [10]  294 	pop	bc
                            295 ;src/redefine.c:96: for (u8 i = 0; i < 9; i++)
   0149 0E 00         [ 7]  296 	ld	c, #0x00
   014B                     297 00135$:
   014B 79            [ 4]  298 	ld	a, c
   014C D6 09         [ 7]  299 	sub	a, #0x09
   014E 30 1B         [12]  300 	jr	NC,00137$
                            301 ;src/redefine.c:97: g_controls[i] = controls[i];
   0150 69            [ 4]  302 	ld	l, c
   0151 26 00         [ 7]  303 	ld	h, #0x00
   0153 29            [11]  304 	add	hl, hl
   0154 EB            [ 4]  305 	ex	de,hl
   0155 FD 21r00r00   [14]  306 	ld	iy, #_g_controls
   0159 FD 19         [15]  307 	add	iy, de
   015B 21r00r00      [10]  308 	ld	hl, #_controls
   015E 19            [11]  309 	add	hl, de
   015F 5E            [ 7]  310 	ld	e, (hl)
   0160 23            [ 6]  311 	inc	hl
   0161 46            [ 7]  312 	ld	b, (hl)
   0162 FD 73 00      [19]  313 	ld	0 (iy), e
   0165 FD 70 01      [19]  314 	ld	1 (iy), b
                            315 ;src/redefine.c:96: for (u8 i = 0; i < 9; i++)
   0168 0C            [ 4]  316 	inc	c
   0169 18 E0         [12]  317 	jr	00135$
   016B                     318 00137$:
   016B DD F9         [10]  319 	ld	sp, ix
   016D DD E1         [14]  320 	pop	ix
   016F C9            [10]  321 	ret
   0170                     322 _title_loc:
   0170 01                  323 	.db #0x01	; 1
   0171 08                  324 	.db #0x08	; 8
   0172                     325 _redefine_loc:
   0172 12                  326 	.db #0x12	; 18
   0173 0F                  327 	.db #0x0f	; 15
   0174                     328 _instruct_loc:
   0174 01                  329 	.db #0x01	; 1
   0175 1E                  330 	.db #0x1e	; 30
                            331 ;src/redefine.c:101: void r_stop(void) {
                            332 ;	---------------------------------
                            333 ; Function r_stop
                            334 ; ---------------------------------
   0176                     335 _r_stop::
                            336 ;src/redefine.c:103: v_wipe_scr(true);
   0176 3E 01         [ 7]  337 	ld	a, #0x01
   0178 F5            [11]  338 	push	af
   0179 33            [ 6]  339 	inc	sp
   017A CDr00r00      [17]  340 	call	_v_wipe_scr
   017D 33            [ 6]  341 	inc	sp
                            342 ;src/redefine.c:104: v_clr_scr();
   017E CDr00r00      [17]  343 	call	_v_clr_scr
                            344 ;src/redefine.c:105: cpct_removeInterruptHandler();
   0181 CDr00r00      [17]  345 	call	_cpct_removeInterruptHandler
                            346 ;src/redefine.c:106: v_reset_timers();
   0184 C3r00r00      [10]  347 	jp  _v_reset_timers
                            348 ;src/redefine.c:110: static void h_draw_redefine(const control_t current) {
                            349 ;	---------------------------------
                            350 ; Function h_draw_redefine
                            351 ; ---------------------------------
   0187                     352 _h_draw_redefine:
   0187 DD E5         [15]  353 	push	ix
   0189 DD 21 00 00   [14]  354 	ld	ix,#0
   018D DD 39         [15]  355 	add	ix,sp
   018F 21 F3 FF      [10]  356 	ld	hl, #-13
   0192 39            [11]  357 	add	hl, sp
   0193 F9            [ 6]  358 	ld	sp, hl
                            359 ;src/redefine.c:112: u8 y = redefine_loc.y * LINE_P_H;
   0194 3Ar73r01      [13]  360 	ld	a, (#_redefine_loc + 1)
   0197 4F            [ 4]  361 	ld	c, a
   0198 87            [ 4]  362 	add	a, a
   0199 81            [ 4]  363 	add	a, c
   019A 87            [ 4]  364 	add	a, a
   019B 4F            [ 4]  365 	ld	c, a
                            366 ;src/redefine.c:114: char key[2] = "", ascii;
   019C 21 02 00      [10]  367 	ld	hl, #0x0002
   019F 39            [11]  368 	add	hl, sp
   01A0 DD 75 F8      [19]  369 	ld	-8 (ix), l
   01A3 DD 74 F9      [19]  370 	ld	-7 (ix), h
   01A6 36 00         [10]  371 	ld	(hl), #0x00
   01A8 DD 7E F8      [19]  372 	ld	a, -8 (ix)
   01AB C6 01         [ 7]  373 	add	a, #0x01
   01AD DD 77 FE      [19]  374 	ld	-2 (ix), a
   01B0 DD 7E F9      [19]  375 	ld	a, -7 (ix)
   01B3 CE 00         [ 7]  376 	adc	a, #0x00
   01B5 DD 77 FF      [19]  377 	ld	-1 (ix), a
   01B8 DD 6E FE      [19]  378 	ld	l,-2 (ix)
   01BB DD 66 FF      [19]  379 	ld	h,-1 (ix)
   01BE 36 00         [10]  380 	ld	(hl), #0x00
                            381 ;src/redefine.c:118: v_print_c(g_strings[50], title_loc.y * LINE_P_H, FONT_RED);
   01C0 3Ar71r01      [13]  382 	ld	a, (#(_title_loc + 0x0001) + 0)
   01C3 5F            [ 4]  383 	ld	e, a
   01C4 87            [ 4]  384 	add	a, a
   01C5 83            [ 4]  385 	add	a, e
   01C6 87            [ 4]  386 	add	a, a
   01C7 47            [ 4]  387 	ld	b, a
   01C8 ED 5Br64r00   [20]  388 	ld	de, (#_g_strings + 100)
   01CC C5            [11]  389 	push	bc
   01CD AF            [ 4]  390 	xor	a, a
   01CE F5            [11]  391 	push	af
   01CF 33            [ 6]  392 	inc	sp
   01D0 C5            [11]  393 	push	bc
   01D1 33            [ 6]  394 	inc	sp
   01D2 D5            [11]  395 	push	de
   01D3 CDr00r00      [17]  396 	call	_v_print_c
   01D6 F1            [10]  397 	pop	af
   01D7 F1            [10]  398 	pop	af
   01D8 C1            [10]  399 	pop	bc
                            400 ;src/redefine.c:120: for (u8 i = KEY_UP; i < JOY_UP; i++) {
   01D9 DD 7E F8      [19]  401 	ld	a, -8 (ix)
   01DC DD 77 FA      [19]  402 	ld	-6 (ix), a
   01DF DD 7E F9      [19]  403 	ld	a, -7 (ix)
   01E2 DD 77 FB      [19]  404 	ld	-5 (ix), a
   01E5 DD 71 F7      [19]  405 	ld	-9 (ix), c
   01E8 DD 36 F3 00   [19]  406 	ld	-13 (ix), #0x00
   01EC                     407 00115$:
   01EC DD 7E F3      [19]  408 	ld	a, -13 (ix)
   01EF D6 05         [ 7]  409 	sub	a, #0x05
   01F1 D2r4Dr03      [10]  410 	jp	NC, 00113$
                            411 ;src/redefine.c:122: str = g_strings[i + 51];
   01F4 DD 7E F3      [19]  412 	ld	a, -13 (ix)
   01F7 DD 77 FC      [19]  413 	ld	-4 (ix), a
   01FA DD 36 FD 00   [19]  414 	ld	-3 (ix), #0x00
   01FE DD 7E FC      [19]  415 	ld	a, -4 (ix)
   0201 C6 33         [ 7]  416 	add	a, #0x33
   0203 6F            [ 4]  417 	ld	l, a
   0204 DD 7E FD      [19]  418 	ld	a, -3 (ix)
   0207 CE 00         [ 7]  419 	adc	a, #0x00
   0209 67            [ 4]  420 	ld	h, a
   020A 29            [11]  421 	add	hl, hl
   020B 11r00r00      [10]  422 	ld	de, #_g_strings
   020E 19            [11]  423 	add	hl, de
   020F 4E            [ 7]  424 	ld	c, (hl)
   0210 23            [ 6]  425 	inc	hl
   0211 46            [ 7]  426 	ld	b, (hl)
                            427 ;src/redefine.c:123: col = i == current ? FONT_WHITE : FONT_BLUE;
   0212 DD 7E F3      [19]  428 	ld	a, -13 (ix)
   0215 DD 96 04      [19]  429 	sub	a, 4 (ix)
   0218 20 04         [12]  430 	jr	NZ,00119$
   021A 1E 02         [ 7]  431 	ld	e, #0x02
   021C 18 02         [12]  432 	jr	00120$
   021E                     433 00119$:
   021E 1E 01         [ 7]  434 	ld	e, #0x01
   0220                     435 00120$:
   0220 DD 73 F4      [19]  436 	ld	-12 (ix), e
                            437 ;src/redefine.c:124: v_print(str, redefine_loc.x, y, col);
   0223 21r72r01      [10]  438 	ld	hl, #_redefine_loc + 0
   0226 56            [ 7]  439 	ld	d, (hl)
   0227 DD 66 F4      [19]  440 	ld	h, -12 (ix)
   022A DD 6E F7      [19]  441 	ld	l, -9 (ix)
   022D E5            [11]  442 	push	hl
   022E D5            [11]  443 	push	de
   022F 33            [ 6]  444 	inc	sp
   0230 C5            [11]  445 	push	bc
   0231 CDr00r00      [17]  446 	call	_v_print
   0234 F1            [10]  447 	pop	af
   0235 F1            [10]  448 	pop	af
   0236 33            [ 6]  449 	inc	sp
                            450 ;src/redefine.c:125: v_print("     ", redefine_loc.x + 35, y, col);
   0237 3Ar72r01      [13]  451 	ld	a, (#_redefine_loc + 0)
   023A C6 23         [ 7]  452 	add	a, #0x23
   023C 47            [ 4]  453 	ld	b, a
   023D DD 66 F4      [19]  454 	ld	h, -12 (ix)
   0240 DD 6E F7      [19]  455 	ld	l, -9 (ix)
   0243 E5            [11]  456 	push	hl
   0244 C5            [11]  457 	push	bc
   0245 33            [ 6]  458 	inc	sp
   0246 21r8Dr03      [10]  459 	ld	hl, #___str_1
   0249 E5            [11]  460 	push	hl
   024A CDr00r00      [17]  461 	call	_v_print
   024D F1            [10]  462 	pop	af
   024E F1            [10]  463 	pop	af
   024F 33            [ 6]  464 	inc	sp
                            465 ;src/redefine.c:127: if (controls[i] == Key_CursorLeft) {
   0250 DD 6E FC      [19]  466 	ld	l,-4 (ix)
   0253 DD 66 FD      [19]  467 	ld	h,-3 (ix)
   0256 29            [11]  468 	add	hl, hl
   0257 11r00r00      [10]  469 	ld	de, #_controls
   025A 19            [11]  470 	add	hl, de
   025B 7E            [ 7]  471 	ld	a, (hl)
   025C DD 77 FC      [19]  472 	ld	-4 (ix), a
   025F 23            [ 6]  473 	inc	hl
   0260 7E            [ 7]  474 	ld	a, (hl)
   0261 DD 77 FD      [19]  475 	ld	-3 (ix), a
   0264 DD 7E FC      [19]  476 	ld	a, -4 (ix)
   0267 3D            [ 4]  477 	dec	a
   0268 20 23         [12]  478 	jr	NZ,00111$
   026A DD 7E FD      [19]  479 	ld	a, -3 (ix)
   026D 3D            [ 4]  480 	dec	a
   026E 20 1D         [12]  481 	jr	NZ,00111$
                            482 ;src/redefine.c:128: v_print(g_strings[64], redefine_loc.x + 35, y, col);
   0270 3Ar72r01      [13]  483 	ld	a, (#_redefine_loc + 0)
   0273 C6 23         [ 7]  484 	add	a, #0x23
   0275 57            [ 4]  485 	ld	d, a
   0276 ED 4Br80r00   [20]  486 	ld	bc, (#_g_strings + 128)
   027A DD 66 F4      [19]  487 	ld	h, -12 (ix)
   027D DD 6E F7      [19]  488 	ld	l, -9 (ix)
   0280 E5            [11]  489 	push	hl
   0281 D5            [11]  490 	push	de
   0282 33            [ 6]  491 	inc	sp
   0283 C5            [11]  492 	push	bc
   0284 CDr00r00      [17]  493 	call	_v_print
   0287 F1            [10]  494 	pop	af
   0288 F1            [10]  495 	pop	af
   0289 33            [ 6]  496 	inc	sp
   028A C3r3Fr03      [10]  497 	jp	00112$
   028D                     498 00111$:
                            499 ;src/redefine.c:129: } else if (controls[i] == Key_CursorRight) {
   028D DD 7E FC      [19]  500 	ld	a, -4 (ix)
   0290 B7            [ 4]  501 	or	a, a
   0291 20 24         [12]  502 	jr	NZ,00108$
   0293 DD 7E FD      [19]  503 	ld	a, -3 (ix)
   0296 D6 02         [ 7]  504 	sub	a, #0x02
   0298 20 1D         [12]  505 	jr	NZ,00108$
                            506 ;src/redefine.c:130: v_print(g_strings[65], redefine_loc.x + 35, y, col);
   029A 3Ar72r01      [13]  507 	ld	a, (#_redefine_loc + 0)
   029D C6 23         [ 7]  508 	add	a, #0x23
   029F 5F            [ 4]  509 	ld	e, a
   02A0 ED 4Br82r00   [20]  510 	ld	bc, (#_g_strings + 130)
   02A4 DD 7E F4      [19]  511 	ld	a, -12 (ix)
   02A7 F5            [11]  512 	push	af
   02A8 33            [ 6]  513 	inc	sp
   02A9 DD 56 F7      [19]  514 	ld	d, -9 (ix)
   02AC D5            [11]  515 	push	de
   02AD C5            [11]  516 	push	bc
   02AE CDr00r00      [17]  517 	call	_v_print
   02B1 F1            [10]  518 	pop	af
   02B2 F1            [10]  519 	pop	af
   02B3 33            [ 6]  520 	inc	sp
   02B4 C3r3Fr03      [10]  521 	jp	00112$
   02B7                     522 00108$:
                            523 ;src/redefine.c:131: } else if (controls[i] == Key_CursorUp) {
   02B7 DD 7E FC      [19]  524 	ld	a, -4 (ix)
   02BA B7            [ 4]  525 	or	a, a
   02BB 20 22         [12]  526 	jr	NZ,00105$
   02BD DD 7E FD      [19]  527 	ld	a, -3 (ix)
   02C0 3D            [ 4]  528 	dec	a
   02C1 20 1C         [12]  529 	jr	NZ,00105$
                            530 ;src/redefine.c:132: v_print(g_strings[62], redefine_loc.x + 35, y, col);
   02C3 3Ar72r01      [13]  531 	ld	a, (#_redefine_loc + 0)
   02C6 C6 23         [ 7]  532 	add	a, #0x23
   02C8 57            [ 4]  533 	ld	d, a
   02C9 ED 4Br7Cr00   [20]  534 	ld	bc, (#_g_strings + 124)
   02CD DD 66 F4      [19]  535 	ld	h, -12 (ix)
   02D0 DD 6E F7      [19]  536 	ld	l, -9 (ix)
   02D3 E5            [11]  537 	push	hl
   02D4 D5            [11]  538 	push	de
   02D5 33            [ 6]  539 	inc	sp
   02D6 C5            [11]  540 	push	bc
   02D7 CDr00r00      [17]  541 	call	_v_print
   02DA F1            [10]  542 	pop	af
   02DB F1            [10]  543 	pop	af
   02DC 33            [ 6]  544 	inc	sp
   02DD 18 60         [12]  545 	jr	00112$
   02DF                     546 00105$:
                            547 ;src/redefine.c:133: } else if (controls[i] == Key_CursorDown) {
   02DF DD 7E FC      [19]  548 	ld	a, -4 (ix)
   02E2 B7            [ 4]  549 	or	a, a
   02E3 20 23         [12]  550 	jr	NZ,00102$
   02E5 DD 7E FD      [19]  551 	ld	a, -3 (ix)
   02E8 D6 04         [ 7]  552 	sub	a, #0x04
   02EA 20 1C         [12]  553 	jr	NZ,00102$
                            554 ;src/redefine.c:134: v_print(g_strings[63], redefine_loc.x + 35, y, col);
   02EC 3Ar72r01      [13]  555 	ld	a, (#_redefine_loc + 0)
   02EF C6 23         [ 7]  556 	add	a, #0x23
   02F1 57            [ 4]  557 	ld	d, a
   02F2 ED 4Br7Er00   [20]  558 	ld	bc, (#_g_strings + 126)
   02F6 DD 66 F4      [19]  559 	ld	h, -12 (ix)
   02F9 DD 6E F7      [19]  560 	ld	l, -9 (ix)
   02FC E5            [11]  561 	push	hl
   02FD D5            [11]  562 	push	de
   02FE 33            [ 6]  563 	inc	sp
   02FF C5            [11]  564 	push	bc
   0300 CDr00r00      [17]  565 	call	_v_print
   0303 F1            [10]  566 	pop	af
   0304 F1            [10]  567 	pop	af
   0305 33            [ 6]  568 	inc	sp
   0306 18 37         [12]  569 	jr	00112$
   0308                     570 00102$:
                            571 ;src/redefine.c:136: ascii = u_map_key_to_char(controls[i]);
   0308 DD 6E FC      [19]  572 	ld	l,-4 (ix)
   030B DD 66 FD      [19]  573 	ld	h,-3 (ix)
   030E E5            [11]  574 	push	hl
   030F CDr00r00      [17]  575 	call	_u_map_key_to_char
   0312 F1            [10]  576 	pop	af
   0313 4D            [ 4]  577 	ld	c, l
                            578 ;src/redefine.c:137: key[0] = ascii;
   0314 DD 6E F8      [19]  579 	ld	l,-8 (ix)
   0317 DD 66 F9      [19]  580 	ld	h,-7 (ix)
   031A 71            [ 7]  581 	ld	(hl), c
                            582 ;src/redefine.c:138: key[1] = '\0';
   031B DD 6E FE      [19]  583 	ld	l,-2 (ix)
   031E DD 66 FF      [19]  584 	ld	h,-1 (ix)
   0321 36 00         [10]  585 	ld	(hl), #0x00
                            586 ;src/redefine.c:139: v_print(key, redefine_loc.x + 43, y, col);
   0323 3Ar72r01      [13]  587 	ld	a, (#_redefine_loc + 0)
   0326 C6 2B         [ 7]  588 	add	a, #0x2b
   0328 57            [ 4]  589 	ld	d, a
   0329 DD 4E FA      [19]  590 	ld	c,-6 (ix)
   032C DD 46 FB      [19]  591 	ld	b,-5 (ix)
   032F DD 66 F4      [19]  592 	ld	h, -12 (ix)
   0332 DD 6E F7      [19]  593 	ld	l, -9 (ix)
   0335 E5            [11]  594 	push	hl
   0336 D5            [11]  595 	push	de
   0337 33            [ 6]  596 	inc	sp
   0338 C5            [11]  597 	push	bc
   0339 CDr00r00      [17]  598 	call	_v_print
   033C F1            [10]  599 	pop	af
   033D F1            [10]  600 	pop	af
   033E 33            [ 6]  601 	inc	sp
   033F                     602 00112$:
                            603 ;src/redefine.c:142: y += LINE_P_H * 2;
   033F DD 7E F7      [19]  604 	ld	a, -9 (ix)
   0342 C6 0C         [ 7]  605 	add	a, #0x0c
   0344 DD 77 F7      [19]  606 	ld	-9 (ix), a
                            607 ;src/redefine.c:120: for (u8 i = KEY_UP; i < JOY_UP; i++) {
   0347 DD 34 F3      [23]  608 	inc	-13 (ix)
   034A C3rECr01      [10]  609 	jp	00115$
   034D                     610 00113$:
                            611 ;src/redefine.c:145: str = g_strings[current + 56];
   034D DD 4E 04      [19]  612 	ld	c, 4 (ix)
   0350 06 00         [ 7]  613 	ld	b, #0x00
   0352 21 38 00      [10]  614 	ld	hl, #0x0038
   0355 09            [11]  615 	add	hl, bc
   0356 29            [11]  616 	add	hl, hl
   0357 11r00r00      [10]  617 	ld	de, #_g_strings
   035A 19            [11]  618 	add	hl, de
   035B 4E            [ 7]  619 	ld	c, (hl)
   035C 23            [ 6]  620 	inc	hl
   035D 46            [ 7]  621 	ld	b, (hl)
                            622 ;src/redefine.c:146: v_print_c(str, instruct_loc.y * LINE_P_H, FONT_RED);
   035E 3Ar75r01      [13]  623 	ld	a, (#(_instruct_loc + 0x0001) + 0)
   0361 5F            [ 4]  624 	ld	e, a
   0362 87            [ 4]  625 	add	a, a
   0363 83            [ 4]  626 	add	a, e
   0364 87            [ 4]  627 	add	a, a
   0365 57            [ 4]  628 	ld	d, a
   0366 AF            [ 4]  629 	xor	a, a
   0367 F5            [11]  630 	push	af
   0368 33            [ 6]  631 	inc	sp
   0369 D5            [11]  632 	push	de
   036A 33            [ 6]  633 	inc	sp
   036B C5            [11]  634 	push	bc
   036C CDr00r00      [17]  635 	call	_v_print_c
   036F F1            [10]  636 	pop	af
   0370 F1            [10]  637 	pop	af
                            638 ;src/redefine.c:147: str = g_strings[66];
   0371 ED 4Br84r00   [20]  639 	ld	bc, (#_g_strings + 132)
                            640 ;src/redefine.c:148: v_print_c(str, (instruct_loc.y + 2) * LINE_P_H, FONT_RED);
   0375 3Ar75r01      [13]  641 	ld	a, (#(_instruct_loc + 0x0001) + 0)
   0378 C6 02         [ 7]  642 	add	a, #0x02
   037A 5F            [ 4]  643 	ld	e, a
   037B 87            [ 4]  644 	add	a, a
   037C 83            [ 4]  645 	add	a, e
   037D 87            [ 4]  646 	add	a, a
   037E 57            [ 4]  647 	ld	d, a
   037F AF            [ 4]  648 	xor	a, a
   0380 F5            [11]  649 	push	af
   0381 33            [ 6]  650 	inc	sp
   0382 D5            [11]  651 	push	de
   0383 33            [ 6]  652 	inc	sp
   0384 C5            [11]  653 	push	bc
   0385 CDr00r00      [17]  654 	call	_v_print_c
   0388 DD F9         [10]  655 	ld	sp,ix
   038A DD E1         [14]  656 	pop	ix
   038C C9            [10]  657 	ret
   038D                     658 ___str_1:
   038D 20 20 20 20 20      659 	.ascii "     "
   0392 00                  660 	.db 0x00
                            661 ;src/redefine.c:152: static bool r_is_control_used(const cpct_keyID control) {
                            662 ;	---------------------------------
                            663 ; Function r_is_control_used
                            664 ; ---------------------------------
   0393                     665 _r_is_control_used:
   0393 DD E5         [15]  666 	push	ix
   0395 DD 21 00 00   [14]  667 	ld	ix,#0
   0399 DD 39         [15]  668 	add	ix,sp
                            669 ;src/redefine.c:154: for (control_t i = KEY_UP; i < JOY_UP; i++) {
   039B 0E 00         [ 7]  670 	ld	c, #0x00
   039D                     671 00105$:
   039D 79            [ 4]  672 	ld	a, c
   039E D6 05         [ 7]  673 	sub	a, #0x05
   03A0 30 1E         [12]  674 	jr	NC,00103$
                            675 ;src/redefine.c:155: if (controls[i] == control)
   03A2 69            [ 4]  676 	ld	l, c
   03A3 26 00         [ 7]  677 	ld	h, #0x00
   03A5 29            [11]  678 	add	hl, hl
   03A6 11r00r00      [10]  679 	ld	de, #_controls
   03A9 19            [11]  680 	add	hl, de
   03AA 5E            [ 7]  681 	ld	e, (hl)
   03AB 23            [ 6]  682 	inc	hl
   03AC 56            [ 7]  683 	ld	d, (hl)
   03AD DD 7E 04      [19]  684 	ld	a, 4 (ix)
   03B0 93            [ 4]  685 	sub	a, e
   03B1 20 0A         [12]  686 	jr	NZ,00106$
   03B3 DD 7E 05      [19]  687 	ld	a, 5 (ix)
   03B6 92            [ 4]  688 	sub	a, d
   03B7 20 04         [12]  689 	jr	NZ,00106$
                            690 ;src/redefine.c:156: return true;
   03B9 2E 01         [ 7]  691 	ld	l, #0x01
   03BB 18 05         [12]  692 	jr	00107$
   03BD                     693 00106$:
                            694 ;src/redefine.c:154: for (control_t i = KEY_UP; i < JOY_UP; i++) {
   03BD 0C            [ 4]  695 	inc	c
   03BE 18 DD         [12]  696 	jr	00105$
   03C0                     697 00103$:
                            698 ;src/redefine.c:159: return false;
   03C0 2E 00         [ 7]  699 	ld	l, #0x00
   03C2                     700 00107$:
   03C2 DD E1         [14]  701 	pop	ix
   03C4 C9            [10]  702 	ret
                            703 	.area _CODE
                            704 	.area _INITIALIZER
                            705 	.area _CABS (ABS)
