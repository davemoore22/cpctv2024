                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module video
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _u_bounds_check
                             12 	.globl _u_get_xy
                             13 	.globl _u_wait
                             14 	.globl _PlaySound
                             15 	.globl _strlen
                             16 	.globl _sprintf
                             17 	.globl _cpct_zx7b_decrunch_s
                             18 	.globl _cpct_getScreenPtr
                             19 	.globl _cpct_setPALColour
                             20 	.globl _cpct_setPalette
                             21 	.globl _cpct_waitVSYNCStart
                             22 	.globl _cpct_waitVSYNC
                             23 	.globl _cpct_setVideoMode
                             24 	.globl _cpct_drawSpriteMasked
                             25 	.globl _cpct_drawSprite
                             26 	.globl _cpct_drawSolidBox
                             27 	.globl _cpct_drawToSpriteBufferMasked
                             28 	.globl _cpct_drawToSpriteBuffer
                             29 	.globl _cpct_scanKeyboard_if
                             30 	.globl _cpct_memset_f64
                             31 	.globl _cpct_memset
                             32 	.globl _cpct_removeInterruptHandler
                             33 	.globl _cpct_disableFirmware
                             34 	.globl _v_cycle_c
                             35 	.globl _v_frame_c
                             36 	.globl _v_pal_idx
                             37 	.globl _v_int_idx
                             38 	.globl _v_player_buf
                             39 	.globl _v_cells
                             40 	.globl _v_draw_logo
                             41 	.globl _v_init
                             42 	.globl _v_blk_scr
                             43 	.globl _v_wipe_scr
                             44 	.globl _v_clr_scr
                             45 	.globl _v_print_c
                             46 	.globl _v_print_n
                             47 	.globl _v_print
                             48 	.globl _v_reset_pal
                             49 	.globl _v_reset_pal_v
                             50 	.globl _v_wait_VSYNC
                             51 	.globl _v_get_pos
                             52 	.globl _v_flash_brd
                             53 	.globl _v_reset_timers
                             54 	.globl _v_interrupt
                             55 	.globl _v_draw_launch
                             56 	.globl _v_draw_player
                             57 	.globl _v_draw_enemies
                             58 	.globl _v_draw_bolts
                             59 	.globl _v_draw_box
                             60 	.globl _v_init_sprites
                             61 	.globl _v_get_sprite_p
                             62 	.globl _v_draw_player_bb
                             63 	.globl _v_draw_grid
                             64 ;--------------------------------------------------------
                             65 ; special function registers
                             66 ;--------------------------------------------------------
                             67 ;--------------------------------------------------------
                             68 ; ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DATA
   0000                      71 _v_player_buf::
   0000                      72 	.ds 270
   010E                      73 _v_cell_buf_0:
   010E                      74 	.ds 30
   012C                      75 _v_cell_buf_1:
   012C                      76 	.ds 30
   014A                      77 _v_cell_buf_2:
   014A                      78 	.ds 30
   0168                      79 _v_cell_buf_3:
   0168                      80 	.ds 30
   0186                      81 _v_cell_buf_4:
   0186                      82 	.ds 30
   01A4                      83 _v_cell_buf_5:
   01A4                      84 	.ds 30
   01C2                      85 _v_cell_buf_6:
   01C2                      86 	.ds 30
   01E0                      87 _v_cell_buf_7:
   01E0                      88 	.ds 30
                             89 ;--------------------------------------------------------
                             90 ; ram data
                             91 ;--------------------------------------------------------
                             92 	.area _INITIALIZED
   0000                      93 _v_int_idx::
   0000                      94 	.ds 1
   0001                      95 _v_pal_idx::
   0001                      96 	.ds 1
   0002                      97 _v_frame_c::
   0002                      98 	.ds 1
   0003                      99 _v_cycle_c::
   0003                     100 	.ds 2
                            101 ;--------------------------------------------------------
                            102 ; absolute external ram data
                            103 ;--------------------------------------------------------
                            104 	.area _DABS (ABS)
                            105 ;--------------------------------------------------------
                            106 ; global & static initialisations
                            107 ;--------------------------------------------------------
                            108 	.area _HOME
                            109 	.area _GSINIT
                            110 	.area _GSFINAL
                            111 	.area _GSINIT
                            112 ;--------------------------------------------------------
                            113 ; Home
                            114 ;--------------------------------------------------------
                            115 	.area _HOME
                            116 	.area _HOME
                            117 ;--------------------------------------------------------
                            118 ; code
                            119 ;--------------------------------------------------------
                            120 	.area _CODE
                            121 ;src/lib/video.c:57: void v_draw_logo() {
                            122 ;	---------------------------------
                            123 ; Function v_draw_logo
                            124 ; ---------------------------------
   0000                     125 _v_draw_logo::
                            126 ;src/lib/video.c:60: cpct_zx7b_decrunch_s(VIDEO_MEM_END, img_titles_end);
   0000 21r3Dr01      [10]  127 	ld	hl, #(_img_titles + 0x013d)
   0003 E5            [11]  128 	push	hl
   0004 21 FF FF      [10]  129 	ld	hl, #0xffff
   0007 E5            [11]  130 	push	hl
   0008 CDr00r00      [17]  131 	call	_cpct_zx7b_decrunch_s
   000B C9            [10]  132 	ret
   000C                     133 _v_cells:
   000Cr0Er01               134 	.dw _v_cell_buf_0
   000Er2Cr01               135 	.dw _v_cell_buf_1
   0010r4Ar01               136 	.dw _v_cell_buf_2
   0012r68r01               137 	.dw _v_cell_buf_3
   0014r86r01               138 	.dw _v_cell_buf_4
   0016rA4r01               139 	.dw _v_cell_buf_5
   0018rC2r01               140 	.dw _v_cell_buf_6
   001ArE0r01               141 	.dw _v_cell_buf_7
   001C                     142 _v_spr_map:
   001C 01                  143 	.db #0x01	; 1
   001D 03                  144 	.db #0x03	; 3
   001E 05                  145 	.db #0x05	; 5
   001F 09                  146 	.db #0x09	; 9
   0020 0D                  147 	.db #0x0d	; 13
   0021 07                  148 	.db #0x07	; 7
   0022 0B                  149 	.db #0x0b	; 11
   0023 0F                  150 	.db #0x0f	; 15
   0024                     151 _launch_st:
   0024 0C                  152 	.db #0x0c	; 12
   0025 07                  153 	.db #0x07	; 7
                            154 ;src/lib/video.c:64: void v_init(void) {
                            155 ;	---------------------------------
                            156 ; Function v_init
                            157 ; ---------------------------------
   0026                     158 _v_init::
                            159 ;src/lib/video.c:67: cpct_disableFirmware();
   0026 CDr00r00      [17]  160 	call	_cpct_disableFirmware
                            161 ;src/lib/video.c:68: cpct_setVideoMode(0);
   0029 2E 00         [ 7]  162 	ld	l, #0x00
   002B CDr00r00      [17]  163 	call	_cpct_setVideoMode
                            164 ;src/lib/video.c:69: cpct_waitVSYNCStart();
   002E CDr00r00      [17]  165 	call	_cpct_waitVSYNCStart
                            166 ;src/lib/video.c:70: cpct_clearScreen_f64(0);
   0031 21 00 40      [10]  167 	ld	hl, #0x4000
   0034 E5            [11]  168 	push	hl
   0035 26 00         [ 7]  169 	ld	h, #0x00
   0037 E5            [11]  170 	push	hl
   0038 26 C0         [ 7]  171 	ld	h, #0xc0
   003A E5            [11]  172 	push	hl
   003B CDr00r00      [17]  173 	call	_cpct_memset_f64
   003E C9            [10]  174 	ret
                            175 ;src/lib/video.c:74: void v_blk_scr(void) {
                            176 ;	---------------------------------
                            177 ; Function v_blk_scr
                            178 ; ---------------------------------
   003F                     179 _v_blk_scr::
                            180 ;src/lib/video.c:80: cpct_removeInterruptHandler();
   003F CDr00r00      [17]  181 	call	_cpct_removeInterruptHandler
                            182 ;src/lib/video.c:81: cpct_waitVSYNC();
   0042 CDr00r00      [17]  183 	call	_cpct_waitVSYNC
                            184 ;src/lib/video.c:82: cpct_setPalette(blank_pal, sizeof(blank_pal));
   0045 21 10 00      [10]  185 	ld	hl, #0x0010
   0048 E5            [11]  186 	push	hl
   0049 21r58r00      [10]  187 	ld	hl, #_v_blk_scr_blank_pal_1_285
   004C E5            [11]  188 	push	hl
   004D CDr00r00      [17]  189 	call	_cpct_setPalette
                            190 ;src/lib/video.c:83: cpct_setBorder(HW_BLACK);
   0050 21 10 14      [10]  191 	ld	hl, #0x1410
   0053 E5            [11]  192 	push	hl
   0054 CDr00r00      [17]  193 	call	_cpct_setPALColour
   0057 C9            [10]  194 	ret
   0058                     195 _v_blk_scr_blank_pal_1_285:
   0058 14                  196 	.db #0x14	; 20
   0059 14                  197 	.db #0x14	; 20
   005A 14                  198 	.db #0x14	; 20
   005B 14                  199 	.db #0x14	; 20
   005C 14                  200 	.db #0x14	; 20
   005D 14                  201 	.db #0x14	; 20
   005E 14                  202 	.db #0x14	; 20
   005F 14                  203 	.db #0x14	; 20
   0060 14                  204 	.db #0x14	; 20
   0061 14                  205 	.db #0x14	; 20
   0062 14                  206 	.db #0x14	; 20
   0063 14                  207 	.db #0x14	; 20
   0064 14                  208 	.db #0x14	; 20
   0065 14                  209 	.db #0x14	; 20
   0066 14                  210 	.db #0x14	; 20
   0067 14                  211 	.db #0x14	; 20
                            212 ;src/lib/video.c:87: void v_wipe_scr(bool dir) {
                            213 ;	---------------------------------
                            214 ; Function v_wipe_scr
                            215 ; ---------------------------------
   0068                     216 _v_wipe_scr::
                            217 ;src/lib/video.c:91: if (dir) {
   0068 21 02 00      [10]  218 	ld	hl, #2+0
   006B 39            [11]  219 	add	hl, sp
   006C CB 46         [12]  220 	bit	0, (hl)
   006E 28 29         [12]  221 	jr	Z,00126$
                            222 ;src/lib/video.c:94: for (u8 x = 0; x < 80; x++) {
   0070 06 00         [ 7]  223 	ld	b, #0x00
   0072                     224 00111$:
   0072 78            [ 4]  225 	ld	a, b
   0073 D6 50         [ 7]  226 	sub	a, #0x50
   0075 D0            [11]  227 	ret	NC
                            228 ;src/lib/video.c:95: if (x % 2 == 0) {
   0076 CB 40         [ 8]  229 	bit	0, b
   0078 20 1C         [12]  230 	jr	NZ,00112$
                            231 ;src/lib/video.c:96: cpct_waitVSYNC();
   007A C5            [11]  232 	push	bc
   007B CDr00r00      [17]  233 	call	_cpct_waitVSYNC
   007E C1            [10]  234 	pop	bc
                            235 ;src/lib/video.c:97: v_pos = v_get_pos(x, 0);
   007F C5            [11]  236 	push	bc
   0080 AF            [ 4]  237 	xor	a, a
   0081 F5            [11]  238 	push	af
   0082 33            [ 6]  239 	inc	sp
   0083 C5            [11]  240 	push	bc
   0084 33            [ 6]  241 	inc	sp
   0085 CDr5Cr02      [17]  242 	call	_v_get_pos
   0088 F1            [10]  243 	pop	af
   0089 11 02 C8      [10]  244 	ld	de, #0xc802
   008C D5            [11]  245 	push	de
   008D 11 00 00      [10]  246 	ld	de, #0x0000
   0090 D5            [11]  247 	push	de
   0091 E5            [11]  248 	push	hl
   0092 CDr00r00      [17]  249 	call	_cpct_drawSolidBox
   0095 C1            [10]  250 	pop	bc
   0096                     251 00112$:
                            252 ;src/lib/video.c:94: for (u8 x = 0; x < 80; x++) {
   0096 04            [ 4]  253 	inc	b
   0097 18 D9         [12]  254 	jr	00111$
                            255 ;src/lib/video.c:104: for (u8 x = 78; x > 0; x--) {
   0099                     256 00126$:
   0099 0E 4E         [ 7]  257 	ld	c, #0x4e
   009B                     258 00114$:
   009B 79            [ 4]  259 	ld	a, c
   009C B7            [ 4]  260 	or	a, a
   009D C8            [11]  261 	ret	Z
                            262 ;src/lib/video.c:105: if (x % 2 == 0) {
   009E CB 41         [ 8]  263 	bit	0, c
   00A0 20 1A         [12]  264 	jr	NZ,00115$
                            265 ;src/lib/video.c:106: cpct_waitVSYNC();
   00A2 C5            [11]  266 	push	bc
   00A3 CDr00r00      [17]  267 	call	_cpct_waitVSYNC
   00A6 C1            [10]  268 	pop	bc
                            269 ;src/lib/video.c:107: v_pos = v_get_pos(x, 0);
   00A7 C5            [11]  270 	push	bc
   00A8 AF            [ 4]  271 	xor	a, a
   00A9 47            [ 4]  272 	ld	b, a
   00AA C5            [11]  273 	push	bc
   00AB CDr5Cr02      [17]  274 	call	_v_get_pos
   00AE F1            [10]  275 	pop	af
   00AF 11 02 C8      [10]  276 	ld	de, #0xc802
   00B2 D5            [11]  277 	push	de
   00B3 11 00 00      [10]  278 	ld	de, #0x0000
   00B6 D5            [11]  279 	push	de
   00B7 E5            [11]  280 	push	hl
   00B8 CDr00r00      [17]  281 	call	_cpct_drawSolidBox
   00BB C1            [10]  282 	pop	bc
   00BC                     283 00115$:
                            284 ;src/lib/video.c:104: for (u8 x = 78; x > 0; x--) {
   00BC 0D            [ 4]  285 	dec	c
   00BD 18 DC         [12]  286 	jr	00114$
                            287 ;src/lib/video.c:115: void v_clr_scr(void) {
                            288 ;	---------------------------------
                            289 ; Function v_clr_scr
                            290 ; ---------------------------------
   00BF                     291 _v_clr_scr::
                            292 ;src/lib/video.c:117: cpct_waitVSYNCStart();
   00BF CDr00r00      [17]  293 	call	_cpct_waitVSYNCStart
                            294 ;src/lib/video.c:118: cpct_clearScreen_f64(0);
   00C2 21 00 40      [10]  295 	ld	hl, #0x4000
   00C5 E5            [11]  296 	push	hl
   00C6 26 00         [ 7]  297 	ld	h, #0x00
   00C8 E5            [11]  298 	push	hl
   00C9 26 C0         [ 7]  299 	ld	h, #0xc0
   00CB E5            [11]  300 	push	hl
   00CC CDr00r00      [17]  301 	call	_cpct_memset_f64
   00CF C9            [10]  302 	ret
                            303 ;src/lib/video.c:122: void v_print_c(const char *str, const u8 y, const pen_t pen) {
                            304 ;	---------------------------------
                            305 ; Function v_print_c
                            306 ; ---------------------------------
   00D0                     307 _v_print_c::
                            308 ;src/lib/video.c:124: u8 x = (40) - (strlen(str) * 2) / 2;
   00D0 C1            [10]  309 	pop	bc
   00D1 E1            [10]  310 	pop	hl
   00D2 E5            [11]  311 	push	hl
   00D3 C5            [11]  312 	push	bc
   00D4 E5            [11]  313 	push	hl
   00D5 CDr00r00      [17]  314 	call	_strlen
   00D8 F1            [10]  315 	pop	af
   00D9 29            [11]  316 	add	hl, hl
   00DA 4D            [ 4]  317 	ld	c, l
   00DB CB 3C         [ 8]  318 	srl	h
   00DD CB 19         [ 8]  319 	rr	c
   00DF 3E 28         [ 7]  320 	ld	a, #0x28
   00E1 91            [ 4]  321 	sub	a, c
   00E2 47            [ 4]  322 	ld	b, a
                            323 ;src/lib/video.c:126: v_print(str, x, y, pen);
   00E3 21 05 00      [10]  324 	ld	hl, #5+0
   00E6 39            [11]  325 	add	hl, sp
   00E7 7E            [ 7]  326 	ld	a, (hl)
   00E8 F5            [11]  327 	push	af
   00E9 33            [ 6]  328 	inc	sp
   00EA 21 05 00      [10]  329 	ld	hl, #5+0
   00ED 39            [11]  330 	add	hl, sp
   00EE 7E            [ 7]  331 	ld	a, (hl)
   00EF F5            [11]  332 	push	af
   00F0 33            [ 6]  333 	inc	sp
   00F1 C5            [11]  334 	push	bc
   00F2 33            [ 6]  335 	inc	sp
   00F3 21 05 00      [10]  336 	ld	hl, #5
   00F6 39            [11]  337 	add	hl, sp
   00F7 4E            [ 7]  338 	ld	c, (hl)
   00F8 23            [ 6]  339 	inc	hl
   00F9 46            [ 7]  340 	ld	b, (hl)
   00FA C5            [11]  341 	push	bc
   00FB CDr5Cr01      [17]  342 	call	_v_print
   00FE F1            [10]  343 	pop	af
   00FF F1            [10]  344 	pop	af
   0100 33            [ 6]  345 	inc	sp
   0101 C9            [10]  346 	ret
                            347 ;src/lib/video.c:130: void v_print_n(const i64 num, const u8 x, const u8 y, const pen_t pen) {
                            348 ;	---------------------------------
                            349 ; Function v_print_n
                            350 ; ---------------------------------
   0102                     351 _v_print_n::
   0102 DD E5         [15]  352 	push	ix
   0104 DD 21 00 00   [14]  353 	ld	ix,#0
   0108 DD 39         [15]  354 	add	ix,sp
   010A 21 D8 FF      [10]  355 	ld	hl, #-40
   010D 39            [11]  356 	add	hl, sp
   010E F9            [ 6]  357 	ld	sp, hl
                            358 ;src/lib/video.c:135: sprintf(str, "%lld", num);
   010F 21 00 00      [10]  359 	ld	hl, #0x0000
   0112 39            [11]  360 	add	hl, sp
   0113 4D            [ 4]  361 	ld	c, l
   0114 44            [ 4]  362 	ld	b, h
   0115 59            [ 4]  363 	ld	e, c
   0116 50            [ 4]  364 	ld	d, b
   0117 C5            [11]  365 	push	bc
   0118 DD 66 0B      [19]  366 	ld	h, 11 (ix)
   011B DD 6E 0A      [19]  367 	ld	l, 10 (ix)
   011E E5            [11]  368 	push	hl
   011F DD 66 09      [19]  369 	ld	h, 9 (ix)
   0122 DD 6E 08      [19]  370 	ld	l, 8 (ix)
   0125 E5            [11]  371 	push	hl
   0126 DD 66 07      [19]  372 	ld	h, 7 (ix)
   0129 DD 6E 06      [19]  373 	ld	l, 6 (ix)
   012C E5            [11]  374 	push	hl
   012D DD 66 05      [19]  375 	ld	h, 5 (ix)
   0130 DD 6E 04      [19]  376 	ld	l, 4 (ix)
   0133 E5            [11]  377 	push	hl
   0134 21r57r01      [10]  378 	ld	hl, #___str_0
   0137 E5            [11]  379 	push	hl
   0138 D5            [11]  380 	push	de
   0139 CDr00r00      [17]  381 	call	_sprintf
   013C 21 0C 00      [10]  382 	ld	hl, #12
   013F 39            [11]  383 	add	hl, sp
   0140 F9            [ 6]  384 	ld	sp, hl
   0141 C1            [10]  385 	pop	bc
                            386 ;src/lib/video.c:136: v_print(str, x, y, pen);
   0142 DD 66 0E      [19]  387 	ld	h, 14 (ix)
   0145 DD 6E 0D      [19]  388 	ld	l, 13 (ix)
   0148 E5            [11]  389 	push	hl
   0149 DD 7E 0C      [19]  390 	ld	a, 12 (ix)
   014C F5            [11]  391 	push	af
   014D 33            [ 6]  392 	inc	sp
   014E C5            [11]  393 	push	bc
   014F CDr5Cr01      [17]  394 	call	_v_print
   0152 DD F9         [10]  395 	ld	sp,ix
   0154 DD E1         [14]  396 	pop	ix
   0156 C9            [10]  397 	ret
   0157                     398 ___str_0:
   0157 25 6C 6C 64         399 	.ascii "%lld"
   015B 00                  400 	.db 0x00
                            401 ;src/lib/video.c:140: void v_print(const char *str, const u8 x, const u8 y, const pen_t pen) {
                            402 ;	---------------------------------
                            403 ; Function v_print
                            404 ; ---------------------------------
   015C                     405 _v_print::
   015C DD E5         [15]  406 	push	ix
   015E DD 21 00 00   [14]  407 	ld	ix,#0
   0162 DD 39         [15]  408 	add	ix,sp
   0164 F5            [11]  409 	push	af
   0165 F5            [11]  410 	push	af
                            411 ;src/lib/video.c:143: u8 cx = x, cy = y;
   0166 DD 7E 06      [19]  412 	ld	a, 6 (ix)
   0169 DD 77 FF      [19]  413 	ld	-1 (ix), a
   016C DD 7E 07      [19]  414 	ld	a, 7 (ix)
   016F DD 77 FC      [19]  415 	ld	-4 (ix), a
                            416 ;src/lib/video.c:148: while (str[i] != '\0') {
   0172 DD 7E 08      [19]  417 	ld	a, 8 (ix)
   0175 3D            [ 4]  418 	dec	a
   0176 20 04         [12]  419 	jr	NZ,00127$
   0178 3E 01         [ 7]  420 	ld	a,#0x01
   017A 18 01         [12]  421 	jr	00128$
   017C                     422 00127$:
   017C AF            [ 4]  423 	xor	a,a
   017D                     424 00128$:
   017D DD 77 FD      [19]  425 	ld	-3 (ix), a
   0180 DD 7E 08      [19]  426 	ld	a, 8 (ix)
   0183 D6 02         [ 7]  427 	sub	a, #0x02
   0185 20 04         [12]  428 	jr	NZ,00129$
   0187 3E 01         [ 7]  429 	ld	a,#0x01
   0189 18 01         [12]  430 	jr	00130$
   018B                     431 00129$:
   018B AF            [ 4]  432 	xor	a,a
   018C                     433 00130$:
   018C DD 77 FE      [19]  434 	ld	-2 (ix), a
   018F 11 00 00      [10]  435 	ld	de, #0x0000
   0192                     436 00105$:
   0192 DD 6E 04      [19]  437 	ld	l,4 (ix)
   0195 DD 66 05      [19]  438 	ld	h,5 (ix)
   0198 19            [11]  439 	add	hl, de
   0199 4E            [ 7]  440 	ld	c, (hl)
   019A 79            [ 4]  441 	ld	a, c
   019B B7            [ 4]  442 	or	a, a
   019C 28 57         [12]  443 	jr	Z,00108$
                            444 ;src/lib/video.c:151: switch (pen) {
   019E DD 7E FD      [19]  445 	ld	a, -3 (ix)
   01A1 B7            [ 4]  446 	or	a, a
   01A2 20 08         [12]  447 	jr	NZ,00101$
   01A4 DD 7E FE      [19]  448 	ld	a, -2 (ix)
   01A7 B7            [ 4]  449 	or	a, a
   01A8 20 07         [12]  450 	jr	NZ,00102$
   01AA 18 0A         [12]  451 	jr	00103$
                            452 ;src/lib/video.c:152: case FONT_BLUE:
   01AC                     453 00101$:
                            454 ;src/lib/video.c:153: offset = 96;
   01AC 21 60 00      [10]  455 	ld	hl, #0x0060
                            456 ;src/lib/video.c:154: break;
   01AF 18 08         [12]  457 	jr	00104$
                            458 ;src/lib/video.c:155: case FONT_WHITE:
   01B1                     459 00102$:
                            460 ;src/lib/video.c:156: offset = 96 + 96;
   01B1 21 C0 00      [10]  461 	ld	hl, #0x00c0
                            462 ;src/lib/video.c:157: break;
   01B4 18 03         [12]  463 	jr	00104$
                            464 ;src/lib/video.c:158: default:
   01B6                     465 00103$:
                            466 ;src/lib/video.c:159: offset = 0;
   01B6 21 00 00      [10]  467 	ld	hl, #0x0000
                            468 ;src/lib/video.c:161: };
   01B9                     469 00104$:
                            470 ;src/lib/video.c:162: idx = (int)str[i] - 32;
   01B9 06 00         [ 7]  471 	ld	b, #0x00
   01BB 79            [ 4]  472 	ld	a, c
   01BC C6 E0         [ 7]  473 	add	a, #0xe0
   01BE 4F            [ 4]  474 	ld	c, a
   01BF 78            [ 4]  475 	ld	a, b
   01C0 CE FF         [ 7]  476 	adc	a, #0xff
   01C2 47            [ 4]  477 	ld	b, a
                            478 ;src/lib/video.c:163: idx += offset;
   01C3 09            [11]  479 	add	hl,bc
                            480 ;src/lib/video.c:165: v_pos = v_get_pos(cx, cy);
   01C4 E5            [11]  481 	push	hl
   01C5 D5            [11]  482 	push	de
   01C6 DD 66 FC      [19]  483 	ld	h, -4 (ix)
   01C9 DD 6E FF      [19]  484 	ld	l, -1 (ix)
   01CC E5            [11]  485 	push	hl
   01CD CDr5Cr02      [17]  486 	call	_v_get_pos
   01D0 F1            [10]  487 	pop	af
   01D1 D1            [10]  488 	pop	de
   01D2 C1            [10]  489 	pop	bc
                            490 ;src/lib/video.c:166: cpct_drawSprite(font_ts[idx], v_pos, 2, 6);
   01D3 E5            [11]  491 	push	hl
   01D4 FD E1         [14]  492 	pop	iy
   01D6 69            [ 4]  493 	ld	l, c
   01D7 60            [ 4]  494 	ld	h, b
   01D8 29            [11]  495 	add	hl, hl
   01D9 01r00r00      [10]  496 	ld	bc, #_font_ts
   01DC 09            [11]  497 	add	hl, bc
   01DD 4E            [ 7]  498 	ld	c, (hl)
   01DE 23            [ 6]  499 	inc	hl
   01DF 46            [ 7]  500 	ld	b, (hl)
   01E0 D5            [11]  501 	push	de
   01E1 21 02 06      [10]  502 	ld	hl, #0x0602
   01E4 E5            [11]  503 	push	hl
   01E5 FD E5         [15]  504 	push	iy
   01E7 C5            [11]  505 	push	bc
   01E8 CDr00r00      [17]  506 	call	_cpct_drawSprite
   01EB D1            [10]  507 	pop	de
                            508 ;src/lib/video.c:169: cx = cx + LINE_P_W;
   01EC DD 34 FF      [23]  509 	inc	-1 (ix)
   01EF DD 34 FF      [23]  510 	inc	-1 (ix)
                            511 ;src/lib/video.c:170: i++;
   01F2 13            [ 6]  512 	inc	de
   01F3 18 9D         [12]  513 	jr	00105$
   01F5                     514 00108$:
   01F5 DD F9         [10]  515 	ld	sp, ix
   01F7 DD E1         [14]  516 	pop	ix
   01F9 C9            [10]  517 	ret
                            518 ;src/lib/video.c:175: void v_reset_pal(void) {
                            519 ;	---------------------------------
                            520 ; Function v_reset_pal
                            521 ; ---------------------------------
   01FA                     522 _v_reset_pal::
                            523 ;src/lib/video.c:183: cpct_waitVSYNC();
   01FA CDr00r00      [17]  524 	call	_cpct_waitVSYNC
                            525 ;src/lib/video.c:184: cpct_setPalette(normal_pal, sizeof(normal_pal));
   01FD 21 10 00      [10]  526 	ld	hl, #0x0010
   0200 E5            [11]  527 	push	hl
   0201 21r10r02      [10]  528 	ld	hl, #_v_reset_pal_normal_pal_1_307
   0204 E5            [11]  529 	push	hl
   0205 CDr00r00      [17]  530 	call	_cpct_setPalette
                            531 ;src/lib/video.c:185: cpct_setBorder(HW_BLACK);
   0208 21 10 14      [10]  532 	ld	hl, #0x1410
   020B E5            [11]  533 	push	hl
   020C CDr00r00      [17]  534 	call	_cpct_setPALColour
   020F C9            [10]  535 	ret
   0210                     536 _v_reset_pal_normal_pal_1_307:
   0210 14                  537 	.db #0x14	; 20
   0211 15                  538 	.db #0x15	; 21
   0212 1C                  539 	.db #0x1c	; 28
   0213 18                  540 	.db #0x18	; 24
   0214 0C                  541 	.db #0x0c	; 12
   0215 16                  542 	.db #0x16	; 22
   0216 17                  543 	.db #0x17	; 23
   0217 00                  544 	.db #0x00	; 0
   0218 1F                  545 	.db #0x1f	; 31
   0219 0E                  546 	.db #0x0e	; 14
   021A 0F                  547 	.db #0x0f	; 15
   021B 12                  548 	.db #0x12	; 18
   021C 13                  549 	.db #0x13	; 19
   021D 0A                  550 	.db #0x0a	; 10
   021E 03                  551 	.db #0x03	; 3
   021F 0B                  552 	.db #0x0b	; 11
                            553 ;src/lib/video.c:189: void v_reset_pal_v(void) {
                            554 ;	---------------------------------
                            555 ; Function v_reset_pal_v
                            556 ; ---------------------------------
   0220                     557 _v_reset_pal_v::
                            558 ;src/lib/video.c:196: cpct_waitVSYNC();
   0220 CDr00r00      [17]  559 	call	_cpct_waitVSYNC
                            560 ;src/lib/video.c:197: cpct_setPalette(victory_pal, sizeof(victory_pal));
   0223 21 10 00      [10]  561 	ld	hl, #0x0010
   0226 E5            [11]  562 	push	hl
   0227 21r36r02      [10]  563 	ld	hl, #_v_reset_pal_v_victory_pal_1_309
   022A E5            [11]  564 	push	hl
   022B CDr00r00      [17]  565 	call	_cpct_setPalette
                            566 ;src/lib/video.c:198: cpct_setBorder(HW_BLACK);
   022E 21 10 14      [10]  567 	ld	hl, #0x1410
   0231 E5            [11]  568 	push	hl
   0232 CDr00r00      [17]  569 	call	_cpct_setPALColour
   0235 C9            [10]  570 	ret
   0236                     571 _v_reset_pal_v_victory_pal_1_309:
   0236 14                  572 	.db #0x14	; 20
   0237 1C                  573 	.db #0x1c	; 28
   0238 00                  574 	.db #0x00	; 0
   0239 04                  575 	.db #0x04	; 4
   023A 17                  576 	.db #0x17	; 23
   023B 0B                  577 	.db #0x0b	; 11
   023C 06                  578 	.db #0x06	; 6
   023D 0C                  579 	.db #0x0c	; 12
   023E 1E                  580 	.db #0x1e	; 30
   023F 07                  581 	.db #0x07	; 7
   0240 18                  582 	.db #0x18	; 24
   0241 0E                  583 	.db #0x0e	; 14
   0242 1F                  584 	.db #0x1f	; 31
   0243 1B                  585 	.db #0x1b	; 27
   0244 03                  586 	.db #0x03	; 3
   0245 05                  587 	.db #0x05	; 5
                            588 ;src/lib/video.c:203: void v_wait_VSYNC(u8 n) {
                            589 ;	---------------------------------
                            590 ; Function v_wait_VSYNC
                            591 ; ---------------------------------
   0246                     592 _v_wait_VSYNC::
                            593 ;src/lib/video.c:205: do {
   0246 21 02 00      [10]  594 	ld	hl, #2+0
   0249 39            [11]  595 	add	hl, sp
   024A 4E            [ 7]  596 	ld	c, (hl)
   024B                     597 00103$:
                            598 ;src/lib/video.c:206: cpct_waitVSYNC();
   024B C5            [11]  599 	push	bc
   024C CDr00r00      [17]  600 	call	_cpct_waitVSYNC
   024F C1            [10]  601 	pop	bc
                            602 ;src/lib/video.c:207: if (--n) {
   0250 0D            [ 4]  603 	dec	c
   0251 79            [ 4]  604 	ld	a, c
   0252 B7            [ 4]  605 	or	a, a
   0253 28 02         [12]  606 	jr	Z,00104$
                            607 ;src/lib/video.c:208: __asm__("halt");
   0255 76            [ 4]  608 	halt
                            609 ;src/lib/video.c:209: __asm__("halt");
   0256 76            [ 4]  610 	halt
   0257                     611 00104$:
                            612 ;src/lib/video.c:211: } while (n);
   0257 79            [ 4]  613 	ld	a, c
   0258 B7            [ 4]  614 	or	a, a
   0259 20 F0         [12]  615 	jr	NZ,00103$
   025B C9            [10]  616 	ret
                            617 ;src/lib/video.c:215: inline u8* v_get_pos(const u8 x, const u8 y) {
                            618 ;	---------------------------------
                            619 ; Function v_get_pos
                            620 ; ---------------------------------
   025C                     621 _v_get_pos::
                            622 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   025C 21 03 00      [10]  623 	ld	hl, #3+0
   025F 39            [11]  624 	add	hl, sp
   0260 7E            [ 7]  625 	ld	a, (hl)
   0261 F5            [11]  626 	push	af
   0262 33            [ 6]  627 	inc	sp
   0263 21 03 00      [10]  628 	ld	hl, #3+0
   0266 39            [11]  629 	add	hl, sp
   0267 7E            [ 7]  630 	ld	a, (hl)
   0268 F5            [11]  631 	push	af
   0269 33            [ 6]  632 	inc	sp
   026A 21 00 C0      [10]  633 	ld	hl, #0xc000
   026D E5            [11]  634 	push	hl
   026E CDr00r00      [17]  635 	call	_cpct_getScreenPtr
   0271 C9            [10]  636 	ret
                            637 ;src/lib/video.c:221: void v_flash_brd(u8 col, u16 n) {
                            638 ;	---------------------------------
                            639 ; Function v_flash_brd
                            640 ; ---------------------------------
   0272                     641 _v_flash_brd::
                            642 ;src/lib/video.c:223: cpct_setPALColour(16, col);
   0272 21 02 00      [10]  643 	ld	hl, #2+0
   0275 39            [11]  644 	add	hl, sp
   0276 56            [ 7]  645 	ld	d, (hl)
   0277 1E 10         [ 7]  646 	ld	e,#0x10
   0279 D5            [11]  647 	push	de
   027A CDr00r00      [17]  648 	call	_cpct_setPALColour
                            649 ;src/lib/video.c:224: u_wait(n * 15);
   027D 21 03 00      [10]  650 	ld	hl, #3
   0280 39            [11]  651 	add	hl, sp
   0281 4E            [ 7]  652 	ld	c, (hl)
   0282 23            [ 6]  653 	inc	hl
   0283 46            [ 7]  654 	ld	b, (hl)
   0284 69            [ 4]  655 	ld	l, c
   0285 60            [ 4]  656 	ld	h, b
   0286 29            [11]  657 	add	hl, hl
   0287 09            [11]  658 	add	hl, bc
   0288 29            [11]  659 	add	hl, hl
   0289 09            [11]  660 	add	hl, bc
   028A 29            [11]  661 	add	hl, hl
   028B 09            [11]  662 	add	hl, bc
   028C E5            [11]  663 	push	hl
   028D CDr00r00      [17]  664 	call	_u_wait
                            665 ;src/lib/video.c:225: cpct_setPALColour(16, HW_BLACK);
   0290 21 10 14      [10]  666 	ld	hl, #0x1410
   0293 E3            [19]  667 	ex	(sp),hl
   0294 CDr00r00      [17]  668 	call	_cpct_setPALColour
   0297 C9            [10]  669 	ret
                            670 ;src/lib/video.c:229: void v_reset_timers(void) {
                            671 ;	---------------------------------
                            672 ; Function v_reset_timers
                            673 ; ---------------------------------
   0298                     674 _v_reset_timers::
                            675 ;src/lib/video.c:231: v_int_idx = 0;
   0298 21r00r00      [10]  676 	ld	hl,#_v_int_idx + 0
   029B 36 00         [10]  677 	ld	(hl), #0x00
                            678 ;src/lib/video.c:232: v_pal_idx = 0;
   029D 21r01r00      [10]  679 	ld	hl,#_v_pal_idx + 0
   02A0 36 00         [10]  680 	ld	(hl), #0x00
                            681 ;src/lib/video.c:233: v_frame_c = 0;
   02A2 21r02r00      [10]  682 	ld	hl,#_v_frame_c + 0
   02A5 36 00         [10]  683 	ld	(hl), #0x00
   02A7 C9            [10]  684 	ret
                            685 ;src/lib/video.c:237: void v_interrupt(void) {
                            686 ;	---------------------------------
                            687 ; Function v_interrupt
                            688 ; ---------------------------------
   02A8                     689 _v_interrupt::
                            690 ;src/lib/video.c:271: if (v_int_idx == 0)
   02A8 3Ar00r00      [13]  691 	ld	a,(#_v_int_idx + 0)
   02AB B7            [ 4]  692 	or	a, a
   02AC 20 1A         [12]  693 	jr	NZ,00104$
                            694 ;src/lib/video.c:272: cpct_setPalette(anim_pal[v_pal_idx], 9);
   02AE 01r63r03      [10]  695 	ld	bc, #_v_interrupt_anim_pal_1_321+0
   02B1 ED 5Br01r00   [20]  696 	ld	de, (_v_pal_idx)
   02B5 16 00         [ 7]  697 	ld	d, #0x00
   02B7 6B            [ 4]  698 	ld	l, e
   02B8 62            [ 4]  699 	ld	h, d
   02B9 29            [11]  700 	add	hl, hl
   02BA 29            [11]  701 	add	hl, hl
   02BB 29            [11]  702 	add	hl, hl
   02BC 19            [11]  703 	add	hl, de
   02BD 09            [11]  704 	add	hl, bc
   02BE 01 09 00      [10]  705 	ld	bc, #0x0009
   02C1 C5            [11]  706 	push	bc
   02C2 E5            [11]  707 	push	hl
   02C3 CDr00r00      [17]  708 	call	_cpct_setPalette
   02C6 18 11         [12]  709 	jr	00105$
   02C8                     710 00104$:
                            711 ;src/lib/video.c:273: else if (v_int_idx == 1)
   02C8 3Ar00r00      [13]  712 	ld	a,(#_v_int_idx + 0)
   02CB 3D            [ 4]  713 	dec	a
   02CC 20 0B         [12]  714 	jr	NZ,00105$
                            715 ;src/lib/video.c:274: cpct_setPalette(fixed_pal, 16);
   02CE 21 10 00      [10]  716 	ld	hl, #0x0010
   02D1 E5            [11]  717 	push	hl
   02D2 21rA2r03      [10]  718 	ld	hl, #_v_interrupt_fixed_pal_1_321
   02D5 E5            [11]  719 	push	hl
   02D6 CDr00r00      [17]  720 	call	_cpct_setPalette
   02D9                     721 00105$:
                            722 ;src/lib/video.c:276: if (v_frame_c == 0)
   02D9 3Ar02r00      [13]  723 	ld	a,(#_v_frame_c + 0)
   02DC B7            [ 4]  724 	or	a, a
   02DD 20 18         [12]  725 	jr	NZ,00107$
                            726 ;src/lib/video.c:277: v_pal_idx = ++v_pal_idx % 7;
   02DF 21r01r00      [10]  727 	ld	hl, #_v_pal_idx+0
   02E2 34            [11]  728 	inc	(hl)
   02E3 3E 07         [ 7]  729 	ld	a, #0x07
   02E5 F5            [11]  730 	push	af
   02E6 33            [ 6]  731 	inc	sp
   02E7 3Ar01r00      [13]  732 	ld	a, (_v_pal_idx)
   02EA F5            [11]  733 	push	af
   02EB 33            [ 6]  734 	inc	sp
   02EC CDr00r00      [17]  735 	call	__moduchar
   02EF F1            [10]  736 	pop	af
   02F0 FD 21r01r00   [14]  737 	ld	iy, #_v_pal_idx
   02F4 FD 75 00      [19]  738 	ld	0 (iy), l
   02F7                     739 00107$:
                            740 ;src/lib/video.c:280: if (v_int_idx == 2)
   02F7 3Ar00r00      [13]  741 	ld	a,(#_v_int_idx + 0)
   02FA D6 02         [ 7]  742 	sub	a, #0x02
   02FC 20 03         [12]  743 	jr	NZ,00109$
                            744 ;src/lib/video.c:281: cpct_scanKeyboard_if();
   02FE CDr00r00      [17]  745 	call	_cpct_scanKeyboard_if
   0301                     746 00109$:
                            747 ;src/lib/video.c:284: if (t_in_titles && g_music_sfx)
   0301 21r00r00      [10]  748 	ld	hl,#_t_in_titles+0
   0304 CB 46         [12]  749 	bit	0, (hl)
   0306 28 11         [12]  750 	jr	Z,00113$
   0308 21r00r00      [10]  751 	ld	hl,#_g_music_sfx+0
   030B CB 46         [12]  752 	bit	0, (hl)
   030D 28 0A         [12]  753 	jr	Z,00113$
                            754 ;src/lib/video.c:285: if (v_int_idx == 3)
   030F 3Ar00r00      [13]  755 	ld	a,(#_v_int_idx + 0)
   0312 D6 03         [ 7]  756 	sub	a, #0x03
   0314 20 03         [12]  757 	jr	NZ,00113$
                            758 ;src/lib/video.c:286: PlaySound();
   0316 CDr00r00      [17]  759 	call	_PlaySound
   0319                     760 00113$:
                            761 ;src/lib/video.c:289: v_int_idx = ++v_int_idx % 6;
   0319 21r00r00      [10]  762 	ld	hl, #_v_int_idx+0
   031C 34            [11]  763 	inc	(hl)
   031D 3E 06         [ 7]  764 	ld	a, #0x06
   031F F5            [11]  765 	push	af
   0320 33            [ 6]  766 	inc	sp
   0321 3Ar00r00      [13]  767 	ld	a, (_v_int_idx)
   0324 F5            [11]  768 	push	af
   0325 33            [ 6]  769 	inc	sp
   0326 CDr00r00      [17]  770 	call	__moduchar
   0329 F1            [10]  771 	pop	af
   032A FD 21r00r00   [14]  772 	ld	iy, #_v_int_idx
   032E FD 75 00      [19]  773 	ld	0 (iy), l
                            774 ;src/lib/video.c:290: v_frame_c = ++v_frame_c % 50;
   0331 21r02r00      [10]  775 	ld	hl, #_v_frame_c+0
   0334 34            [11]  776 	inc	(hl)
   0335 3E 32         [ 7]  777 	ld	a, #0x32
   0337 F5            [11]  778 	push	af
   0338 33            [ 6]  779 	inc	sp
   0339 3Ar02r00      [13]  780 	ld	a, (_v_frame_c)
   033C F5            [11]  781 	push	af
   033D 33            [ 6]  782 	inc	sp
   033E CDr00r00      [17]  783 	call	__moduchar
                            784 ;src/lib/video.c:291: v_cycle_c = ++v_cycle_c % 12000;
   0341 7D            [ 4]  785 	ld	a,l
   0342 32r02r00      [13]  786 	ld	(#_v_frame_c + 0),a
   0345 F1            [10]  787 	pop	af
   0346 FD 21r03r00   [14]  788 	ld	iy,#_v_cycle_c
   034A FD 34 00      [23]  789 	inc	0 (iy)
   034D 20 03         [12]  790 	jr	NZ,00151$
   034F FD 34 01      [23]  791 	inc	1 (iy)
   0352                     792 00151$:
   0352 21 E0 2E      [10]  793 	ld	hl, #0x2ee0
   0355 E5            [11]  794 	push	hl
   0356 2Ar03r00      [16]  795 	ld	hl, (_v_cycle_c)
   0359 E5            [11]  796 	push	hl
   035A CDr00r00      [17]  797 	call	__moduint
   035D F1            [10]  798 	pop	af
   035E F1            [10]  799 	pop	af
   035F 22r03r00      [16]  800 	ld	(_v_cycle_c), hl
   0362 C9            [10]  801 	ret
   0363                     802 _v_interrupt_anim_pal_1_321:
   0363 14                  803 	.db #0x14	; 20
   0364 0C                  804 	.db #0x0c	; 12
   0365 15                  805 	.db #0x15	; 21
   0366 17                  806 	.db #0x17	; 23
   0367 13                  807 	.db #0x13	; 19
   0368 0B                  808 	.db #0x0b	; 11
   0369 13                  809 	.db #0x13	; 19
   036A 17                  810 	.db #0x17	; 23
   036B 15                  811 	.db #0x15	; 21
   036C 14                  812 	.db #0x14	; 20
   036D 0C                  813 	.db #0x0c	; 12
   036E 15                  814 	.db #0x15	; 21
   036F 15                  815 	.db #0x15	; 21
   0370 17                  816 	.db #0x17	; 23
   0371 13                  817 	.db #0x13	; 19
   0372 0B                  818 	.db #0x0b	; 11
   0373 13                  819 	.db #0x13	; 19
   0374 17                  820 	.db #0x17	; 23
   0375 14                  821 	.db #0x14	; 20
   0376 0C                  822 	.db #0x0c	; 12
   0377 17                  823 	.db #0x17	; 23
   0378 15                  824 	.db #0x15	; 21
   0379 15                  825 	.db #0x15	; 21
   037A 17                  826 	.db #0x17	; 23
   037B 13                  827 	.db #0x13	; 19
   037C 0B                  828 	.db #0x0b	; 11
   037D 13                  829 	.db #0x13	; 19
   037E 14                  830 	.db #0x14	; 20
   037F 0C                  831 	.db #0x0c	; 12
   0380 13                  832 	.db #0x13	; 19
   0381 17                  833 	.db #0x17	; 23
   0382 15                  834 	.db #0x15	; 21
   0383 15                  835 	.db #0x15	; 21
   0384 17                  836 	.db #0x17	; 23
   0385 13                  837 	.db #0x13	; 19
   0386 0B                  838 	.db #0x0b	; 11
   0387 14                  839 	.db #0x14	; 20
   0388 0C                  840 	.db #0x0c	; 12
   0389 0B                  841 	.db #0x0b	; 11
   038A 13                  842 	.db #0x13	; 19
   038B 17                  843 	.db #0x17	; 23
   038C 15                  844 	.db #0x15	; 21
   038D 15                  845 	.db #0x15	; 21
   038E 17                  846 	.db #0x17	; 23
   038F 13                  847 	.db #0x13	; 19
   0390 14                  848 	.db #0x14	; 20
   0391 0C                  849 	.db #0x0c	; 12
   0392 13                  850 	.db #0x13	; 19
   0393 0B                  851 	.db #0x0b	; 11
   0394 13                  852 	.db #0x13	; 19
   0395 17                  853 	.db #0x17	; 23
   0396 15                  854 	.db #0x15	; 21
   0397 15                  855 	.db #0x15	; 21
   0398 17                  856 	.db #0x17	; 23
   0399 14                  857 	.db #0x14	; 20
   039A 0C                  858 	.db #0x0c	; 12
   039B 17                  859 	.db #0x17	; 23
   039C 13                  860 	.db #0x13	; 19
   039D 0B                  861 	.db #0x0b	; 11
   039E 13                  862 	.db #0x13	; 19
   039F 17                  863 	.db #0x17	; 23
   03A0 15                  864 	.db #0x15	; 21
   03A1 15                  865 	.db #0x15	; 21
   03A2                     866 _v_interrupt_fixed_pal_1_321:
   03A2 14                  867 	.db #0x14	; 20
   03A3 15                  868 	.db #0x15	; 21
   03A4 1C                  869 	.db #0x1c	; 28
   03A5 18                  870 	.db #0x18	; 24
   03A6 0C                  871 	.db #0x0c	; 12
   03A7 16                  872 	.db #0x16	; 22
   03A8 17                  873 	.db #0x17	; 23
   03A9 00                  874 	.db #0x00	; 0
   03AA 1F                  875 	.db #0x1f	; 31
   03AB 0E                  876 	.db #0x0e	; 14
   03AC 0F                  877 	.db #0x0f	; 15
   03AD 12                  878 	.db #0x12	; 18
   03AE 13                  879 	.db #0x13	; 19
   03AF 0A                  880 	.db #0x0a	; 10
   03B0 03                  881 	.db #0x03	; 3
   03B1 0B                  882 	.db #0x0b	; 11
                            883 ;src/lib/video.c:295: void v_draw_launch(void) {
                            884 ;	---------------------------------
                            885 ; Function v_draw_launch
                            886 ; ---------------------------------
   03B2                     887 _v_draw_launch::
                            888 ;src/lib/video.c:300: GRID_LOC_Y + (launch_st.y * GRID_P_H) + 4);
   03B2 3Ar25r00      [13]  889 	ld	a, (#_launch_st + 1)
   03B5 4F            [ 4]  890 	ld	c, a
   03B6 87            [ 4]  891 	add	a, a
   03B7 87            [ 4]  892 	add	a, a
   03B8 81            [ 4]  893 	add	a, c
   03B9 87            [ 4]  894 	add	a, a
   03BA C6 16         [ 7]  895 	add	a, #0x16
   03BC 57            [ 4]  896 	ld	d, a
                            897 ;src/lib/video.c:299: v_pos = v_get_pos(GRID_LOC_X + (launch_st.x * GRID_P_W) - 2,
   03BD 3Ar24r00      [13]  898 	ld	a, (#_launch_st + 0)
   03C0 4F            [ 4]  899 	ld	c, a
   03C1 87            [ 4]  900 	add	a, a
   03C2 81            [ 4]  901 	add	a, c
                            902 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   03C3 5F            [ 4]  903 	ld	e,a
   03C4 D5            [11]  904 	push	de
   03C5 21 00 C0      [10]  905 	ld	hl, #0xc000
   03C8 E5            [11]  906 	push	hl
   03C9 CDr00r00      [17]  907 	call	_cpct_getScreenPtr
                            908 ;src/lib/video.c:300: GRID_LOC_Y + (launch_st.y * GRID_P_H) + 4);
                            909 ;src/lib/video.c:302: cpct_drawSpriteMasked(img_launch, v_pos, 7, 20);
   03CC 01r00r00      [10]  910 	ld	bc, #_img_launch+0
   03CF 11 07 14      [10]  911 	ld	de, #0x1407
   03D2 D5            [11]  912 	push	de
   03D3 E5            [11]  913 	push	hl
   03D4 C5            [11]  914 	push	bc
   03D5 CDr00r00      [17]  915 	call	_cpct_drawSpriteMasked
   03D8 C9            [10]  916 	ret
                            917 ;src/lib/video.c:307: void v_draw_player(void) {
                            918 ;	---------------------------------
                            919 ; Function v_draw_player
                            920 ; ---------------------------------
   03D9                     921 _v_draw_player::
   03D9 DD E5         [15]  922 	push	ix
   03DB DD 21 00 00   [14]  923 	ld	ix,#0
   03DF DD 39         [15]  924 	add	ix,sp
   03E1 21 ED FF      [10]  925 	ld	hl, #-19
   03E4 39            [11]  926 	add	hl, sp
   03E5 F9            [ 6]  927 	ld	sp, hl
                            928 ;src/lib/video.c:316: if (!g_player.explode) {
   03E6 3Ar08r00      [13]  929 	ld	a,(#_g_player + 8)
   03E9 DD 77 FD      [19]  930 	ld	-3 (ix), a
                            931 ;src/lib/video.c:317: v_pos = v_get_pos(g_player.sx, g_player.sy);
   03EC 3Ar05r00      [13]  932 	ld	a,(#_g_player + 5)
   03EF DD 77 F9      [19]  933 	ld	-7 (ix), a
   03F2 3Ar04r00      [13]  934 	ld	a,(#_g_player + 4)
   03F5 DD 77 FC      [19]  935 	ld	-4 (ix), a
                            936 ;src/lib/video.c:316: if (!g_player.explode) {
   03F8 DD CB FD 46   [20]  937 	bit	0, -3 (ix)
   03FC 20 43         [12]  938 	jr	NZ,00102$
                            939 ;src/lib/video.c:317: v_pos = v_get_pos(g_player.sx, g_player.sy);
   03FE DD 56 F9      [19]  940 	ld	d, -7 (ix)
                            941 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0401 DD 5E FC      [19]  942 	ld	e, -4 (ix)
   0404 D5            [11]  943 	push	de
   0405 21 00 C0      [10]  944 	ld	hl, #0xc000
   0408 E5            [11]  945 	push	hl
   0409 CDr00r00      [17]  946 	call	_cpct_getScreenPtr
   040C 4D            [ 4]  947 	ld	c, l
   040D 44            [ 4]  948 	ld	b, h
                            949 ;src/lib/video.c:317: v_pos = v_get_pos(g_player.sx, g_player.sy);
                            950 ;src/lib/video.c:318: idx = g_player.boost ? spr_idx[g_player.dir] : b_spr_idx[g_player.dir];
   040E 21r07r00      [10]  951 	ld	hl, #_g_player + 7
   0411 5E            [ 7]  952 	ld	e, (hl)
   0412 3Ar06r00      [13]  953 	ld	a, (#_g_player + 6)
   0415 6F            [ 4]  954 	ld	l, a
   0416 17            [ 4]  955 	rla
   0417 9F            [ 4]  956 	sbc	a, a
   0418 67            [ 4]  957 	ld	h, a
   0419 CB 43         [ 8]  958 	bit	0, e
   041B 28 07         [12]  959 	jr	Z,00111$
   041D 11r00r06      [10]  960 	ld	de, #_v_draw_player_spr_idx_1_328+0
   0420 19            [11]  961 	add	hl, de
   0421 6E            [ 7]  962 	ld	l, (hl)
   0422 18 07         [12]  963 	jr	00112$
   0424                     964 00111$:
   0424 11r04r06      [10]  965 	ld	de, #_v_draw_player_b_spr_idx_1_328+0
   0427 19            [11]  966 	add	hl,de
   0428 EB            [ 4]  967 	ex	de,hl
   0429 1A            [ 7]  968 	ld	a, (de)
   042A 6F            [ 4]  969 	ld	l, a
   042B                     970 00112$:
                            971 ;src/lib/video.c:319: cpct_drawSpriteMasked(player_ts[idx], v_pos, SZ_PLAYER_PX, 
   042B 11r00r00      [10]  972 	ld	de, #_player_ts+0
   042E 26 00         [ 7]  973 	ld	h, #0x00
   0430 29            [11]  974 	add	hl, hl
   0431 19            [11]  975 	add	hl, de
   0432 5E            [ 7]  976 	ld	e, (hl)
   0433 23            [ 6]  977 	inc	hl
   0434 56            [ 7]  978 	ld	d, (hl)
   0435 21 05 14      [10]  979 	ld	hl, #0x1405
   0438 E5            [11]  980 	push	hl
   0439 C5            [11]  981 	push	bc
   043A D5            [11]  982 	push	de
   043B CDr00r00      [17]  983 	call	_cpct_drawSpriteMasked
   043E C3rFBr05      [10]  984 	jp	00109$
   0441                     985 00102$:
                            986 ;src/lib/video.c:322: ex = g_player.sx;
                            987 ;src/lib/video.c:323: ey = g_player.sy;
                            988 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0441 DD 66 F9      [19]  989 	ld	h, -7 (ix)
   0444 DD 6E FC      [19]  990 	ld	l, -4 (ix)
   0447 E5            [11]  991 	push	hl
   0448 21 00 C0      [10]  992 	ld	hl, #0xc000
   044B E5            [11]  993 	push	hl
   044C CDr00r00      [17]  994 	call	_cpct_getScreenPtr
   044F DD 74 F4      [19]  995 	ld	-12 (ix), h
   0452 DD 75 F3      [19]  996 	ld	-13 (ix), l
   0455 DD 75 FA      [19]  997 	ld	-6 (ix), l
   0458 DD 7E F4      [19]  998 	ld	a, -12 (ix)
   045B DD 77 FB      [19]  999 	ld	-5 (ix), a
                           1000 ;src/lib/video.c:325: cpct_drawSpriteMasked(explode_ts[g_player.explode_f], e_pos,
   045E 3Ar09r00      [13] 1001 	ld	a,(#(_g_player + 0x0009) + 0)
   0461 DD 77 FD      [19] 1002 	ld	-3 (ix), a
   0464 DD 77 FE      [19] 1003 	ld	-2 (ix), a
   0467 DD 36 FF 00   [19] 1004 	ld	-1 (ix), #0x00
   046B DD CB FE 26   [23] 1005 	sla	-2 (ix)
   046F DD CB FF 16   [23] 1006 	rl	-1 (ix)
   0473 3Er00         [ 7] 1007 	ld	a, #<(_explode_ts)
   0475 DD 86 FE      [19] 1008 	add	a, -2 (ix)
   0478 DD 77 FE      [19] 1009 	ld	-2 (ix), a
   047B 3Es00         [ 7] 1010 	ld	a, #>(_explode_ts)
   047D DD 8E FF      [19] 1011 	adc	a, -1 (ix)
   0480 DD 77 FF      [19] 1012 	ld	-1 (ix), a
   0483 DD 6E FE      [19] 1013 	ld	l,-2 (ix)
   0486 DD 66 FF      [19] 1014 	ld	h,-1 (ix)
   0489 7E            [ 7] 1015 	ld	a, (hl)
   048A DD 77 FE      [19] 1016 	ld	-2 (ix), a
   048D 23            [ 6] 1017 	inc	hl
   048E 7E            [ 7] 1018 	ld	a, (hl)
   048F DD 77 FF      [19] 1019 	ld	-1 (ix), a
   0492 21 03 0A      [10] 1020 	ld	hl, #0x0a03
   0495 E5            [11] 1021 	push	hl
   0496 DD 6E FA      [19] 1022 	ld	l,-6 (ix)
   0499 DD 66 FB      [19] 1023 	ld	h,-5 (ix)
   049C E5            [11] 1024 	push	hl
   049D DD 6E FE      [19] 1025 	ld	l,-2 (ix)
   04A0 DD 66 FF      [19] 1026 	ld	h,-1 (ix)
   04A3 E5            [11] 1027 	push	hl
   04A4 CDr00r00      [17] 1028 	call	_cpct_drawSpriteMasked
                           1029 ;src/lib/video.c:327: ex += SZ_GRID_PX;
   04A7 DD 7E FC      [19] 1030 	ld	a, -4 (ix)
   04AA C6 03         [ 7] 1031 	add	a, #0x03
   04AC DD 77 F0      [19] 1032 	ld	-16 (ix), a
                           1033 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   04AF DD 66 F9      [19] 1034 	ld	h, -7 (ix)
   04B2 DD 6E F0      [19] 1035 	ld	l, -16 (ix)
   04B5 E5            [11] 1036 	push	hl
   04B6 21 00 C0      [10] 1037 	ld	hl, #0xc000
   04B9 E5            [11] 1038 	push	hl
   04BA CDr00r00      [17] 1039 	call	_cpct_getScreenPtr
   04BD DD 74 F2      [19] 1040 	ld	-14 (ix), h
   04C0 DD 75 F1      [19] 1041 	ld	-15 (ix), l
   04C3 DD 75 FE      [19] 1042 	ld	-2 (ix), l
   04C6 DD 7E F2      [19] 1043 	ld	a, -14 (ix)
   04C9 DD 77 FF      [19] 1044 	ld	-1 (ix), a
                           1045 ;src/lib/video.c:329: cpct_drawSpriteMasked(explode_ts[g_player.explode_f], e_pos,
   04CC 3Ar09r00      [13] 1046 	ld	a,(#(_g_player + 0x0009) + 0)
   04CF DD 77 FA      [19] 1047 	ld	-6 (ix), a
   04D2 DD 77 FA      [19] 1048 	ld	-6 (ix), a
   04D5 DD 36 FB 00   [19] 1049 	ld	-5 (ix), #0x00
   04D9 DD CB FA 26   [23] 1050 	sla	-6 (ix)
   04DD DD CB FB 16   [23] 1051 	rl	-5 (ix)
   04E1 3Er00         [ 7] 1052 	ld	a, #<(_explode_ts)
   04E3 DD 86 FA      [19] 1053 	add	a, -6 (ix)
   04E6 DD 77 FA      [19] 1054 	ld	-6 (ix), a
   04E9 3Es00         [ 7] 1055 	ld	a, #>(_explode_ts)
   04EB DD 8E FB      [19] 1056 	adc	a, -5 (ix)
   04EE DD 77 FB      [19] 1057 	ld	-5 (ix), a
   04F1 DD 6E FA      [19] 1058 	ld	l,-6 (ix)
   04F4 DD 66 FB      [19] 1059 	ld	h,-5 (ix)
   04F7 7E            [ 7] 1060 	ld	a, (hl)
   04F8 DD 77 FA      [19] 1061 	ld	-6 (ix), a
   04FB 23            [ 6] 1062 	inc	hl
   04FC 7E            [ 7] 1063 	ld	a, (hl)
   04FD DD 77 FB      [19] 1064 	ld	-5 (ix), a
   0500 21 03 0A      [10] 1065 	ld	hl, #0x0a03
   0503 E5            [11] 1066 	push	hl
   0504 DD 6E FE      [19] 1067 	ld	l,-2 (ix)
   0507 DD 66 FF      [19] 1068 	ld	h,-1 (ix)
   050A E5            [11] 1069 	push	hl
   050B DD 6E FA      [19] 1070 	ld	l,-6 (ix)
   050E DD 66 FB      [19] 1071 	ld	h,-5 (ix)
   0511 E5            [11] 1072 	push	hl
   0512 CDr00r00      [17] 1073 	call	_cpct_drawSpriteMasked
                           1074 ;src/lib/video.c:331: ey += SZ_GRID_PY;
   0515 DD 7E F9      [19] 1075 	ld	a, -7 (ix)
   0518 C6 0A         [ 7] 1076 	add	a, #0x0a
                           1077 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   051A DD 77 EF      [19] 1078 	ld	-17 (ix), a
   051D F5            [11] 1079 	push	af
   051E 33            [ 6] 1080 	inc	sp
   051F DD 7E F0      [19] 1081 	ld	a, -16 (ix)
   0522 F5            [11] 1082 	push	af
   0523 33            [ 6] 1083 	inc	sp
   0524 21 00 C0      [10] 1084 	ld	hl, #0xc000
   0527 E5            [11] 1085 	push	hl
   0528 CDr00r00      [17] 1086 	call	_cpct_getScreenPtr
   052B DD 74 F6      [19] 1087 	ld	-10 (ix), h
                           1088 ;src/lib/video.c:332: e_pos = v_get_pos(ex, ey);
   052E DD 75 F5      [19] 1089 	ld	-11 (ix), l
   0531 DD 75 ED      [19] 1090 	ld	-19 (ix), l
   0534 DD 7E F6      [19] 1091 	ld	a, -10 (ix)
   0537 DD 77 EE      [19] 1092 	ld	-18 (ix), a
                           1093 ;src/lib/video.c:333: cpct_drawSpriteMasked(explode_ts[g_player.explode_f], e_pos,
   053A DD 7E ED      [19] 1094 	ld	a, -19 (ix)
   053D DD 77 FE      [19] 1095 	ld	-2 (ix), a
   0540 DD 7E EE      [19] 1096 	ld	a, -18 (ix)
   0543 DD 77 FF      [19] 1097 	ld	-1 (ix), a
   0546 3Ar09r00      [13] 1098 	ld	a,(#(_g_player + 0x0009) + 0)
   0549 DD 77 FA      [19] 1099 	ld	-6 (ix), a
   054C DD 77 FA      [19] 1100 	ld	-6 (ix), a
   054F DD 36 FB 00   [19] 1101 	ld	-5 (ix), #0x00
   0553 DD CB FA 26   [23] 1102 	sla	-6 (ix)
   0557 DD CB FB 16   [23] 1103 	rl	-5 (ix)
   055B 3Er00         [ 7] 1104 	ld	a, #<(_explode_ts)
   055D DD 86 FA      [19] 1105 	add	a, -6 (ix)
   0560 DD 77 FA      [19] 1106 	ld	-6 (ix), a
   0563 3Es00         [ 7] 1107 	ld	a, #>(_explode_ts)
   0565 DD 8E FB      [19] 1108 	adc	a, -5 (ix)
   0568 DD 77 FB      [19] 1109 	ld	-5 (ix), a
   056B DD 6E FA      [19] 1110 	ld	l,-6 (ix)
   056E DD 66 FB      [19] 1111 	ld	h,-5 (ix)
   0571 7E            [ 7] 1112 	ld	a, (hl)
   0572 DD 77 FA      [19] 1113 	ld	-6 (ix), a
   0575 23            [ 6] 1114 	inc	hl
   0576 7E            [ 7] 1115 	ld	a, (hl)
   0577 DD 77 FB      [19] 1116 	ld	-5 (ix), a
   057A 21 03 0A      [10] 1117 	ld	hl, #0x0a03
   057D E5            [11] 1118 	push	hl
   057E DD 6E FE      [19] 1119 	ld	l,-2 (ix)
   0581 DD 66 FF      [19] 1120 	ld	h,-1 (ix)
   0584 E5            [11] 1121 	push	hl
   0585 DD 6E FA      [19] 1122 	ld	l,-6 (ix)
   0588 DD 66 FB      [19] 1123 	ld	h,-5 (ix)
   058B E5            [11] 1124 	push	hl
   058C CDr00r00      [17] 1125 	call	_cpct_drawSpriteMasked
                           1126 ;src/lib/video.c:335: ex -= SZ_GRID_PX;
   058F DD 7E F0      [19] 1127 	ld	a, -16 (ix)
   0592 C6 FD         [ 7] 1128 	add	a, #0xfd
   0594 47            [ 4] 1129 	ld	b, a
                           1130 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0595 DD 7E EF      [19] 1131 	ld	a, -17 (ix)
   0598 F5            [11] 1132 	push	af
   0599 33            [ 6] 1133 	inc	sp
   059A C5            [11] 1134 	push	bc
   059B 33            [ 6] 1135 	inc	sp
   059C 21 00 C0      [10] 1136 	ld	hl, #0xc000
   059F E5            [11] 1137 	push	hl
   05A0 CDr00r00      [17] 1138 	call	_cpct_getScreenPtr
   05A3 DD 74 F8      [19] 1139 	ld	-8 (ix), h
   05A6 DD 75 F7      [19] 1140 	ld	-9 (ix), l
   05A9 DD 75 FE      [19] 1141 	ld	-2 (ix), l
   05AC DD 7E F8      [19] 1142 	ld	a, -8 (ix)
   05AF DD 77 FF      [19] 1143 	ld	-1 (ix), a
                           1144 ;src/lib/video.c:337: cpct_drawSpriteMasked(explode_ts[g_player.explode_f], e_pos,
   05B2 3Ar09r00      [13] 1145 	ld	a,(#(_g_player + 0x0009) + 0)
   05B5 DD 77 FA      [19] 1146 	ld	-6 (ix), a
   05B8 DD 77 FA      [19] 1147 	ld	-6 (ix), a
   05BB DD 36 FB 00   [19] 1148 	ld	-5 (ix), #0x00
   05BF DD CB FA 26   [23] 1149 	sla	-6 (ix)
   05C3 DD CB FB 16   [23] 1150 	rl	-5 (ix)
   05C7 3Er00         [ 7] 1151 	ld	a, #<(_explode_ts)
   05C9 DD 86 FA      [19] 1152 	add	a, -6 (ix)
   05CC DD 77 FA      [19] 1153 	ld	-6 (ix), a
   05CF 3Es00         [ 7] 1154 	ld	a, #>(_explode_ts)
   05D1 DD 8E FB      [19] 1155 	adc	a, -5 (ix)
   05D4 DD 77 FB      [19] 1156 	ld	-5 (ix), a
   05D7 DD 6E FA      [19] 1157 	ld	l,-6 (ix)
   05DA DD 66 FB      [19] 1158 	ld	h,-5 (ix)
   05DD 7E            [ 7] 1159 	ld	a, (hl)
   05DE DD 77 FA      [19] 1160 	ld	-6 (ix), a
   05E1 23            [ 6] 1161 	inc	hl
   05E2 7E            [ 7] 1162 	ld	a, (hl)
   05E3 DD 77 FB      [19] 1163 	ld	-5 (ix), a
   05E6 21 03 0A      [10] 1164 	ld	hl, #0x0a03
   05E9 E5            [11] 1165 	push	hl
   05EA DD 6E FE      [19] 1166 	ld	l,-2 (ix)
   05ED DD 66 FF      [19] 1167 	ld	h,-1 (ix)
   05F0 E5            [11] 1168 	push	hl
   05F1 DD 6E FA      [19] 1169 	ld	l,-6 (ix)
   05F4 DD 66 FB      [19] 1170 	ld	h,-5 (ix)
   05F7 E5            [11] 1171 	push	hl
   05F8 CDr00r00      [17] 1172 	call	_cpct_drawSpriteMasked
   05FB                    1173 00109$:
   05FB DD F9         [10] 1174 	ld	sp, ix
   05FD DD E1         [14] 1175 	pop	ix
   05FF C9            [10] 1176 	ret
   0600                    1177 _v_draw_player_spr_idx_1_328:
   0600 07                 1178 	.db #0x07	; 7
   0601 06                 1179 	.db #0x06	; 6
   0602 08                 1180 	.db #0x08	; 8
   0603 05                 1181 	.db #0x05	; 5
   0604                    1182 _v_draw_player_b_spr_idx_1_328:
   0604 03                 1183 	.db #0x03	; 3
   0605 02                 1184 	.db #0x02	; 2
   0606 04                 1185 	.db #0x04	; 4
   0607 01                 1186 	.db #0x01	; 1
                           1187 ;src/lib/video.c:342: void v_draw_enemies(void) {
                           1188 ;	---------------------------------
                           1189 ; Function v_draw_enemies
                           1190 ; ---------------------------------
   0608                    1191 _v_draw_enemies::
   0608 DD E5         [15] 1192 	push	ix
   060A DD 21 00 00   [14] 1193 	ld	ix,#0
   060E DD 39         [15] 1194 	add	ix,sp
   0610 21 F4 FF      [10] 1195 	ld	hl, #-12
   0613 39            [11] 1196 	add	hl, sp
   0614 F9            [ 6] 1197 	ld	sp, hl
                           1198 ;src/lib/video.c:352: for (dir_t i = DIR_NORTH; i <= DIR_WEST; i++) {
   0615 DD 36 F4 00   [19] 1199 	ld	-12 (ix), #0x00
   0619                    1200 00125$:
   0619 3E 03         [ 7] 1201 	ld	a, #0x03
   061B DD 96 F4      [19] 1202 	sub	a, -12 (ix)
   061E E2r23r06      [10] 1203 	jp	PO, 00180$
   0621 EE 80         [ 7] 1204 	xor	a, #0x80
   0623                    1205 00180$:
   0623 FAr8Fr08      [10] 1206 	jp	M, 00127$
                           1207 ;src/lib/video.c:355: spr_st = g_enemies[i].fired ? spr_idx_f[i] : spr_idx[i];
   0626 DD 4E F4      [19] 1208 	ld	c, -12 (ix)
   0629 DD 7E F4      [19] 1209 	ld	a, -12 (ix)
   062C 17            [ 4] 1210 	rla
   062D 9F            [ 4] 1211 	sbc	a, a
   062E 47            [ 4] 1212 	ld	b, a
   062F 69            [ 4] 1213 	ld	l, c
   0630 60            [ 4] 1214 	ld	h, b
   0631 29            [11] 1215 	add	hl, hl
   0632 29            [11] 1216 	add	hl, hl
   0633 29            [11] 1217 	add	hl, hl
   0634 3Er00         [ 7] 1218 	ld	a, #<(_g_enemies)
   0636 85            [ 4] 1219 	add	a, l
   0637 DD 77 FE      [19] 1220 	ld	-2 (ix), a
   063A 3Es00         [ 7] 1221 	ld	a, #>(_g_enemies)
   063C 8C            [ 4] 1222 	adc	a, h
   063D DD 77 FF      [19] 1223 	ld	-1 (ix), a
   0640 DD 6E FE      [19] 1224 	ld	l,-2 (ix)
   0643 DD 66 FF      [19] 1225 	ld	h,-1 (ix)
   0646 11 07 00      [10] 1226 	ld	de, #0x0007
   0649 19            [11] 1227 	add	hl, de
   064A CB 46         [12] 1228 	bit	0, (hl)
   064C 28 07         [12] 1229 	jr	Z,00129$
   064E 21r98r08      [10] 1230 	ld	hl, #_v_draw_enemies_spr_idx_f_1_347
   0651 09            [11] 1231 	add	hl, bc
   0652 4E            [ 7] 1232 	ld	c, (hl)
   0653 18 05         [12] 1233 	jr	00130$
   0655                    1234 00129$:
   0655 21r94r08      [10] 1235 	ld	hl, #_v_draw_enemies_spr_idx_1_347
   0658 09            [11] 1236 	add	hl, bc
   0659 4E            [ 7] 1237 	ld	c, (hl)
   065A                    1238 00130$:
   065A DD 71 F5      [19] 1239 	ld	-11 (ix), c
                           1240 ;src/lib/video.c:358: loc = g_enemies[i].loc;
   065D DD 6E FE      [19] 1241 	ld	l,-2 (ix)
   0660 DD 66 FF      [19] 1242 	ld	h,-1 (ix)
   0663 23            [ 6] 1243 	inc	hl
   0664 4E            [ 7] 1244 	ld	c, (hl)
                           1245 ;src/lib/video.c:361: if (i % 2 == 0) {
   0665 C5            [11] 1246 	push	bc
   0666 3E 02         [ 7] 1247 	ld	a, #0x02
   0668 F5            [11] 1248 	push	af
   0669 33            [ 6] 1249 	inc	sp
   066A DD 7E F4      [19] 1250 	ld	a, -12 (ix)
   066D F5            [11] 1251 	push	af
   066E 33            [ 6] 1252 	inc	sp
                           1253 ;src/lib/video.c:362: px = GRID_LOC_X + ((loc - 1) * GRID_P_W);
   066F CDr00r00      [17] 1254 	call	__moduschar
   0672 F1            [10] 1255 	pop	af
   0673 DD 75 FE      [19] 1256 	ld	-2 (ix), l
   0676 C1            [10] 1257 	pop	bc
   0677 06 00         [ 7] 1258 	ld	b, #0x00
   0679 79            [ 4] 1259 	ld	a, c
   067A C6 FF         [ 7] 1260 	add	a, #0xff
   067C DD 77 FC      [19] 1261 	ld	-4 (ix), a
   067F 78            [ 4] 1262 	ld	a, b
   0680 CE FF         [ 7] 1263 	adc	a, #0xff
   0682 DD 77 FD      [19] 1264 	ld	-3 (ix), a
                           1265 ;src/lib/video.c:361: if (i % 2 == 0) {
   0685 DD 7E FE      [19] 1266 	ld	a, -2 (ix)
   0688 B7            [ 4] 1267 	or	a, a
   0689 20 51         [12] 1268 	jr	NZ,00110$
                           1269 ;src/lib/video.c:362: px = GRID_LOC_X + ((loc - 1) * GRID_P_W);
   068B DD 4E FC      [19] 1270 	ld	c,-4 (ix)
   068E DD 46 FD      [19] 1271 	ld	b,-3 (ix)
   0691 69            [ 4] 1272 	ld	l, c
   0692 60            [ 4] 1273 	ld	h, b
   0693 29            [11] 1274 	add	hl, hl
   0694 09            [11] 1275 	add	hl, bc
   0695 DD 75 FA      [19] 1276 	ld	-6 (ix), l
   0698 DD 74 FB      [19] 1277 	ld	-5 (ix), h
   069B DD 7E FA      [19] 1278 	ld	a, -6 (ix)
   069E C6 02         [ 7] 1279 	add	a, #0x02
   06A0 DD 77 F8      [19] 1280 	ld	-8 (ix), a
   06A3 DD 7E FB      [19] 1281 	ld	a, -5 (ix)
   06A6 CE 00         [ 7] 1282 	adc	a, #0x00
   06A8 DD 77 F9      [19] 1283 	ld	-7 (ix), a
                           1284 ;src/lib/video.c:363: py = i == DIR_NORTH ? GRID_LOC_Y - 8 : 
   06AB DD 7E F4      [19] 1285 	ld	a, -12 (ix)
   06AE B7            [ 4] 1286 	or	a, a
   06AF 20 04         [12] 1287 	jr	NZ,00131$
   06B1 0E 0A         [ 7] 1288 	ld	c, #0x0a
   06B3 18 02         [12] 1289 	jr	00132$
   06B5                    1290 00131$:
                           1291 ;src/lib/video.c:364: GRID_LOC_Y + (GRID_U_H * GRID_P_H);
   06B5 0E BC         [ 7] 1292 	ld	c, #0xbc
   06B7                    1293 00132$:
   06B7 DD 71 F6      [19] 1294 	ld	-10 (ix), c
   06BA DD 36 F7 00   [19] 1295 	ld	-9 (ix), #0x00
                           1296 ;src/lib/video.c:365: if (px < 0)
   06BE DD CB F9 7E   [20] 1297 	bit	7, -7 (ix)
   06C2 28 08         [12] 1298 	jr	Z,00102$
                           1299 ;src/lib/video.c:366: px = 0;
   06C4 DD 36 F8 00   [19] 1300 	ld	-8 (ix), #0x00
   06C8 DD 36 F9 00   [19] 1301 	ld	-7 (ix), #0x00
   06CC                    1302 00102$:
                           1303 ;src/lib/video.c:367: if (py < 0)
   06CC DD CB F7 7E   [20] 1304 	bit	7, -9 (ix)
   06D0 28 4D         [12] 1305 	jr	Z,00111$
                           1306 ;src/lib/video.c:368: py = 0;
   06D2 DD 36 F6 00   [19] 1307 	ld	-10 (ix), #0x00
   06D6 DD 36 F7 00   [19] 1308 	ld	-9 (ix), #0x00
   06DA 18 43         [12] 1309 	jr	00111$
   06DC                    1310 00110$:
                           1311 ;src/lib/video.c:370: px = i == DIR_WEST ? GRID_LOC_X - 2 :
   06DC DD 7E F4      [19] 1312 	ld	a, -12 (ix)
   06DF D6 03         [ 7] 1313 	sub	a,#0x03
   06E1 28 02         [12] 1314 	jr	Z,00134$
                           1315 ;src/lib/video.c:371: GRID_LOC_X + (GRID_U_W * GRID_P_W);
   06E3 3E 4D         [ 7] 1316 	ld	a, #0x4d
   06E5                    1317 00134$:
   06E5 DD 77 F8      [19] 1318 	ld	-8 (ix), a
   06E8 17            [ 4] 1319 	rla
   06E9 9F            [ 4] 1320 	sbc	a, a
   06EA DD 77 F9      [19] 1321 	ld	-7 (ix), a
                           1322 ;src/lib/video.c:372: py = GRID_LOC_Y + ((loc - 1) * GRID_P_H);
   06ED DD 4E FC      [19] 1323 	ld	c,-4 (ix)
   06F0 DD 46 FD      [19] 1324 	ld	b,-3 (ix)
   06F3 69            [ 4] 1325 	ld	l, c
   06F4 60            [ 4] 1326 	ld	h, b
   06F5 29            [11] 1327 	add	hl, hl
   06F6 29            [11] 1328 	add	hl, hl
   06F7 09            [11] 1329 	add	hl, bc
   06F8 29            [11] 1330 	add	hl, hl
   06F9 01 12 00      [10] 1331 	ld	bc,#0x0012
   06FC 09            [11] 1332 	add	hl,bc
   06FD DD 75 F6      [19] 1333 	ld	-10 (ix), l
   0700 DD 74 F7      [19] 1334 	ld	-9 (ix), h
                           1335 ;src/lib/video.c:373: if (px < 0)
   0703 DD CB F9 7E   [20] 1336 	bit	7, -7 (ix)
   0707 28 08         [12] 1337 	jr	Z,00106$
                           1338 ;src/lib/video.c:374: px = 0;
   0709 DD 36 F8 00   [19] 1339 	ld	-8 (ix), #0x00
   070D DD 36 F9 00   [19] 1340 	ld	-7 (ix), #0x00
   0711                    1341 00106$:
                           1342 ;src/lib/video.c:375: if (py < 0)
   0711 DD CB F7 7E   [20] 1343 	bit	7, -9 (ix)
   0715 28 08         [12] 1344 	jr	Z,00111$
                           1345 ;src/lib/video.c:376: py = 0;
   0717 DD 36 F6 00   [19] 1346 	ld	-10 (ix), #0x00
   071B DD 36 F7 00   [19] 1347 	ld	-9 (ix), #0x00
   071F                    1348 00111$:
                           1349 ;src/lib/video.c:383: v_pos = v_get_pos(px - 1, py);
   071F DD 4E F6      [19] 1350 	ld	c, -10 (ix)
                           1351 ;src/lib/video.c:385: v_pos = v_get_pos(px, py);
   0722 DD 46 F8      [19] 1352 	ld	b, -8 (ix)
                           1353 ;src/lib/video.c:386: cpct_drawSprite(enemies_h_ts[spr_st], v_pos, 3, 8);
   0725 DD 6E F5      [19] 1354 	ld	l, -11 (ix)
   0728 26 00         [ 7] 1355 	ld	h, #0x00
   072A 29            [11] 1356 	add	hl, hl
   072B 5D            [ 4] 1357 	ld	e, l
   072C 54            [ 4] 1358 	ld	d, h
                           1359 ;src/lib/video.c:380: if (i % 2 == 0) {
   072D DD 7E FE      [19] 1360 	ld	a, -2 (ix)
   0730 B7            [ 4] 1361 	or	a, a
   0731 C2r0Ar08      [10] 1362 	jp	NZ, 00113$
                           1363 ;src/lib/video.c:383: v_pos = v_get_pos(px - 1, py);
   0734 61            [ 4] 1364 	ld	h, c
   0735 DD 7E F8      [19] 1365 	ld	a, -8 (ix)
   0738 DD 77 FA      [19] 1366 	ld	-6 (ix), a
   073B C6 FF         [ 7] 1367 	add	a, #0xff
                           1368 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   073D C5            [11] 1369 	push	bc
   073E D5            [11] 1370 	push	de
   073F E5            [11] 1371 	push	hl
   0740 33            [ 6] 1372 	inc	sp
   0741 F5            [11] 1373 	push	af
   0742 33            [ 6] 1374 	inc	sp
   0743 21 00 C0      [10] 1375 	ld	hl, #0xc000
   0746 E5            [11] 1376 	push	hl
   0747 CDr00r00      [17] 1377 	call	_cpct_getScreenPtr
   074A D1            [10] 1378 	pop	de
   074B C1            [10] 1379 	pop	bc
                           1380 ;src/lib/video.c:384: cpct_drawSolidBox(v_pos, 0, 1, 8);
   074C E5            [11] 1381 	push	hl
   074D FD E1         [14] 1382 	pop	iy
   074F C5            [11] 1383 	push	bc
   0750 D5            [11] 1384 	push	de
   0751 21 01 08      [10] 1385 	ld	hl, #0x0801
   0754 E5            [11] 1386 	push	hl
   0755 21 00 00      [10] 1387 	ld	hl, #0x0000
   0758 E5            [11] 1388 	push	hl
   0759 FD E5         [15] 1389 	push	iy
   075B CDr00r00      [17] 1390 	call	_cpct_drawSolidBox
   075E D1            [10] 1391 	pop	de
   075F C1            [10] 1392 	pop	bc
                           1393 ;src/lib/video.c:385: v_pos = v_get_pos(px, py);
                           1394 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0760 C5            [11] 1395 	push	bc
   0761 D5            [11] 1396 	push	de
   0762 79            [ 4] 1397 	ld	a, c
   0763 F5            [11] 1398 	push	af
   0764 33            [ 6] 1399 	inc	sp
   0765 C5            [11] 1400 	push	bc
   0766 33            [ 6] 1401 	inc	sp
   0767 21 00 C0      [10] 1402 	ld	hl, #0xc000
   076A E5            [11] 1403 	push	hl
   076B CDr00r00      [17] 1404 	call	_cpct_getScreenPtr
   076E D1            [10] 1405 	pop	de
   076F C1            [10] 1406 	pop	bc
                           1407 ;src/lib/video.c:386: cpct_drawSprite(enemies_h_ts[spr_st], v_pos, 3, 8);
   0770 E5            [11] 1408 	push	hl
   0771 FD E1         [14] 1409 	pop	iy
   0773 21r00r00      [10] 1410 	ld	hl, #_enemies_h_ts
   0776 19            [11] 1411 	add	hl, de
   0777 5E            [ 7] 1412 	ld	e, (hl)
   0778 23            [ 6] 1413 	inc	hl
   0779 56            [ 7] 1414 	ld	d, (hl)
   077A C5            [11] 1415 	push	bc
   077B 21 03 08      [10] 1416 	ld	hl, #0x0803
   077E E5            [11] 1417 	push	hl
   077F FD E5         [15] 1418 	push	iy
   0781 D5            [11] 1419 	push	de
   0782 CDr00r00      [17] 1420 	call	_cpct_drawSprite
   0785 C1            [10] 1421 	pop	bc
                           1422 ;src/lib/video.c:387: v_pos = v_get_pos(px + 3, py);
   0786 DD 46 FA      [19] 1423 	ld	b, -6 (ix)
   0789 04            [ 4] 1424 	inc	b
   078A 04            [ 4] 1425 	inc	b
   078B 04            [ 4] 1426 	inc	b
                           1427 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   078C C5            [11] 1428 	push	bc
   078D 79            [ 4] 1429 	ld	a, c
   078E F5            [11] 1430 	push	af
   078F 33            [ 6] 1431 	inc	sp
   0790 C5            [11] 1432 	push	bc
   0791 33            [ 6] 1433 	inc	sp
   0792 21 00 C0      [10] 1434 	ld	hl, #0xc000
   0795 E5            [11] 1435 	push	hl
   0796 CDr00r00      [17] 1436 	call	_cpct_getScreenPtr
   0799 C1            [10] 1437 	pop	bc
                           1438 ;src/lib/video.c:388: cpct_drawSprite(enemies_h_ts[spr_st + 1], v_pos, 3, 8);
   079A E5            [11] 1439 	push	hl
   079B FD E1         [14] 1440 	pop	iy
   079D DD 6E F5      [19] 1441 	ld	l, -11 (ix)
   07A0 2C            [ 4] 1442 	inc	l
   07A1 26 00         [ 7] 1443 	ld	h, #0x00
   07A3 29            [11] 1444 	add	hl, hl
   07A4 11r00r00      [10] 1445 	ld	de, #_enemies_h_ts
   07A7 19            [11] 1446 	add	hl, de
   07A8 5E            [ 7] 1447 	ld	e, (hl)
   07A9 23            [ 6] 1448 	inc	hl
   07AA 56            [ 7] 1449 	ld	d, (hl)
   07AB C5            [11] 1450 	push	bc
   07AC 21 03 08      [10] 1451 	ld	hl, #0x0803
   07AF E5            [11] 1452 	push	hl
   07B0 FD E5         [15] 1453 	push	iy
   07B2 D5            [11] 1454 	push	de
   07B3 CDr00r00      [17] 1455 	call	_cpct_drawSprite
   07B6 C1            [10] 1456 	pop	bc
                           1457 ;src/lib/video.c:389: v_pos = v_get_pos(px + 6, py);
   07B7 DD 7E FA      [19] 1458 	ld	a, -6 (ix)
   07BA C6 06         [ 7] 1459 	add	a, #0x06
   07BC 47            [ 4] 1460 	ld	b, a
                           1461 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   07BD C5            [11] 1462 	push	bc
   07BE 79            [ 4] 1463 	ld	a, c
   07BF F5            [11] 1464 	push	af
   07C0 33            [ 6] 1465 	inc	sp
   07C1 C5            [11] 1466 	push	bc
   07C2 33            [ 6] 1467 	inc	sp
   07C3 21 00 C0      [10] 1468 	ld	hl, #0xc000
   07C6 E5            [11] 1469 	push	hl
   07C7 CDr00r00      [17] 1470 	call	_cpct_getScreenPtr
   07CA C1            [10] 1471 	pop	bc
                           1472 ;src/lib/video.c:390: cpct_drawSprite(enemies_h_ts[spr_st + 2], v_pos, 3, 8);
   07CB E5            [11] 1473 	push	hl
   07CC FD E1         [14] 1474 	pop	iy
   07CE DD 6E F5      [19] 1475 	ld	l, -11 (ix)
   07D1 2C            [ 4] 1476 	inc	l
   07D2 2C            [ 4] 1477 	inc	l
   07D3 26 00         [ 7] 1478 	ld	h, #0x00
   07D5 29            [11] 1479 	add	hl, hl
   07D6 11r00r00      [10] 1480 	ld	de, #_enemies_h_ts
   07D9 19            [11] 1481 	add	hl, de
   07DA 5E            [ 7] 1482 	ld	e, (hl)
   07DB 23            [ 6] 1483 	inc	hl
   07DC 56            [ 7] 1484 	ld	d, (hl)
   07DD C5            [11] 1485 	push	bc
   07DE 21 03 08      [10] 1486 	ld	hl, #0x0803
   07E1 E5            [11] 1487 	push	hl
   07E2 FD E5         [15] 1488 	push	iy
   07E4 D5            [11] 1489 	push	de
   07E5 CDr00r00      [17] 1490 	call	_cpct_drawSprite
   07E8 C1            [10] 1491 	pop	bc
                           1492 ;src/lib/video.c:391: v_pos = v_get_pos(px + 9, py);
   07E9 DD 7E FA      [19] 1493 	ld	a, -6 (ix)
   07EC C6 09         [ 7] 1494 	add	a, #0x09
   07EE 47            [ 4] 1495 	ld	b, a
                           1496 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   07EF 79            [ 4] 1497 	ld	a, c
   07F0 F5            [11] 1498 	push	af
   07F1 33            [ 6] 1499 	inc	sp
   07F2 C5            [11] 1500 	push	bc
   07F3 33            [ 6] 1501 	inc	sp
   07F4 21 00 C0      [10] 1502 	ld	hl, #0xc000
   07F7 E5            [11] 1503 	push	hl
   07F8 CDr00r00      [17] 1504 	call	_cpct_getScreenPtr
                           1505 ;src/lib/video.c:391: v_pos = v_get_pos(px + 9, py);
                           1506 ;src/lib/video.c:392: cpct_drawSolidBox(v_pos, 0, 1, 8);
   07FB 01 01 08      [10] 1507 	ld	bc, #0x0801
   07FE C5            [11] 1508 	push	bc
   07FF 01 00 00      [10] 1509 	ld	bc, #0x0000
   0802 C5            [11] 1510 	push	bc
   0803 E5            [11] 1511 	push	hl
   0804 CDr00r00      [17] 1512 	call	_cpct_drawSolidBox
   0807 C3r89r08      [10] 1513 	jp	00126$
   080A                    1514 00113$:
                           1515 ;src/lib/video.c:396: v_pos = v_get_pos(px, py);
   080A 60            [ 4] 1516 	ld	h, b
                           1517 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   080B C5            [11] 1518 	push	bc
   080C D5            [11] 1519 	push	de
   080D 79            [ 4] 1520 	ld	a, c
   080E F5            [11] 1521 	push	af
   080F 33            [ 6] 1522 	inc	sp
   0810 E5            [11] 1523 	push	hl
   0811 33            [ 6] 1524 	inc	sp
   0812 21 00 C0      [10] 1525 	ld	hl, #0xc000
   0815 E5            [11] 1526 	push	hl
   0816 CDr00r00      [17] 1527 	call	_cpct_getScreenPtr
   0819 D1            [10] 1528 	pop	de
   081A C1            [10] 1529 	pop	bc
                           1530 ;src/lib/video.c:397: cpct_drawSprite(enemies_v_ts[spr_st], v_pos, 2, 12);
   081B E5            [11] 1531 	push	hl
   081C FD E1         [14] 1532 	pop	iy
   081E 21r00r00      [10] 1533 	ld	hl, #_enemies_v_ts
   0821 19            [11] 1534 	add	hl, de
   0822 5E            [ 7] 1535 	ld	e, (hl)
   0823 23            [ 6] 1536 	inc	hl
   0824 56            [ 7] 1537 	ld	d, (hl)
   0825 C5            [11] 1538 	push	bc
   0826 21 02 0C      [10] 1539 	ld	hl, #0x0c02
   0829 E5            [11] 1540 	push	hl
   082A FD E5         [15] 1541 	push	iy
   082C D5            [11] 1542 	push	de
   082D CDr00r00      [17] 1543 	call	_cpct_drawSprite
   0830 C1            [10] 1544 	pop	bc
                           1545 ;src/lib/video.c:398: v_pos = v_get_pos(px, py + 12);
   0831 DD 4E F6      [19] 1546 	ld	c, -10 (ix)
   0834 79            [ 4] 1547 	ld	a, c
   0835 C6 0C         [ 7] 1548 	add	a, #0x0c
   0837 57            [ 4] 1549 	ld	d, a
                           1550 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0838 C5            [11] 1551 	push	bc
   0839 58            [ 4] 1552 	ld	e, b
   083A D5            [11] 1553 	push	de
   083B 21 00 C0      [10] 1554 	ld	hl, #0xc000
   083E E5            [11] 1555 	push	hl
   083F CDr00r00      [17] 1556 	call	_cpct_getScreenPtr
   0842 C1            [10] 1557 	pop	bc
                           1558 ;src/lib/video.c:399: cpct_drawSprite(enemies_v_ts[spr_st + 4], v_pos, 2, 12);
   0843 E5            [11] 1559 	push	hl
   0844 FD E1         [14] 1560 	pop	iy
   0846 DD 7E F5      [19] 1561 	ld	a, -11 (ix)
   0849 C6 04         [ 7] 1562 	add	a, #0x04
   084B 6F            [ 4] 1563 	ld	l, a
   084C 26 00         [ 7] 1564 	ld	h, #0x00
   084E 29            [11] 1565 	add	hl, hl
   084F 11r00r00      [10] 1566 	ld	de, #_enemies_v_ts
   0852 19            [11] 1567 	add	hl, de
   0853 5E            [ 7] 1568 	ld	e, (hl)
   0854 23            [ 6] 1569 	inc	hl
   0855 56            [ 7] 1570 	ld	d, (hl)
   0856 C5            [11] 1571 	push	bc
   0857 21 02 0C      [10] 1572 	ld	hl, #0x0c02
   085A E5            [11] 1573 	push	hl
   085B FD E5         [15] 1574 	push	iy
   085D D5            [11] 1575 	push	de
   085E CDr00r00      [17] 1576 	call	_cpct_drawSprite
   0861 C1            [10] 1577 	pop	bc
                           1578 ;src/lib/video.c:400: v_pos = v_get_pos(px, py + 24);
   0862 79            [ 4] 1579 	ld	a, c
   0863 C6 18         [ 7] 1580 	add	a, #0x18
   0865 57            [ 4] 1581 	ld	d, a
                           1582 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0866 58            [ 4] 1583 	ld	e, b
   0867 D5            [11] 1584 	push	de
   0868 21 00 C0      [10] 1585 	ld	hl, #0xc000
   086B E5            [11] 1586 	push	hl
   086C CDr00r00      [17] 1587 	call	_cpct_getScreenPtr
   086F EB            [ 4] 1588 	ex	de,hl
                           1589 ;src/lib/video.c:401: cpct_drawSprite(enemies_v_ts[spr_st + 8], v_pos, 2, 12);
   0870 DD 7E F5      [19] 1590 	ld	a, -11 (ix)
   0873 C6 08         [ 7] 1591 	add	a, #0x08
   0875 6F            [ 4] 1592 	ld	l, a
   0876 26 00         [ 7] 1593 	ld	h, #0x00
   0878 29            [11] 1594 	add	hl, hl
   0879 01r00r00      [10] 1595 	ld	bc, #_enemies_v_ts
   087C 09            [11] 1596 	add	hl, bc
   087D 4E            [ 7] 1597 	ld	c, (hl)
   087E 23            [ 6] 1598 	inc	hl
   087F 46            [ 7] 1599 	ld	b, (hl)
   0880 21 02 0C      [10] 1600 	ld	hl, #0x0c02
   0883 E5            [11] 1601 	push	hl
   0884 D5            [11] 1602 	push	de
   0885 C5            [11] 1603 	push	bc
   0886 CDr00r00      [17] 1604 	call	_cpct_drawSprite
   0889                    1605 00126$:
                           1606 ;src/lib/video.c:352: for (dir_t i = DIR_NORTH; i <= DIR_WEST; i++) {
   0889 DD 34 F4      [23] 1607 	inc	-12 (ix)
   088C C3r19r06      [10] 1608 	jp	00125$
   088F                    1609 00127$:
   088F DD F9         [10] 1610 	ld	sp, ix
   0891 DD E1         [14] 1611 	pop	ix
   0893 C9            [10] 1612 	ret
   0894                    1613 _v_draw_enemies_spr_idx_1_347:
   0894 00                 1614 	.db #0x00	; 0
   0895 02                 1615 	.db #0x02	; 2
   0896 06                 1616 	.db #0x06	; 6
   0897 00                 1617 	.db #0x00	; 0
   0898                    1618 _v_draw_enemies_spr_idx_f_1_347:
   0898 03                 1619 	.db #0x03	; 3
   0899 03                 1620 	.db #0x03	; 3
   089A 09                 1621 	.db #0x09	; 9
   089B 01                 1622 	.db #0x01	; 1
                           1623 ;src/lib/video.c:407: void v_draw_bolts(const bool all) {
                           1624 ;	---------------------------------
                           1625 ; Function v_draw_bolts
                           1626 ; ---------------------------------
   089C                    1627 _v_draw_bolts::
   089C DD E5         [15] 1628 	push	ix
   089E DD 21 00 00   [14] 1629 	ld	ix,#0
   08A2 DD 39         [15] 1630 	add	ix,sp
   08A4 F5            [11] 1631 	push	af
   08A5 3B            [ 6] 1632 	dec	sp
                           1633 ;src/lib/video.c:409: if (g_bolt_count == 0)
   08A6 3Ar00r00      [13] 1634 	ld	a,(#_g_bolt_count + 0)
   08A9 B7            [ 4] 1635 	or	a, a
                           1636 ;src/lib/video.c:410: return;
                           1637 ;src/lib/video.c:412: for (dir_t i = DIR_NORTH; i <= DIR_WEST; i++) {
   08AA CAr3Br09      [10] 1638 	jp	Z,00114$
   08AD DD 36 FD 00   [19] 1639 	ld	-3 (ix), #0x00
   08B1                    1640 00112$:
   08B1 3E 03         [ 7] 1641 	ld	a, #0x03
   08B3 DD 96 FD      [19] 1642 	sub	a, -3 (ix)
   08B6 E2rBBr08      [10] 1643 	jp	PO, 00141$
   08B9 EE 80         [ 7] 1644 	xor	a, #0x80
   08BB                    1645 00141$:
   08BB FAr3Br09      [10] 1646 	jp	M, 00114$
                           1647 ;src/lib/video.c:413: if (all || g_bolts[i].active) {
   08BE DD 4E FD      [19] 1648 	ld	c, -3 (ix)
   08C1 79            [ 4] 1649 	ld	a, c
   08C2 CB 07         [ 8] 1650 	rlc	a
   08C4 9F            [ 4] 1651 	sbc	a, a
   08C5 47            [ 4] 1652 	ld	b, a
   08C6 69            [ 4] 1653 	ld	l, c
   08C7 60            [ 4] 1654 	ld	h, b
   08C8 29            [11] 1655 	add	hl, hl
   08C9 09            [11] 1656 	add	hl, bc
   08CA 29            [11] 1657 	add	hl, hl
   08CB 09            [11] 1658 	add	hl, bc
   08CC 29            [11] 1659 	add	hl, hl
   08CD 4D            [ 4] 1660 	ld	c, l
   08CE 44            [ 4] 1661 	ld	b, h
   08CF DD CB 04 46   [20] 1662 	bit	0, 4 (ix)
   08D3 20 0C         [12] 1663 	jr	NZ,00107$
   08D5 21r00r00      [10] 1664 	ld	hl, #_g_bolts
   08D8 09            [11] 1665 	add	hl, bc
   08D9 11 05 00      [10] 1666 	ld	de, #0x0005
   08DC 19            [11] 1667 	add	hl, de
   08DD CB 46         [12] 1668 	bit	0, (hl)
   08DF 28 54         [12] 1669 	jr	Z,00113$
   08E1                    1670 00107$:
                           1671 ;src/lib/video.c:414: if (g_bolts[i].dc) {
   08E1 21r00r00      [10] 1672 	ld	hl, #_g_bolts
   08E4 09            [11] 1673 	add	hl,bc
   08E5 4D            [ 4] 1674 	ld	c, l
   08E6 44            [ 4] 1675 	ld	b, h
   08E7 21 0B 00      [10] 1676 	ld	hl, #0x000b
   08EA 09            [11] 1677 	add	hl,bc
   08EB EB            [ 4] 1678 	ex	de,hl
   08EC 1A            [ 7] 1679 	ld	a, (de)
   08ED CB 47         [ 8] 1680 	bit	0, a
   08EF 28 23         [12] 1681 	jr	Z,00104$
                           1682 ;src/lib/video.c:416: g_bolts[i].dc_y);
   08F1 C5            [11] 1683 	push	bc
   08F2 FD E1         [14] 1684 	pop	iy
   08F4 FD 7E 0D      [19] 1685 	ld	a, 13 (iy)
   08F7 DD 77 FE      [19] 1686 	ld	-2 (ix), a
                           1687 ;src/lib/video.c:415: v_draw_grid_cell(g_bolts[i].dc_x,
   08FA C5            [11] 1688 	push	bc
   08FB FD E1         [14] 1689 	pop	iy
   08FD FD 7E 0C      [19] 1690 	ld	a, 12 (iy)
   0900 DD 77 FF      [19] 1691 	ld	-1 (ix), a
   0903 C5            [11] 1692 	push	bc
   0904 D5            [11] 1693 	push	de
   0905 DD 66 FE      [19] 1694 	ld	h, -2 (ix)
   0908 DD 6E FF      [19] 1695 	ld	l, -1 (ix)
   090B E5            [11] 1696 	push	hl
   090C CDr85r0E      [17] 1697 	call	_v_draw_grid_cell
   090F F1            [10] 1698 	pop	af
   0910 D1            [10] 1699 	pop	de
   0911 C1            [10] 1700 	pop	bc
                           1701 ;src/lib/video.c:417: g_bolts[i].dc = false;
   0912 AF            [ 4] 1702 	xor	a, a
   0913 12            [ 7] 1703 	ld	(de), a
   0914                    1704 00104$:
                           1705 ;src/lib/video.c:419: if (g_bolts[i].dp) {
   0914 21 08 00      [10] 1706 	ld	hl, #0x0008
   0917 09            [11] 1707 	add	hl,bc
   0918 EB            [ 4] 1708 	ex	de,hl
   0919 1A            [ 7] 1709 	ld	a, (de)
   091A CB 47         [ 8] 1710 	bit	0, a
   091C 28 17         [12] 1711 	jr	Z,00113$
                           1712 ;src/lib/video.c:421: g_bolts[i].dp_y);
   091E C5            [11] 1713 	push	bc
   091F FD E1         [14] 1714 	pop	iy
   0921 FD 7E 0A      [19] 1715 	ld	a, 10 (iy)
                           1716 ;src/lib/video.c:420: v_draw_grid_cell(g_bolts[i].dp_x,
   0924 69            [ 4] 1717 	ld	l, c
   0925 60            [ 4] 1718 	ld	h, b
   0926 01 09 00      [10] 1719 	ld	bc, #0x0009
   0929 09            [11] 1720 	add	hl, bc
   092A 4E            [ 7] 1721 	ld	c, (hl)
   092B D5            [11] 1722 	push	de
   092C 47            [ 4] 1723 	ld	b, a
   092D C5            [11] 1724 	push	bc
   092E CDr85r0E      [17] 1725 	call	_v_draw_grid_cell
   0931 F1            [10] 1726 	pop	af
   0932 D1            [10] 1727 	pop	de
                           1728 ;src/lib/video.c:422: g_bolts[i].dp = false;
   0933 AF            [ 4] 1729 	xor	a, a
   0934 12            [ 7] 1730 	ld	(de), a
   0935                    1731 00113$:
                           1732 ;src/lib/video.c:412: for (dir_t i = DIR_NORTH; i <= DIR_WEST; i++) {
   0935 DD 34 FD      [23] 1733 	inc	-3 (ix)
   0938 C3rB1r08      [10] 1734 	jp	00112$
   093B                    1735 00114$:
   093B DD F9         [10] 1736 	ld	sp, ix
   093D DD E1         [14] 1737 	pop	ix
   093F C9            [10] 1738 	ret
                           1739 ;src/lib/video.c:429: void v_draw_box(const dim_t *sz) {
                           1740 ;	---------------------------------
                           1741 ; Function v_draw_box
                           1742 ; ---------------------------------
   0940                    1743 _v_draw_box::
   0940 DD E5         [15] 1744 	push	ix
   0942 DD 21 00 00   [14] 1745 	ld	ix,#0
   0946 DD 39         [15] 1746 	add	ix,sp
   0948 21 F4 FF      [10] 1747 	ld	hl, #-12
   094B 39            [11] 1748 	add	hl, sp
   094C F9            [ 6] 1749 	ld	sp, hl
                           1750 ;src/lib/video.c:434: pw = sz->w * GRID_P_W;
   094D DD 7E 04      [19] 1751 	ld	a, 4 (ix)
   0950 DD 77 FC      [19] 1752 	ld	-4 (ix), a
   0953 DD 7E 05      [19] 1753 	ld	a, 5 (ix)
   0956 DD 77 FD      [19] 1754 	ld	-3 (ix), a
   0959 DD 6E FC      [19] 1755 	ld	l,-4 (ix)
   095C DD 66 FD      [19] 1756 	ld	h,-3 (ix)
   095F 4E            [ 7] 1757 	ld	c, (hl)
   0960 79            [ 4] 1758 	ld	a, c
   0961 87            [ 4] 1759 	add	a, a
   0962 81            [ 4] 1760 	add	a, c
   0963 5F            [ 4] 1761 	ld	e, a
                           1762 ;src/lib/video.c:435: ph = sz->h * GRID_P_H;
   0964 DD 7E FC      [19] 1763 	ld	a, -4 (ix)
   0967 C6 01         [ 7] 1764 	add	a, #0x01
   0969 DD 77 F9      [19] 1765 	ld	-7 (ix), a
   096C DD 7E FD      [19] 1766 	ld	a, -3 (ix)
   096F CE 00         [ 7] 1767 	adc	a, #0x00
   0971 DD 77 FA      [19] 1768 	ld	-6 (ix), a
   0974 DD 6E F9      [19] 1769 	ld	l,-7 (ix)
   0977 DD 66 FA      [19] 1770 	ld	h,-6 (ix)
   097A 4E            [ 7] 1771 	ld	c, (hl)
   097B 79            [ 4] 1772 	ld	a, c
   097C 87            [ 4] 1773 	add	a, a
   097D 87            [ 4] 1774 	add	a, a
   097E 81            [ 4] 1775 	add	a, c
   097F 87            [ 4] 1776 	add	a, a
   0980 DD 77 F8      [19] 1777 	ld	-8 (ix), a
                           1778 ;src/lib/video.c:438: x = 80 - (pw + (2 * GRID_P_W));
   0983 7B            [ 4] 1779 	ld	a, e
   0984 C6 06         [ 7] 1780 	add	a, #0x06
   0986 4F            [ 4] 1781 	ld	c, a
   0987 3E 50         [ 7] 1782 	ld	a, #0x50
   0989 91            [ 4] 1783 	sub	a, c
   098A 47            [ 4] 1784 	ld	b, a
                           1785 ;src/lib/video.c:439: y = 200 - (ph + (2 * GRID_P_H));
   098B DD 7E F8      [19] 1786 	ld	a, -8 (ix)
   098E C6 14         [ 7] 1787 	add	a, #0x14
   0990 4F            [ 4] 1788 	ld	c, a
   0991 3E C8         [ 7] 1789 	ld	a, #0xc8
   0993 91            [ 4] 1790 	sub	a, c
   0994 4F            [ 4] 1791 	ld	c, a
                           1792 ;src/lib/video.c:440: x = x / 2;
   0995 78            [ 4] 1793 	ld	a, b
   0996 CB 3F         [ 8] 1794 	srl	a
   0998 DD 77 F7      [19] 1795 	ld	-9 (ix), a
                           1796 ;src/lib/video.c:441: y = y / 2;
   099B 79            [ 4] 1797 	ld	a, c
   099C CB 3F         [ 8] 1798 	srl	a
                           1799 ;src/lib/video.c:442: v_pos = v_get_pos(x + 1, y + 2);
   099E DD 77 F6      [19] 1800 	ld	-10 (ix), a
   09A1 57            [ 4] 1801 	ld	d, a
   09A2 14            [ 4] 1802 	inc	d
   09A3 14            [ 4] 1803 	inc	d
   09A4 DD 46 F7      [19] 1804 	ld	b, -9 (ix)
   09A7 04            [ 4] 1805 	inc	b
                           1806 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   09A8 D5            [11] 1807 	push	de
   09A9 58            [ 4] 1808 	ld	e, b
   09AA D5            [11] 1809 	push	de
   09AB 21 00 C0      [10] 1810 	ld	hl, #0xc000
   09AE E5            [11] 1811 	push	hl
   09AF CDr00r00      [17] 1812 	call	_cpct_getScreenPtr
   09B2 4D            [ 4] 1813 	ld	c, l
   09B3 44            [ 4] 1814 	ld	b, h
   09B4 D1            [10] 1815 	pop	de
                           1816 ;src/lib/video.c:445: cpct_drawSolidBox(v_pos, 0, pw + 4, ph + 4);
   09B5 DD 56 F8      [19] 1817 	ld	d, -8 (ix)
   09B8 14            [ 4] 1818 	inc	d
   09B9 14            [ 4] 1819 	inc	d
   09BA 14            [ 4] 1820 	inc	d
   09BB 14            [ 4] 1821 	inc	d
   09BC 7B            [ 4] 1822 	ld	a, e
   09BD C6 04         [ 7] 1823 	add	a, #0x04
   09BF 5F            [ 4] 1824 	ld	e, a
   09C0 D5            [11] 1825 	push	de
   09C1 21 00 00      [10] 1826 	ld	hl, #0x0000
   09C4 E5            [11] 1827 	push	hl
   09C5 C5            [11] 1828 	push	bc
   09C6 CDr00r00      [17] 1829 	call	_cpct_drawSolidBox
                           1830 ;src/lib/video.c:449: gy = y;
   09C9 DD 46 F6      [19] 1831 	ld	b, -10 (ix)
                           1832 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   09CC C5            [11] 1833 	push	bc
   09CD DD 66 F6      [19] 1834 	ld	h, -10 (ix)
   09D0 DD 6E F7      [19] 1835 	ld	l, -9 (ix)
   09D3 E5            [11] 1836 	push	hl
   09D4 21 00 C0      [10] 1837 	ld	hl, #0xc000
   09D7 E5            [11] 1838 	push	hl
   09D8 CDr00r00      [17] 1839 	call	_cpct_getScreenPtr
   09DB EB            [ 4] 1840 	ex	de,hl
   09DC C1            [10] 1841 	pop	bc
                           1842 ;src/lib/video.c:452: gui_ts[GUI_NORTH_WEST], v_pos, GRID_P_W, GRID_P_H);
   09DD 2Ar02r00      [16] 1843 	ld	hl, (#_gui_ts + 2)
   09E0 E5            [11] 1844 	push	hl
   09E1 FD E1         [14] 1845 	pop	iy
   09E3 C5            [11] 1846 	push	bc
   09E4 21 03 0A      [10] 1847 	ld	hl, #0x0a03
   09E7 E5            [11] 1848 	push	hl
   09E8 D5            [11] 1849 	push	de
   09E9 FD E5         [15] 1850 	push	iy
   09EB CDr00r00      [17] 1851 	call	_cpct_drawSpriteMasked
   09EE C1            [10] 1852 	pop	bc
                           1853 ;src/lib/video.c:453: gx += GRID_P_W;
   09EF DD 7E F7      [19] 1854 	ld	a, -9 (ix)
   09F2 C6 03         [ 7] 1855 	add	a, #0x03
   09F4 DD 77 FB      [19] 1856 	ld	-5 (ix), a
   09F7 4F            [ 4] 1857 	ld	c, a
                           1858 ;src/lib/video.c:454: for (u8 i = 0; i < sz->w; i++) {
   09F8 DD 36 F4 00   [19] 1859 	ld	-12 (ix), #0x00
   09FC                    1860 00115$:
   09FC DD 6E FC      [19] 1861 	ld	l,-4 (ix)
   09FF DD 66 FD      [19] 1862 	ld	h,-3 (ix)
   0A02 DD 7E F4      [19] 1863 	ld	a,-12 (ix)
   0A05 96            [ 7] 1864 	sub	a,(hl)
   0A06 30 24         [12] 1865 	jr	NC,00101$
                           1866 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0A08 C5            [11] 1867 	push	bc
   0A09 C5            [11] 1868 	push	bc
   0A0A 21 00 C0      [10] 1869 	ld	hl, #0xc000
   0A0D E5            [11] 1870 	push	hl
   0A0E CDr00r00      [17] 1871 	call	_cpct_getScreenPtr
   0A11 C1            [10] 1872 	pop	bc
                           1873 ;src/lib/video.c:457: gui_ts[GUI_NORTH], v_pos, GRID_P_W, GRID_P_H);
   0A12 E5            [11] 1874 	push	hl
   0A13 FD E1         [14] 1875 	pop	iy
   0A15 2Ar04r00      [16] 1876 	ld	hl, (#_gui_ts + 4)
   0A18 C5            [11] 1877 	push	bc
   0A19 11 03 0A      [10] 1878 	ld	de, #0x0a03
   0A1C D5            [11] 1879 	push	de
   0A1D FD E5         [15] 1880 	push	iy
   0A1F E5            [11] 1881 	push	hl
   0A20 CDr00r00      [17] 1882 	call	_cpct_drawSpriteMasked
   0A23 C1            [10] 1883 	pop	bc
                           1884 ;src/lib/video.c:458: gx += GRID_P_W;
   0A24 0C            [ 4] 1885 	inc	c
   0A25 0C            [ 4] 1886 	inc	c
   0A26 0C            [ 4] 1887 	inc	c
                           1888 ;src/lib/video.c:454: for (u8 i = 0; i < sz->w; i++) {
   0A27 DD 34 F4      [23] 1889 	inc	-12 (ix)
   0A2A 18 D0         [12] 1890 	jr	00115$
   0A2C                    1891 00101$:
                           1892 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0A2C C5            [11] 1893 	push	bc
   0A2D C5            [11] 1894 	push	bc
   0A2E 21 00 C0      [10] 1895 	ld	hl, #0xc000
   0A31 E5            [11] 1896 	push	hl
   0A32 CDr00r00      [17] 1897 	call	_cpct_getScreenPtr
   0A35 C1            [10] 1898 	pop	bc
                           1899 ;src/lib/video.c:462: gui_ts[GUI_NORTH_EAST], v_pos, GRID_P_W, GRID_P_H);
   0A36 E5            [11] 1900 	push	hl
   0A37 FD E1         [14] 1901 	pop	iy
   0A39 2Ar06r00      [16] 1902 	ld	hl, (#_gui_ts + 6)
   0A3C C5            [11] 1903 	push	bc
   0A3D 11 03 0A      [10] 1904 	ld	de, #0x0a03
   0A40 D5            [11] 1905 	push	de
   0A41 FD E5         [15] 1906 	push	iy
   0A43 E5            [11] 1907 	push	hl
   0A44 CDr00r00      [17] 1908 	call	_cpct_drawSpriteMasked
   0A47 C1            [10] 1909 	pop	bc
                           1910 ;src/lib/video.c:463: r = gx;
                           1911 ;src/lib/video.c:467: gy = y + ph;
   0A48 DD 7E F6      [19] 1912 	ld	a, -10 (ix)
   0A4B DD 86 F8      [19] 1913 	add	a, -8 (ix)
   0A4E 5F            [ 4] 1914 	ld	e, a
                           1915 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0A4F C5            [11] 1916 	push	bc
   0A50 D5            [11] 1917 	push	de
   0A51 53            [ 4] 1918 	ld	d, e
   0A52 DD 5E F7      [19] 1919 	ld	e, -9 (ix)
   0A55 D5            [11] 1920 	push	de
   0A56 21 00 C0      [10] 1921 	ld	hl, #0xc000
   0A59 E5            [11] 1922 	push	hl
   0A5A CDr00r00      [17] 1923 	call	_cpct_getScreenPtr
   0A5D D1            [10] 1924 	pop	de
   0A5E C1            [10] 1925 	pop	bc
                           1926 ;src/lib/video.c:468: v_pos = v_get_pos(gx, gy);
   0A5F 45            [ 4] 1927 	ld	b, l
   0A60 54            [ 4] 1928 	ld	d, h
                           1929 ;src/lib/video.c:470: gui_ts[GUI_SOUTH_WEST], v_pos, GRID_P_W, GRID_P_H);
   0A61 2Ar0Cr00      [16] 1930 	ld	hl, (#_gui_ts + 12)
   0A64 E5            [11] 1931 	push	hl
   0A65 FD E1         [14] 1932 	pop	iy
   0A67 C5            [11] 1933 	push	bc
   0A68 D5            [11] 1934 	push	de
   0A69 21 03 0A      [10] 1935 	ld	hl, #0x0a03
   0A6C E5            [11] 1936 	push	hl
   0A6D 58            [ 4] 1937 	ld	e,b
   0A6E D5            [11] 1938 	push	de
   0A6F FD E5         [15] 1939 	push	iy
   0A71 CDr00r00      [17] 1940 	call	_cpct_drawSpriteMasked
   0A74 D1            [10] 1941 	pop	de
   0A75 C1            [10] 1942 	pop	bc
                           1943 ;src/lib/video.c:471: gx += GRID_P_W;
   0A76 DD 56 FB      [19] 1944 	ld	d, -5 (ix)
                           1945 ;src/lib/video.c:472: for (u8 i = 0; i < sz->w; i++) {
   0A79 DD 36 F4 00   [19] 1946 	ld	-12 (ix), #0x00
   0A7D                    1947 00118$:
   0A7D DD 6E FC      [19] 1948 	ld	l,-4 (ix)
   0A80 DD 66 FD      [19] 1949 	ld	h,-3 (ix)
   0A83 46            [ 7] 1950 	ld	b, (hl)
   0A84 DD 7E F4      [19] 1951 	ld	a, -12 (ix)
   0A87 90            [ 4] 1952 	sub	a, b
   0A88 30 38         [12] 1953 	jr	NC,00102$
                           1954 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0A8A C5            [11] 1955 	push	bc
   0A8B D5            [11] 1956 	push	de
   0A8C 7B            [ 4] 1957 	ld	a, e
   0A8D F5            [11] 1958 	push	af
   0A8E 33            [ 6] 1959 	inc	sp
   0A8F D5            [11] 1960 	push	de
   0A90 33            [ 6] 1961 	inc	sp
   0A91 21 00 C0      [10] 1962 	ld	hl, #0xc000
   0A94 E5            [11] 1963 	push	hl
   0A95 CDr00r00      [17] 1964 	call	_cpct_getScreenPtr
   0A98 D1            [10] 1965 	pop	de
   0A99 C1            [10] 1966 	pop	bc
                           1967 ;src/lib/video.c:475: gui_ts[GUI_SOUTH], v_pos, GRID_P_W, GRID_P_H);
   0A9A E5            [11] 1968 	push	hl
   0A9B FD E1         [14] 1969 	pop	iy
   0A9D 2Ar0Er00      [16] 1970 	ld	hl, (#_gui_ts + 14)
   0AA0 DD 75 FE      [19] 1971 	ld	-2 (ix), l
   0AA3 DD 74 FF      [19] 1972 	ld	-1 (ix), h
   0AA6 C5            [11] 1973 	push	bc
   0AA7 D5            [11] 1974 	push	de
   0AA8 21 03 0A      [10] 1975 	ld	hl, #0x0a03
   0AAB E5            [11] 1976 	push	hl
   0AAC FD E5         [15] 1977 	push	iy
   0AAE DD 6E FE      [19] 1978 	ld	l,-2 (ix)
   0AB1 DD 66 FF      [19] 1979 	ld	h,-1 (ix)
   0AB4 E5            [11] 1980 	push	hl
   0AB5 CDr00r00      [17] 1981 	call	_cpct_drawSpriteMasked
   0AB8 D1            [10] 1982 	pop	de
   0AB9 C1            [10] 1983 	pop	bc
                           1984 ;src/lib/video.c:476: gx += GRID_P_W;
   0ABA 14            [ 4] 1985 	inc	d
   0ABB 14            [ 4] 1986 	inc	d
   0ABC 14            [ 4] 1987 	inc	d
                           1988 ;src/lib/video.c:472: for (u8 i = 0; i < sz->w; i++) {
   0ABD DD 34 F4      [23] 1989 	inc	-12 (ix)
   0AC0 18 BB         [12] 1990 	jr	00118$
   0AC2                    1991 00102$:
                           1992 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0AC2 C5            [11] 1993 	push	bc
   0AC3 7B            [ 4] 1994 	ld	a, e
   0AC4 F5            [11] 1995 	push	af
   0AC5 33            [ 6] 1996 	inc	sp
   0AC6 D5            [11] 1997 	push	de
   0AC7 33            [ 6] 1998 	inc	sp
   0AC8 21 00 C0      [10] 1999 	ld	hl, #0xc000
   0ACB E5            [11] 2000 	push	hl
   0ACC CDr00r00      [17] 2001 	call	_cpct_getScreenPtr
   0ACF C1            [10] 2002 	pop	bc
                           2003 ;src/lib/video.c:480: gui_ts[GUI_SOUTH_EAST], v_pos, GRID_P_W, GRID_P_H);
   0AD0 E5            [11] 2004 	push	hl
   0AD1 FD E1         [14] 2005 	pop	iy
   0AD3 2Ar10r00      [16] 2006 	ld	hl, (#_gui_ts + 16)
   0AD6 C5            [11] 2007 	push	bc
   0AD7 11 03 0A      [10] 2008 	ld	de, #0x0a03
   0ADA D5            [11] 2009 	push	de
   0ADB FD E5         [15] 2010 	push	iy
   0ADD E5            [11] 2011 	push	hl
   0ADE CDr00r00      [17] 2012 	call	_cpct_drawSpriteMasked
   0AE1 C1            [10] 2013 	pop	bc
                           2014 ;src/lib/video.c:483: gx = x;
   0AE2 DD 7E F7      [19] 2015 	ld	a, -9 (ix)
   0AE5 DD 77 F5      [19] 2016 	ld	-11 (ix), a
                           2017 ;src/lib/video.c:484: gy = y + GRID_P_H;
   0AE8 DD 7E F6      [19] 2018 	ld	a, -10 (ix)
   0AEB C6 0A         [ 7] 2019 	add	a, #0x0a
   0AED 5F            [ 4] 2020 	ld	e, a
   0AEE DD 73 FE      [19] 2021 	ld	-2 (ix), e
                           2022 ;src/lib/video.c:485: for (u8 i = 1; i < sz->h; i++) {
   0AF1 DD 36 F4 01   [19] 2023 	ld	-12 (ix), #0x01
   0AF5                    2024 00121$:
   0AF5 DD 6E F9      [19] 2025 	ld	l,-7 (ix)
   0AF8 DD 66 FA      [19] 2026 	ld	h,-6 (ix)
   0AFB 46            [ 7] 2027 	ld	b, (hl)
   0AFC DD 7E F4      [19] 2028 	ld	a, -12 (ix)
   0AFF 90            [ 4] 2029 	sub	a, b
   0B00 30 36         [12] 2030 	jr	NC,00103$
                           2031 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0B02 C5            [11] 2032 	push	bc
   0B03 D5            [11] 2033 	push	de
   0B04 DD 66 FE      [19] 2034 	ld	h, -2 (ix)
   0B07 DD 6E F5      [19] 2035 	ld	l, -11 (ix)
   0B0A E5            [11] 2036 	push	hl
   0B0B 21 00 C0      [10] 2037 	ld	hl, #0xc000
   0B0E E5            [11] 2038 	push	hl
   0B0F CDr00r00      [17] 2039 	call	_cpct_getScreenPtr
   0B12 D1            [10] 2040 	pop	de
   0B13 C1            [10] 2041 	pop	bc
                           2042 ;src/lib/video.c:488: gui_ts[GUI_WEST], v_pos, GRID_P_W, GRID_P_H);
   0B14 E5            [11] 2043 	push	hl
   0B15 FD E1         [14] 2044 	pop	iy
   0B17 2Ar08r00      [16] 2045 	ld	hl, (#_gui_ts + 8)
   0B1A 45            [ 4] 2046 	ld	b, l
   0B1B 54            [ 4] 2047 	ld	d, h
   0B1C C5            [11] 2048 	push	bc
   0B1D D5            [11] 2049 	push	de
   0B1E 21 03 0A      [10] 2050 	ld	hl, #0x0a03
   0B21 E5            [11] 2051 	push	hl
   0B22 FD E5         [15] 2052 	push	iy
   0B24 58            [ 4] 2053 	ld	e,b
   0B25 D5            [11] 2054 	push	de
   0B26 CDr00r00      [17] 2055 	call	_cpct_drawSpriteMasked
   0B29 D1            [10] 2056 	pop	de
   0B2A C1            [10] 2057 	pop	bc
                           2058 ;src/lib/video.c:489: gy += GRID_P_H;
   0B2B DD 7E FE      [19] 2059 	ld	a, -2 (ix)
   0B2E C6 0A         [ 7] 2060 	add	a, #0x0a
   0B30 DD 77 FE      [19] 2061 	ld	-2 (ix), a
                           2062 ;src/lib/video.c:485: for (u8 i = 1; i < sz->h; i++) {
   0B33 DD 34 F4      [23] 2063 	inc	-12 (ix)
   0B36 18 BD         [12] 2064 	jr	00121$
   0B38                    2065 00103$:
                           2066 ;src/lib/video.c:493: gx = r;
   0B38 DD 71 FE      [19] 2067 	ld	-2 (ix), c
                           2068 ;src/lib/video.c:494: gy = y + GRID_P_H;
                           2069 ;src/lib/video.c:495: for (u8 i = 1; i < sz->h; i++) {
   0B3B DD 36 F4 01   [19] 2070 	ld	-12 (ix), #0x01
   0B3F                    2071 00124$:
   0B3F DD 6E F9      [19] 2072 	ld	l,-7 (ix)
   0B42 DD 66 FA      [19] 2073 	ld	h,-6 (ix)
   0B45 DD 7E F4      [19] 2074 	ld	a,-12 (ix)
   0B48 96            [ 7] 2075 	sub	a,(hl)
   0B49 30 2B         [12] 2076 	jr	NC,00126$
                           2077 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0B4B D5            [11] 2078 	push	de
   0B4C 53            [ 4] 2079 	ld	d, e
   0B4D DD 5E FE      [19] 2080 	ld	e, -2 (ix)
   0B50 D5            [11] 2081 	push	de
   0B51 21 00 C0      [10] 2082 	ld	hl, #0xc000
   0B54 E5            [11] 2083 	push	hl
   0B55 CDr00r00      [17] 2084 	call	_cpct_getScreenPtr
   0B58 4D            [ 4] 2085 	ld	c, l
   0B59 44            [ 4] 2086 	ld	b, h
   0B5A D1            [10] 2087 	pop	de
                           2088 ;src/lib/video.c:498: gui_ts[GUI_EAST], v_pos, GRID_P_W, GRID_P_H);
   0B5B 2Ar0Ar00      [16] 2089 	ld	hl, (#_gui_ts + 10)
   0B5E E5            [11] 2090 	push	hl
   0B5F FD E1         [14] 2091 	pop	iy
   0B61 D5            [11] 2092 	push	de
   0B62 21 03 0A      [10] 2093 	ld	hl, #0x0a03
   0B65 E5            [11] 2094 	push	hl
   0B66 C5            [11] 2095 	push	bc
   0B67 FD E5         [15] 2096 	push	iy
   0B69 CDr00r00      [17] 2097 	call	_cpct_drawSpriteMasked
   0B6C D1            [10] 2098 	pop	de
                           2099 ;src/lib/video.c:499: gy += GRID_P_H;
   0B6D 7B            [ 4] 2100 	ld	a, e
   0B6E C6 0A         [ 7] 2101 	add	a, #0x0a
   0B70 5F            [ 4] 2102 	ld	e, a
                           2103 ;src/lib/video.c:495: for (u8 i = 1; i < sz->h; i++) {
   0B71 DD 34 F4      [23] 2104 	inc	-12 (ix)
   0B74 18 C9         [12] 2105 	jr	00124$
   0B76                    2106 00126$:
   0B76 DD F9         [10] 2107 	ld	sp, ix
   0B78 DD E1         [14] 2108 	pop	ix
   0B7A C9            [10] 2109 	ret
                           2110 ;src/lib/video.c:504: void v_init_sprites(const u8 level) {
                           2111 ;	---------------------------------
                           2112 ; Function v_init_sprites
                           2113 ; ---------------------------------
   0B7B                    2114 _v_init_sprites::
   0B7B DD E5         [15] 2115 	push	ix
   0B7D DD 21 00 00   [14] 2116 	ld	ix,#0
   0B81 DD 39         [15] 2117 	add	ix,sp
                           2118 ;src/lib/video.c:506: for (u8 i = CELL_G; i <= CELL_G_P_V_H; i++) {
   0B83 0E 00         [ 7] 2119 	ld	c, #0x00
   0B85                    2120 00103$:
   0B85 3E 07         [ 7] 2121 	ld	a, #0x07
   0B87 91            [ 4] 2122 	sub	a, c
   0B88 38 3E         [12] 2123 	jr	C,00105$
                           2124 ;src/lib/video.c:507: cpct_memset(v_cells[i], 0, sizeof(v_cells[i]));
   0B8A 69            [ 4] 2125 	ld	l, c
   0B8B 26 00         [ 7] 2126 	ld	h, #0x00
   0B8D 29            [11] 2127 	add	hl, hl
   0B8E 11r0Cr00      [10] 2128 	ld	de, #_v_cells
   0B91 19            [11] 2129 	add	hl, de
   0B92 5D            [ 4] 2130 	ld	e,l
   0B93 54            [ 4] 2131 	ld	d,h
   0B94 7E            [ 7] 2132 	ld	a, (hl)
   0B95 23            [ 6] 2133 	inc	hl
   0B96 66            [ 7] 2134 	ld	h, (hl)
   0B97 6F            [ 4] 2135 	ld	l, a
   0B98 E5            [11] 2136 	push	hl
   0B99 FD E1         [14] 2137 	pop	iy
   0B9B C5            [11] 2138 	push	bc
   0B9C D5            [11] 2139 	push	de
   0B9D 21 02 00      [10] 2140 	ld	hl, #0x0002
   0BA0 E5            [11] 2141 	push	hl
   0BA1 AF            [ 4] 2142 	xor	a, a
   0BA2 F5            [11] 2143 	push	af
   0BA3 33            [ 6] 2144 	inc	sp
   0BA4 FD E5         [15] 2145 	push	iy
   0BA6 CDr00r00      [17] 2146 	call	_cpct_memset
   0BA9 D1            [10] 2147 	pop	de
   0BAA C1            [10] 2148 	pop	bc
                           2149 ;src/lib/video.c:508: v_generate_sprite(v_cells[i], v_spr_map[i], level);
   0BAB 21r1Cr00      [10] 2150 	ld	hl, #_v_spr_map
   0BAE 06 00         [ 7] 2151 	ld	b, #0x00
   0BB0 09            [11] 2152 	add	hl, bc
   0BB1 46            [ 7] 2153 	ld	b, (hl)
   0BB2 EB            [ 4] 2154 	ex	de,hl
   0BB3 5E            [ 7] 2155 	ld	e, (hl)
   0BB4 23            [ 6] 2156 	inc	hl
   0BB5 56            [ 7] 2157 	ld	d, (hl)
   0BB6 C5            [11] 2158 	push	bc
   0BB7 DD 7E 04      [19] 2159 	ld	a, 4 (ix)
   0BBA F5            [11] 2160 	push	af
   0BBB 33            [ 6] 2161 	inc	sp
   0BBC C5            [11] 2162 	push	bc
   0BBD 33            [ 6] 2163 	inc	sp
   0BBE D5            [11] 2164 	push	de
   0BBF CDrCFr0D      [17] 2165 	call	_v_generate_sprite
   0BC2 F1            [10] 2166 	pop	af
   0BC3 F1            [10] 2167 	pop	af
   0BC4 C1            [10] 2168 	pop	bc
                           2169 ;src/lib/video.c:506: for (u8 i = CELL_G; i <= CELL_G_P_V_H; i++) {
   0BC5 0C            [ 4] 2170 	inc	c
   0BC6 18 BD         [12] 2171 	jr	00103$
   0BC8                    2172 00105$:
   0BC8 DD E1         [14] 2173 	pop	ix
   0BCA C9            [10] 2174 	ret
                           2175 ;src/lib/video.c:513: inline u8* v_get_sprite_p(const u8 value) {
                           2176 ;	---------------------------------
                           2177 ; Function v_get_sprite_p
                           2178 ; ---------------------------------
   0BCB                    2179 _v_get_sprite_p::
   0BCB DD E5         [15] 2180 	push	ix
   0BCD DD 21 00 00   [14] 2181 	ld	ix,#0
   0BD1 DD 39         [15] 2182 	add	ix,sp
                           2183 ;src/lib/video.c:515: switch (value) {
   0BD3 DD 7E 04      [19] 2184 	ld	a, 4 (ix)
   0BD6 3D            [ 4] 2185 	dec	a
   0BD7 28 33         [12] 2186 	jr	Z,00101$
   0BD9 DD 7E 04      [19] 2187 	ld	a, 4 (ix)
   0BDC D6 03         [ 7] 2188 	sub	a, #0x03
   0BDE 28 31         [12] 2189 	jr	Z,00102$
   0BE0 DD 7E 04      [19] 2190 	ld	a, 4 (ix)
   0BE3 D6 05         [ 7] 2191 	sub	a, #0x05
   0BE5 28 2F         [12] 2192 	jr	Z,00103$
   0BE7 DD 7E 04      [19] 2193 	ld	a, 4 (ix)
   0BEA D6 07         [ 7] 2194 	sub	a, #0x07
   0BEC 28 37         [12] 2195 	jr	Z,00106$
   0BEE DD 7E 04      [19] 2196 	ld	a, 4 (ix)
   0BF1 D6 09         [ 7] 2197 	sub	a, #0x09
   0BF3 28 26         [12] 2198 	jr	Z,00104$
   0BF5 DD 7E 04      [19] 2199 	ld	a, 4 (ix)
   0BF8 D6 0B         [ 7] 2200 	sub	a, #0x0b
   0BFA 28 2E         [12] 2201 	jr	Z,00107$
   0BFC DD 7E 04      [19] 2202 	ld	a, 4 (ix)
   0BFF D6 0D         [ 7] 2203 	sub	a, #0x0d
   0C01 28 1D         [12] 2204 	jr	Z,00105$
   0C03 DD 7E 04      [19] 2205 	ld	a, 4 (ix)
   0C06 D6 0F         [ 7] 2206 	sub	a, #0x0f
   0C08 28 25         [12] 2207 	jr	Z,00108$
   0C0A 18 28         [12] 2208 	jr	00109$
                           2209 ;src/lib/video.c:516: case FLAG_GRID:
   0C0C                    2210 00101$:
                           2211 ;src/lib/video.c:517: return v_cells[CELL_G];
   0C0C 2Ar0Cr00      [16] 2212 	ld	hl, (#_v_cells + 0)
   0C0F 18 26         [12] 2213 	jr	00111$
                           2214 ;src/lib/video.c:519: case FLAG_GRID | FLAG_POD:
   0C11                    2215 00102$:
                           2216 ;src/lib/video.c:520: return v_cells[CELL_G_P];
   0C11 2Ar0Er00      [16] 2217 	ld	hl, (#(_v_cells + 0x0002) + 0)
   0C14 18 21         [12] 2218 	jr	00111$
                           2219 ;src/lib/video.c:522: case FLAG_GRID | FLAG_V_BOLT:
   0C16                    2220 00103$:
                           2221 ;src/lib/video.c:523: return v_cells[CELL_G_V];
   0C16 2Ar10r00      [16] 2222 	ld	hl, (#(_v_cells + 0x0004) + 0)
   0C19 18 1C         [12] 2223 	jr	00111$
                           2224 ;src/lib/video.c:525: case FLAG_GRID | FLAG_H_BOLT:
   0C1B                    2225 00104$:
                           2226 ;src/lib/video.c:526: return v_cells[CELL_G_H];
   0C1B 2Ar12r00      [16] 2227 	ld	hl, (#(_v_cells + 0x0006) + 0)
   0C1E 18 17         [12] 2228 	jr	00111$
                           2229 ;src/lib/video.c:528: case FLAG_GRID | FLAG_V_BOLT | FLAG_H_BOLT:
   0C20                    2230 00105$:
                           2231 ;src/lib/video.c:529: return v_cells[CELL_G_V_H];
   0C20 2Ar14r00      [16] 2232 	ld	hl, (#(_v_cells + 0x0008) + 0)
   0C23 18 12         [12] 2233 	jr	00111$
                           2234 ;src/lib/video.c:531: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT:
   0C25                    2235 00106$:
                           2236 ;src/lib/video.c:532: return v_cells[CELL_G_P_V];
   0C25 2Ar16r00      [16] 2237 	ld	hl, (#(_v_cells + 0x000a) + 0)
   0C28 18 0D         [12] 2238 	jr	00111$
                           2239 ;src/lib/video.c:534: case FLAG_GRID | FLAG_POD | FLAG_H_BOLT:
   0C2A                    2240 00107$:
                           2241 ;src/lib/video.c:535: return v_cells[CELL_G_P_H];
   0C2A 2Ar18r00      [16] 2242 	ld	hl, (#(_v_cells + 0x000c) + 0)
   0C2D 18 08         [12] 2243 	jr	00111$
                           2244 ;src/lib/video.c:537: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT | FLAG_H_BOLT:
   0C2F                    2245 00108$:
                           2246 ;src/lib/video.c:538: return v_cells[CELL_G_P_V_H];
   0C2F 2Ar1Ar00      [16] 2247 	ld	hl, (#(_v_cells + 0x000e) + 0)
   0C32 18 03         [12] 2248 	jr	00111$
                           2249 ;src/lib/video.c:540: default:
   0C34                    2250 00109$:
                           2251 ;src/lib/video.c:541: return v_cells[CELL_G];
   0C34 2Ar0Cr00      [16] 2252 	ld	hl, (#_v_cells + 0)
                           2253 ;src/lib/video.c:542: }
   0C37                    2254 00111$:
   0C37 DD E1         [14] 2255 	pop	ix
   0C39 C9            [10] 2256 	ret
                           2257 ;src/lib/video.c:546: void v_draw_player_bb(const i8 x, const i8 y) {
                           2258 ;	---------------------------------
                           2259 ; Function v_draw_player_bb
                           2260 ; ---------------------------------
   0C3A                    2261 _v_draw_player_bb::
   0C3A DD E5         [15] 2262 	push	ix
   0C3C DD 21 00 00   [14] 2263 	ld	ix,#0
   0C40 DD 39         [15] 2264 	add	ix,sp
   0C42 21 F7 FF      [10] 2265 	ld	hl, #-9
   0C45 39            [11] 2266 	add	hl, sp
   0C46 F9            [ 6] 2267 	ld	sp, hl
                           2268 ;src/lib/video.c:552: cpct_memset(v_player_buf, 0, sizeof(v_player_buf));
   0C47 21 0E 01      [10] 2269 	ld	hl, #0x010e
   0C4A E5            [11] 2270 	push	hl
   0C4B AF            [ 4] 2271 	xor	a, a
   0C4C F5            [11] 2272 	push	af
   0C4D 33            [ 6] 2273 	inc	sp
   0C4E 21r00r00      [10] 2274 	ld	hl, #_v_player_buf
   0C51 E5            [11] 2275 	push	hl
   0C52 CDr00r00      [17] 2276 	call	_cpct_memset
                           2277 ;src/lib/video.c:553: for (i8 j = x; j < x + PLAYER_BUF_W; j++) {
   0C55 DD 7E 04      [19] 2278 	ld	a, 4 (ix)
   0C58 DD 77 F7      [19] 2279 	ld	-9 (ix), a
   0C5B                    2280 00121$:
   0C5B DD 4E 04      [19] 2281 	ld	c, 4 (ix)
   0C5E DD 7E 04      [19] 2282 	ld	a, 4 (ix)
   0C61 17            [ 4] 2283 	rla
   0C62 9F            [ 4] 2284 	sbc	a, a
   0C63 47            [ 4] 2285 	ld	b, a
   0C64 03            [ 6] 2286 	inc	bc
   0C65 03            [ 6] 2287 	inc	bc
   0C66 03            [ 6] 2288 	inc	bc
   0C67 DD 7E F7      [19] 2289 	ld	a, -9 (ix)
   0C6A DD 77 FC      [19] 2290 	ld	-4 (ix), a
   0C6D DD 7E F7      [19] 2291 	ld	a, -9 (ix)
   0C70 17            [ 4] 2292 	rla
   0C71 9F            [ 4] 2293 	sbc	a, a
   0C72 DD 77 FD      [19] 2294 	ld	-3 (ix), a
   0C75 DD 7E FC      [19] 2295 	ld	a, -4 (ix)
   0C78 91            [ 4] 2296 	sub	a, c
   0C79 DD 7E FD      [19] 2297 	ld	a, -3 (ix)
   0C7C 98            [ 4] 2298 	sbc	a, b
   0C7D E2r82r0C      [10] 2299 	jp	PO, 00179$
   0C80 EE 80         [ 7] 2300 	xor	a, #0x80
   0C82                    2301 00179$:
   0C82 F2r94r0D      [10] 2302 	jp	P, 00105$
                           2303 ;src/lib/video.c:554: for (i8 k = y; k < y + PLAYER_BUF_H; k++) {
   0C85 DD 7E 05      [19] 2304 	ld	a, 5 (ix)
   0C88 DD 77 FB      [19] 2305 	ld	-5 (ix), a
   0C8B DD 7E F7      [19] 2306 	ld	a, -9 (ix)
   0C8E DD 96 04      [19] 2307 	sub	a, 4 (ix)
   0C91 DD 77 FA      [19] 2308 	ld	-6 (ix), a
   0C94 4F            [ 4] 2309 	ld	c, a
   0C95 87            [ 4] 2310 	add	a, a
   0C96 81            [ 4] 2311 	add	a, c
   0C97 DD 77 FA      [19] 2312 	ld	-6 (ix), a
   0C9A                    2313 00119$:
   0C9A DD 7E 05      [19] 2314 	ld	a, 5 (ix)
   0C9D DD 77 FE      [19] 2315 	ld	-2 (ix), a
   0CA0 DD 7E 05      [19] 2316 	ld	a, 5 (ix)
   0CA3 17            [ 4] 2317 	rla
   0CA4 9F            [ 4] 2318 	sbc	a, a
   0CA5 DD 77 FF      [19] 2319 	ld	-1 (ix), a
   0CA8 DD 7E FE      [19] 2320 	ld	a, -2 (ix)
   0CAB C6 03         [ 7] 2321 	add	a, #0x03
   0CAD DD 77 FE      [19] 2322 	ld	-2 (ix), a
   0CB0 DD 7E FF      [19] 2323 	ld	a, -1 (ix)
   0CB3 CE 00         [ 7] 2324 	adc	a, #0x00
   0CB5 DD 77 FF      [19] 2325 	ld	-1 (ix), a
   0CB8 DD 7E FB      [19] 2326 	ld	a, -5 (ix)
   0CBB DD 77 F8      [19] 2327 	ld	-8 (ix), a
   0CBE DD 7E FB      [19] 2328 	ld	a, -5 (ix)
   0CC1 17            [ 4] 2329 	rla
   0CC2 9F            [ 4] 2330 	sbc	a, a
   0CC3 DD 77 F9      [19] 2331 	ld	-7 (ix), a
   0CC6 DD 7E F8      [19] 2332 	ld	a, -8 (ix)
   0CC9 DD 96 FE      [19] 2333 	sub	a, -2 (ix)
   0CCC DD 7E F9      [19] 2334 	ld	a, -7 (ix)
   0CCF DD 9E FF      [19] 2335 	sbc	a, -1 (ix)
   0CD2 E2rD7r0C      [10] 2336 	jp	PO, 00180$
   0CD5 EE 80         [ 7] 2337 	xor	a, #0x80
   0CD7                    2338 00180$:
   0CD7 F2r8Er0D      [10] 2339 	jp	P, 00122$
                           2340 ;src/lib/video.c:556: if (!u_bounds_check(j, k))
   0CDA DD 6E F8      [19] 2341 	ld	l,-8 (ix)
   0CDD DD 66 F9      [19] 2342 	ld	h,-7 (ix)
   0CE0 E5            [11] 2343 	push	hl
   0CE1 DD 6E FC      [19] 2344 	ld	l,-4 (ix)
   0CE4 DD 66 FD      [19] 2345 	ld	h,-3 (ix)
   0CE7 E5            [11] 2346 	push	hl
   0CE8 CDr00r00      [17] 2347 	call	_u_bounds_check
   0CEB F1            [10] 2348 	pop	af
   0CEC F1            [10] 2349 	pop	af
   0CED 4D            [ 4] 2350 	ld	c, l
   0CEE CB 41         [ 8] 2351 	bit	0, c
   0CF0 CAr88r0D      [10] 2352 	jp	Z, 00103$
                           2353 ;src/lib/video.c:560: by = (k - y) * GRID_P_H;
   0CF3 DD 7E FB      [19] 2354 	ld	a, -5 (ix)
   0CF6 DD 96 05      [19] 2355 	sub	a, 5 (ix)
   0CF9 4F            [ 4] 2356 	ld	c, a
   0CFA 87            [ 4] 2357 	add	a, a
   0CFB 87            [ 4] 2358 	add	a, a
   0CFC 81            [ 4] 2359 	add	a, c
   0CFD 87            [ 4] 2360 	add	a, a
                           2361 ;src/lib/video.c:562: b_pos = cpctm_spriteBufferPtr(v_player_buf,
   0CFE 4F            [ 4] 2362 	ld	c,a
   0CFF 06 00         [ 7] 2363 	ld	b,#0x00
   0D01 69            [ 4] 2364 	ld	l, c
   0D02 60            [ 4] 2365 	ld	h, b
   0D03 29            [11] 2366 	add	hl, hl
   0D04 29            [11] 2367 	add	hl, hl
   0D05 29            [11] 2368 	add	hl, hl
   0D06 09            [11] 2369 	add	hl, bc
   0D07 11r00r00      [10] 2370 	ld	de, #_v_player_buf
   0D0A 19            [11] 2371 	add	hl, de
   0D0B DD 7E FA      [19] 2372 	ld	a, -6 (ix)
   0D0E 85            [ 4] 2373 	add	a, l
   0D0F 4F            [ 4] 2374 	ld	c, a
   0D10 3E 00         [ 7] 2375 	ld	a, #0x00
   0D12 8C            [ 4] 2376 	adc	a, h
   0D13 47            [ 4] 2377 	ld	b, a
                           2378 ;src/lib/video.c:564: cell = g_level[u_get_xy(j, k)];
   0D14 C5            [11] 2379 	push	bc
   0D15 DD 6E F8      [19] 2380 	ld	l,-8 (ix)
   0D18 DD 66 F9      [19] 2381 	ld	h,-7 (ix)
   0D1B E5            [11] 2382 	push	hl
   0D1C DD 6E FC      [19] 2383 	ld	l,-4 (ix)
   0D1F DD 66 FD      [19] 2384 	ld	h,-3 (ix)
   0D22 E5            [11] 2385 	push	hl
   0D23 CDr00r00      [17] 2386 	call	_u_get_xy
   0D26 F1            [10] 2387 	pop	af
   0D27 F1            [10] 2388 	pop	af
   0D28 C1            [10] 2389 	pop	bc
   0D29 11r00r00      [10] 2390 	ld	de, #_g_level
   0D2C 19            [11] 2391 	add	hl, de
   0D2D 7E            [ 7] 2392 	ld	a, (hl)
                           2393 ;src/lib/video.c:515: switch (value) {
   0D2E FE 01         [ 7] 2394 	cp	a, #0x01
   0D30 28 1E         [12] 2395 	jr	Z,00106$
   0D32 FE 03         [ 7] 2396 	cp	a, #0x03
   0D34 28 1F         [12] 2397 	jr	Z,00107$
   0D36 FE 05         [ 7] 2398 	cp	a, #0x05
   0D38 28 20         [12] 2399 	jr	Z,00108$
   0D3A FE 07         [ 7] 2400 	cp	a, #0x07
   0D3C 28 2B         [12] 2401 	jr	Z,00111$
   0D3E FE 09         [ 7] 2402 	cp	a, #0x09
   0D40 28 1D         [12] 2403 	jr	Z,00109$
   0D42 FE 0B         [ 7] 2404 	cp	a, #0x0b
   0D44 28 28         [12] 2405 	jr	Z,00112$
   0D46 FE 0D         [ 7] 2406 	cp	a, #0x0d
   0D48 28 1A         [12] 2407 	jr	Z,00110$
   0D4A D6 0F         [ 7] 2408 	sub	a, #0x0f
   0D4C 28 25         [12] 2409 	jr	Z,00113$
   0D4E 18 28         [12] 2410 	jr	00114$
                           2411 ;src/lib/video.c:516: case FLAG_GRID:
   0D50                    2412 00106$:
                           2413 ;src/lib/video.c:517: return v_cells[CELL_G];
   0D50 2Ar0Cr00      [16] 2414 	ld	hl, (#_v_cells + 0)
   0D53 18 26         [12] 2415 	jr	00116$
                           2416 ;src/lib/video.c:519: case FLAG_GRID | FLAG_POD:
   0D55                    2417 00107$:
                           2418 ;src/lib/video.c:520: return v_cells[CELL_G_P];
   0D55 2Ar0Er00      [16] 2419 	ld	hl, (#_v_cells + 2)
   0D58 18 21         [12] 2420 	jr	00116$
                           2421 ;src/lib/video.c:522: case FLAG_GRID | FLAG_V_BOLT:
   0D5A                    2422 00108$:
                           2423 ;src/lib/video.c:523: return v_cells[CELL_G_V];
   0D5A 2Ar10r00      [16] 2424 	ld	hl, (#_v_cells + 4)
   0D5D 18 1C         [12] 2425 	jr	00116$
                           2426 ;src/lib/video.c:525: case FLAG_GRID | FLAG_H_BOLT:
   0D5F                    2427 00109$:
                           2428 ;src/lib/video.c:526: return v_cells[CELL_G_H];
   0D5F 2Ar12r00      [16] 2429 	ld	hl, (#_v_cells + 6)
   0D62 18 17         [12] 2430 	jr	00116$
                           2431 ;src/lib/video.c:528: case FLAG_GRID | FLAG_V_BOLT | FLAG_H_BOLT:
   0D64                    2432 00110$:
                           2433 ;src/lib/video.c:529: return v_cells[CELL_G_V_H];
   0D64 2Ar14r00      [16] 2434 	ld	hl, (#_v_cells + 8)
   0D67 18 12         [12] 2435 	jr	00116$
                           2436 ;src/lib/video.c:531: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT:
   0D69                    2437 00111$:
                           2438 ;src/lib/video.c:532: return v_cells[CELL_G_P_V];
   0D69 2Ar16r00      [16] 2439 	ld	hl, (#_v_cells + 10)
   0D6C 18 0D         [12] 2440 	jr	00116$
                           2441 ;src/lib/video.c:534: case FLAG_GRID | FLAG_POD | FLAG_H_BOLT:
   0D6E                    2442 00112$:
                           2443 ;src/lib/video.c:535: return v_cells[CELL_G_P_H];
   0D6E 2Ar18r00      [16] 2444 	ld	hl, (#_v_cells + 12)
   0D71 18 08         [12] 2445 	jr	00116$
                           2446 ;src/lib/video.c:537: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT | FLAG_H_BOLT:
   0D73                    2447 00113$:
                           2448 ;src/lib/video.c:538: return v_cells[CELL_G_P_V_H];
   0D73 2Ar1Ar00      [16] 2449 	ld	hl, (#_v_cells + 14)
   0D76 18 03         [12] 2450 	jr	00116$
                           2451 ;src/lib/video.c:540: default:
   0D78                    2452 00114$:
                           2453 ;src/lib/video.c:541: return v_cells[CELL_G];
   0D78 2Ar0Cr00      [16] 2454 	ld	hl, (#_v_cells + 0)
                           2455 ;src/lib/video.c:565: spr = v_get_sprite_p(cell);
   0D7B                    2456 00116$:
                           2457 ;src/lib/video.c:567: GRID_P_W, GRID_P_H, spr);
                           2458 ;src/lib/video.c:566: cpct_drawToSpriteBuffer(PLAYER_BUF_PW, b_pos,
   0D7B E5            [11] 2459 	push	hl
   0D7C 21 03 0A      [10] 2460 	ld	hl, #0x0a03
   0D7F E5            [11] 2461 	push	hl
   0D80 C5            [11] 2462 	push	bc
   0D81 21 09 00      [10] 2463 	ld	hl, #0x0009
   0D84 E5            [11] 2464 	push	hl
   0D85 CDr00r00      [17] 2465 	call	_cpct_drawToSpriteBuffer
   0D88                    2466 00103$:
                           2467 ;src/lib/video.c:554: for (i8 k = y; k < y + PLAYER_BUF_H; k++) {
   0D88 DD 34 FB      [23] 2468 	inc	-5 (ix)
   0D8B C3r9Ar0C      [10] 2469 	jp	00119$
   0D8E                    2470 00122$:
                           2471 ;src/lib/video.c:553: for (i8 j = x; j < x + PLAYER_BUF_W; j++) {
   0D8E DD 34 F7      [23] 2472 	inc	-9 (ix)
   0D91 C3r5Br0C      [10] 2473 	jp	00121$
   0D94                    2474 00105$:
                           2475 ;src/lib/video.c:572: px = x * GRID_P_W; 
   0D94 DD 4E 04      [19] 2476 	ld	c, 4 (ix)
   0D97 79            [ 4] 2477 	ld	a, c
   0D98 CB 07         [ 8] 2478 	rlc	a
   0D9A 9F            [ 4] 2479 	sbc	a, a
   0D9B 47            [ 4] 2480 	ld	b, a
   0D9C 69            [ 4] 2481 	ld	l, c
   0D9D 60            [ 4] 2482 	ld	h, b
   0D9E 29            [11] 2483 	add	hl, hl
   0D9F 09            [11] 2484 	add	hl, bc
   0DA0 4D            [ 4] 2485 	ld	c, l
                           2486 ;src/lib/video.c:573: py = y * GRID_P_H;
   0DA1 DD 5E 05      [19] 2487 	ld	e, 5 (ix)
   0DA4 7B            [ 4] 2488 	ld	a, e
   0DA5 CB 07         [ 8] 2489 	rlc	a
   0DA7 9F            [ 4] 2490 	sbc	a, a
   0DA8 57            [ 4] 2491 	ld	d, a
   0DA9 6B            [ 4] 2492 	ld	l, e
   0DAA 62            [ 4] 2493 	ld	h, d
   0DAB 29            [11] 2494 	add	hl, hl
   0DAC 29            [11] 2495 	add	hl, hl
   0DAD 19            [11] 2496 	add	hl, de
   0DAE 29            [11] 2497 	add	hl, hl
                           2498 ;src/lib/video.c:575: v_pos = v_get_pos(GRID_LOC_X + px, GRID_LOC_Y + py);
   0DAF 7D            [ 4] 2499 	ld	a, l
   0DB0 C6 12         [ 7] 2500 	add	a, #0x12
   0DB2 57            [ 4] 2501 	ld	d, a
   0DB3 0C            [ 4] 2502 	inc	c
   0DB4 0C            [ 4] 2503 	inc	c
                           2504 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0DB5 59            [ 4] 2505 	ld	e, c
   0DB6 D5            [11] 2506 	push	de
   0DB7 21 00 C0      [10] 2507 	ld	hl, #0xc000
   0DBA E5            [11] 2508 	push	hl
   0DBB CDr00r00      [17] 2509 	call	_cpct_getScreenPtr
                           2510 ;src/lib/video.c:575: v_pos = v_get_pos(GRID_LOC_X + px, GRID_LOC_Y + py);
                           2511 ;src/lib/video.c:576: cpct_drawSprite(v_player_buf, v_pos, PLAYER_BUF_PW, PLAYER_BUF_PH);
   0DBE 01 09 1E      [10] 2512 	ld	bc, #0x1e09
   0DC1 C5            [11] 2513 	push	bc
   0DC2 E5            [11] 2514 	push	hl
   0DC3 21r00r00      [10] 2515 	ld	hl, #_v_player_buf
   0DC6 E5            [11] 2516 	push	hl
   0DC7 CDr00r00      [17] 2517 	call	_cpct_drawSprite
   0DCA DD F9         [10] 2518 	ld	sp, ix
   0DCC DD E1         [14] 2519 	pop	ix
   0DCE C9            [10] 2520 	ret
                           2521 ;src/lib/video.c:580: static void v_generate_sprite(u8* addr, const u8 mask, const u8 level) {
                           2522 ;	---------------------------------
                           2523 ; Function v_generate_sprite
                           2524 ; ---------------------------------
   0DCF                    2525 _v_generate_sprite:
   0DCF DD E5         [15] 2526 	push	ix
   0DD1 DD 21 00 00   [14] 2527 	ld	ix,#0
   0DD5 DD 39         [15] 2528 	add	ix,sp
   0DD7 F5            [11] 2529 	push	af
                           2530 ;src/lib/video.c:582: const u8 bg = g_game_grid_bg[level - 1];
   0DD8 11r00r00      [10] 2531 	ld	de, #_g_game_grid_bg+0
   0DDB DD 4E 07      [19] 2532 	ld	c, 7 (ix)
   0DDE 0D            [ 4] 2533 	dec	c
   0DDF 69            [ 4] 2534 	ld	l,c
   0DE0 26 00         [ 7] 2535 	ld	h,#0x00
   0DE2 19            [11] 2536 	add	hl, de
   0DE3 5E            [ 7] 2537 	ld	e, (hl)
                           2538 ;src/lib/video.c:583: const u8 fg = g_game_grid_fg[level - 1];
   0DE4 21r00r00      [10] 2539 	ld	hl, #_g_game_grid_fg+0
   0DE7 06 00         [ 7] 2540 	ld	b, #0x00
   0DE9 09            [11] 2541 	add	hl, bc
   0DEA 7E            [ 7] 2542 	ld	a, (hl)
   0DEB DD 77 FE      [19] 2543 	ld	-2 (ix), a
                           2544 ;src/lib/video.c:584: const u8 bt = g_game_grid_bt[level - 1];
   0DEE 21r00r00      [10] 2545 	ld	hl, #_g_game_grid_bt+0
   0DF1 06 00         [ 7] 2546 	ld	b,#0x00
   0DF3 09            [11] 2547 	add	hl, bc
   0DF4 7E            [ 7] 2548 	ld	a, (hl)
   0DF5 DD 77 FF      [19] 2549 	ld	-1 (ix), a
                           2550 ;src/lib/video.c:587: spr = cpctm_spriteBufferPtr(addr, CELL_BUF_PW, 0, 0);
   0DF8 DD 4E 04      [19] 2551 	ld	c,4 (ix)
   0DFB DD 46 05      [19] 2552 	ld	b,5 (ix)
                           2553 ;src/lib/video.c:591: CELL_BUF_PW, spr, CELL_BUF_PW, CELL_BUF_PH, grid_bg_ts[bg]);
                           2554 ;src/lib/video.c:589: if (mask & FLAG_GRID)
   0DFE DD CB 06 46   [20] 2555 	bit	0, 6 (ix)
   0E02 28 19         [12] 2556 	jr	Z,00102$
                           2557 ;src/lib/video.c:591: CELL_BUF_PW, spr, CELL_BUF_PW, CELL_BUF_PH, grid_bg_ts[bg]);
   0E04 6B            [ 4] 2558 	ld	l, e
   0E05 26 00         [ 7] 2559 	ld	h, #0x00
   0E07 29            [11] 2560 	add	hl, hl
   0E08 11r00r00      [10] 2561 	ld	de, #_grid_bg_ts
   0E0B 19            [11] 2562 	add	hl, de
   0E0C 5E            [ 7] 2563 	ld	e, (hl)
   0E0D 23            [ 6] 2564 	inc	hl
   0E0E 56            [ 7] 2565 	ld	d, (hl)
   0E0F C5            [11] 2566 	push	bc
   0E10 D5            [11] 2567 	push	de
   0E11 21 03 0A      [10] 2568 	ld	hl, #0x0a03
   0E14 E5            [11] 2569 	push	hl
   0E15 C5            [11] 2570 	push	bc
   0E16 26 00         [ 7] 2571 	ld	h, #0x00
   0E18 E5            [11] 2572 	push	hl
   0E19 CDr00r00      [17] 2573 	call	_cpct_drawToSpriteBuffer
   0E1C C1            [10] 2574 	pop	bc
   0E1D                    2575 00102$:
                           2576 ;src/lib/video.c:592: if (mask & FLAG_POD)
   0E1D DD CB 06 4E   [20] 2577 	bit	1, 6 (ix)
   0E21 28 1B         [12] 2578 	jr	Z,00104$
                           2579 ;src/lib/video.c:594: CELL_BUF_PW, spr, CELL_BUF_PW, CELL_BUF_PH, grid_fg_ts[fg]);
   0E23 11r00r00      [10] 2580 	ld	de, #_grid_fg_ts+0
   0E26 DD 6E FE      [19] 2581 	ld	l, -2 (ix)
   0E29 26 00         [ 7] 2582 	ld	h, #0x00
   0E2B 29            [11] 2583 	add	hl, hl
   0E2C 19            [11] 2584 	add	hl, de
   0E2D 5E            [ 7] 2585 	ld	e, (hl)
   0E2E 23            [ 6] 2586 	inc	hl
   0E2F 56            [ 7] 2587 	ld	d, (hl)
   0E30 C5            [11] 2588 	push	bc
   0E31 D5            [11] 2589 	push	de
   0E32 21 03 0A      [10] 2590 	ld	hl, #0x0a03
   0E35 E5            [11] 2591 	push	hl
   0E36 C5            [11] 2592 	push	bc
   0E37 26 00         [ 7] 2593 	ld	h, #0x00
   0E39 E5            [11] 2594 	push	hl
   0E3A CDr00r00      [17] 2595 	call	_cpct_drawToSpriteBufferMasked
   0E3D C1            [10] 2596 	pop	bc
   0E3E                    2597 00104$:
                           2598 ;src/lib/video.c:595: if (mask & FLAG_V_BOLT)
   0E3E DD CB 06 56   [20] 2599 	bit	2, 6 (ix)
   0E42 28 1D         [12] 2600 	jr	Z,00106$
                           2601 ;src/lib/video.c:597: CELL_BUF_PW, spr, CELL_BUF_PW, CELL_BUF_PH, grid_fg_ts[bt + 2]);
   0E44 11r00r00      [10] 2602 	ld	de, #_grid_fg_ts+0
   0E47 DD 6E FF      [19] 2603 	ld	l, -1 (ix)
   0E4A 2C            [ 4] 2604 	inc	l
   0E4B 2C            [ 4] 2605 	inc	l
   0E4C 26 00         [ 7] 2606 	ld	h, #0x00
   0E4E 29            [11] 2607 	add	hl, hl
   0E4F 19            [11] 2608 	add	hl, de
   0E50 5E            [ 7] 2609 	ld	e, (hl)
   0E51 23            [ 6] 2610 	inc	hl
   0E52 56            [ 7] 2611 	ld	d, (hl)
   0E53 C5            [11] 2612 	push	bc
   0E54 D5            [11] 2613 	push	de
   0E55 21 03 0A      [10] 2614 	ld	hl, #0x0a03
   0E58 E5            [11] 2615 	push	hl
   0E59 C5            [11] 2616 	push	bc
   0E5A 26 00         [ 7] 2617 	ld	h, #0x00
   0E5C E5            [11] 2618 	push	hl
   0E5D CDr00r00      [17] 2619 	call	_cpct_drawToSpriteBufferMasked
   0E60 C1            [10] 2620 	pop	bc
   0E61                    2621 00106$:
                           2622 ;src/lib/video.c:598: if (mask & FLAG_H_BOLT)
   0E61 DD CB 06 5E   [20] 2623 	bit	3, 6 (ix)
   0E65 28 19         [12] 2624 	jr	Z,00109$
                           2625 ;src/lib/video.c:600: CELL_BUF_PW, spr, CELL_BUF_PW, CELL_BUF_PH, grid_fg_ts[bt]);
   0E67 11r00r00      [10] 2626 	ld	de, #_grid_fg_ts+0
   0E6A DD 6E FF      [19] 2627 	ld	l, -1 (ix)
   0E6D 26 00         [ 7] 2628 	ld	h, #0x00
   0E6F 29            [11] 2629 	add	hl, hl
   0E70 19            [11] 2630 	add	hl, de
   0E71 5E            [ 7] 2631 	ld	e, (hl)
   0E72 23            [ 6] 2632 	inc	hl
   0E73 56            [ 7] 2633 	ld	d, (hl)
   0E74 D5            [11] 2634 	push	de
   0E75 21 03 0A      [10] 2635 	ld	hl, #0x0a03
   0E78 E5            [11] 2636 	push	hl
   0E79 C5            [11] 2637 	push	bc
   0E7A 26 00         [ 7] 2638 	ld	h, #0x00
   0E7C E5            [11] 2639 	push	hl
   0E7D CDr00r00      [17] 2640 	call	_cpct_drawToSpriteBufferMasked
   0E80                    2641 00109$:
   0E80 DD F9         [10] 2642 	ld	sp, ix
   0E82 DD E1         [14] 2643 	pop	ix
   0E84 C9            [10] 2644 	ret
                           2645 ;src/lib/video.c:604: static void v_draw_grid_cell(const u8 x, const u8 y) {
                           2646 ;	---------------------------------
                           2647 ; Function v_draw_grid_cell
                           2648 ; ---------------------------------
   0E85                    2649 _v_draw_grid_cell:
   0E85 DD E5         [15] 2650 	push	ix
   0E87 DD 21 00 00   [14] 2651 	ld	ix,#0
   0E8B DD 39         [15] 2652 	add	ix,sp
                           2653 ;src/lib/video.c:610: idx = u_get_xy(x, y);
   0E8D DD 5E 05      [19] 2654 	ld	e, 5 (ix)
   0E90 16 00         [ 7] 2655 	ld	d, #0x00
   0E92 DD 4E 04      [19] 2656 	ld	c, 4 (ix)
   0E95 06 00         [ 7] 2657 	ld	b, #0x00
   0E97 D5            [11] 2658 	push	de
   0E98 C5            [11] 2659 	push	bc
   0E99 CDr00r00      [17] 2660 	call	_u_get_xy
   0E9C F1            [10] 2661 	pop	af
   0E9D F1            [10] 2662 	pop	af
   0E9E 4D            [ 4] 2663 	ld	c, l
   0E9F 44            [ 4] 2664 	ld	b, h
                           2665 ;src/lib/video.c:612: cell = g_level[idx];
   0EA0 21r00r00      [10] 2666 	ld	hl, #_g_level+0
   0EA3 09            [11] 2667 	add	hl, bc
   0EA4 7E            [ 7] 2668 	ld	a, (hl)
                           2669 ;src/lib/video.c:515: switch (value) {
   0EA5 FE 01         [ 7] 2670 	cp	a, #0x01
   0EA7 28 1E         [12] 2671 	jr	Z,00101$
   0EA9 FE 03         [ 7] 2672 	cp	a, #0x03
   0EAB 28 20         [12] 2673 	jr	Z,00102$
   0EAD FE 05         [ 7] 2674 	cp	a, #0x05
   0EAF 28 22         [12] 2675 	jr	Z,00103$
   0EB1 FE 07         [ 7] 2676 	cp	a, #0x07
   0EB3 28 30         [12] 2677 	jr	Z,00106$
   0EB5 FE 09         [ 7] 2678 	cp	a, #0x09
   0EB7 28 20         [12] 2679 	jr	Z,00104$
   0EB9 FE 0B         [ 7] 2680 	cp	a, #0x0b
   0EBB 28 2E         [12] 2681 	jr	Z,00107$
   0EBD FE 0D         [ 7] 2682 	cp	a, #0x0d
   0EBF 28 1E         [12] 2683 	jr	Z,00105$
   0EC1 D6 0F         [ 7] 2684 	sub	a, #0x0f
   0EC3 28 2C         [12] 2685 	jr	Z,00108$
   0EC5 18 30         [12] 2686 	jr	00109$
                           2687 ;src/lib/video.c:516: case FLAG_GRID:
   0EC7                    2688 00101$:
                           2689 ;src/lib/video.c:517: return v_cells[CELL_G];
   0EC7 ED 4Br0Cr00   [20] 2690 	ld	bc, (#_v_cells + 0)
   0ECB 18 2E         [12] 2691 	jr	00111$
                           2692 ;src/lib/video.c:519: case FLAG_GRID | FLAG_POD:
   0ECD                    2693 00102$:
                           2694 ;src/lib/video.c:520: return v_cells[CELL_G_P];
   0ECD ED 4Br0Er00   [20] 2695 	ld	bc, (#(_v_cells + 0x0002) + 0)
   0ED1 18 28         [12] 2696 	jr	00111$
                           2697 ;src/lib/video.c:522: case FLAG_GRID | FLAG_V_BOLT:
   0ED3                    2698 00103$:
                           2699 ;src/lib/video.c:523: return v_cells[CELL_G_V];
   0ED3 ED 4Br10r00   [20] 2700 	ld	bc, (#(_v_cells + 0x0004) + 0)
   0ED7 18 22         [12] 2701 	jr	00111$
                           2702 ;src/lib/video.c:525: case FLAG_GRID | FLAG_H_BOLT:
   0ED9                    2703 00104$:
                           2704 ;src/lib/video.c:526: return v_cells[CELL_G_H];
   0ED9 ED 4Br12r00   [20] 2705 	ld	bc, (#(_v_cells + 0x0006) + 0)
   0EDD 18 1C         [12] 2706 	jr	00111$
                           2707 ;src/lib/video.c:528: case FLAG_GRID | FLAG_V_BOLT | FLAG_H_BOLT:
   0EDF                    2708 00105$:
                           2709 ;src/lib/video.c:529: return v_cells[CELL_G_V_H];
   0EDF ED 4Br14r00   [20] 2710 	ld	bc, (#(_v_cells + 0x0008) + 0)
   0EE3 18 16         [12] 2711 	jr	00111$
                           2712 ;src/lib/video.c:531: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT:
   0EE5                    2713 00106$:
                           2714 ;src/lib/video.c:532: return v_cells[CELL_G_P_V];
   0EE5 ED 4Br16r00   [20] 2715 	ld	bc, (#(_v_cells + 0x000a) + 0)
   0EE9 18 10         [12] 2716 	jr	00111$
                           2717 ;src/lib/video.c:534: case FLAG_GRID | FLAG_POD | FLAG_H_BOLT:
   0EEB                    2718 00107$:
                           2719 ;src/lib/video.c:535: return v_cells[CELL_G_P_H];
   0EEB ED 4Br18r00   [20] 2720 	ld	bc, (#(_v_cells + 0x000c) + 0)
   0EEF 18 0A         [12] 2721 	jr	00111$
                           2722 ;src/lib/video.c:537: case FLAG_GRID | FLAG_POD | FLAG_V_BOLT | FLAG_H_BOLT:
   0EF1                    2723 00108$:
                           2724 ;src/lib/video.c:538: return v_cells[CELL_G_P_V_H];
   0EF1 ED 4Br1Ar00   [20] 2725 	ld	bc, (#(_v_cells + 0x000e) + 0)
   0EF5 18 04         [12] 2726 	jr	00111$
                           2727 ;src/lib/video.c:540: default:
   0EF7                    2728 00109$:
                           2729 ;src/lib/video.c:541: return v_cells[CELL_G];
   0EF7 ED 4Br0Cr00   [20] 2730 	ld	bc, (#_v_cells + 0)
                           2731 ;src/lib/video.c:613: spr = v_get_sprite_p(cell);
   0EFB                    2732 00111$:
                           2733 ;src/lib/video.c:615: px = x * GRID_P_W;
   0EFB DD 5E 04      [19] 2734 	ld	e,4 (ix)
   0EFE 16 00         [ 7] 2735 	ld	d,#0x00
   0F00 6B            [ 4] 2736 	ld	l, e
   0F01 62            [ 4] 2737 	ld	h, d
   0F02 29            [11] 2738 	add	hl, hl
   0F03 19            [11] 2739 	add	hl, de
                           2740 ;src/lib/video.c:616: py = y * GRID_P_H;
   0F04 E5            [11] 2741 	push	hl
   0F05 DD 5E 05      [19] 2742 	ld	e,5 (ix)
   0F08 16 00         [ 7] 2743 	ld	d,#0x00
   0F0A 6B            [ 4] 2744 	ld	l, e
   0F0B 62            [ 4] 2745 	ld	h, d
   0F0C 29            [11] 2746 	add	hl, hl
   0F0D 29            [11] 2747 	add	hl, hl
   0F0E 19            [11] 2748 	add	hl, de
   0F0F 29            [11] 2749 	add	hl, hl
   0F10 D1            [10] 2750 	pop	de
                           2751 ;src/lib/video.c:619: v_pos = v_get_pos(GRID_LOC_X + px, GRID_LOC_Y + py);
   0F11 7D            [ 4] 2752 	ld	a, l
   0F12 C6 12         [ 7] 2753 	add	a, #0x12
   0F14 67            [ 4] 2754 	ld	h, a
   0F15 53            [ 4] 2755 	ld	d, e
   0F16 14            [ 4] 2756 	inc	d
   0F17 14            [ 4] 2757 	inc	d
                           2758 ;src/lib/video.c:217: return cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0F18 C5            [11] 2759 	push	bc
   0F19 6A            [ 4] 2760 	ld	l, d
   0F1A E5            [11] 2761 	push	hl
   0F1B 21 00 C0      [10] 2762 	ld	hl, #0xc000
   0F1E E5            [11] 2763 	push	hl
   0F1F CDr00r00      [17] 2764 	call	_cpct_getScreenPtr
   0F22 C1            [10] 2765 	pop	bc
                           2766 ;src/lib/video.c:619: v_pos = v_get_pos(GRID_LOC_X + px, GRID_LOC_Y + py);
                           2767 ;src/lib/video.c:620: cpct_drawSprite(spr, v_pos, GRID_P_W, GRID_P_H);
   0F23 11 03 0A      [10] 2768 	ld	de, #0x0a03
   0F26 D5            [11] 2769 	push	de
   0F27 E5            [11] 2770 	push	hl
   0F28 C5            [11] 2771 	push	bc
   0F29 CDr00r00      [17] 2772 	call	_cpct_drawSprite
   0F2C DD E1         [14] 2773 	pop	ix
   0F2E C9            [10] 2774 	ret
                           2775 ;src/lib/video.c:624: void v_draw_grid(void) {
                           2776 ;	---------------------------------
                           2777 ; Function v_draw_grid
                           2778 ; ---------------------------------
   0F2F                    2779 _v_draw_grid::
                           2780 ;src/lib/video.c:627: for (int x = 0; x < GRID_U_W; x++) {
   0F2F 01 00 00      [10] 2781 	ld	bc, #0x0000
   0F32                    2782 00107$:
   0F32 79            [ 4] 2783 	ld	a, c
   0F33 D6 19         [ 7] 2784 	sub	a, #0x19
   0F35 78            [ 4] 2785 	ld	a, b
   0F36 17            [ 4] 2786 	rla
   0F37 3F            [ 4] 2787 	ccf
   0F38 1F            [ 4] 2788 	rra
   0F39 DE 80         [ 7] 2789 	sbc	a, #0x80
   0F3B D0            [11] 2790 	ret	NC
                           2791 ;src/lib/video.c:628: for (int y = 0; y < GRID_U_H; y++) {
   0F3C 11 00 00      [10] 2792 	ld	de, #0x0000
   0F3F                    2793 00104$:
   0F3F 7B            [ 4] 2794 	ld	a, e
   0F40 D6 11         [ 7] 2795 	sub	a, #0x11
   0F42 7A            [ 4] 2796 	ld	a, d
   0F43 17            [ 4] 2797 	rla
   0F44 3F            [ 4] 2798 	ccf
   0F45 1F            [ 4] 2799 	rra
   0F46 DE 80         [ 7] 2800 	sbc	a, #0x80
   0F48 30 11         [12] 2801 	jr	NC,00108$
                           2802 ;src/lib/video.c:629: v_draw_grid_cell(x, y);
   0F4A 63            [ 4] 2803 	ld	h, e
   0F4B 79            [ 4] 2804 	ld	a, c
   0F4C C5            [11] 2805 	push	bc
   0F4D D5            [11] 2806 	push	de
   0F4E E5            [11] 2807 	push	hl
   0F4F 33            [ 6] 2808 	inc	sp
   0F50 F5            [11] 2809 	push	af
   0F51 33            [ 6] 2810 	inc	sp
   0F52 CDr85r0E      [17] 2811 	call	_v_draw_grid_cell
   0F55 F1            [10] 2812 	pop	af
   0F56 D1            [10] 2813 	pop	de
   0F57 C1            [10] 2814 	pop	bc
                           2815 ;src/lib/video.c:628: for (int y = 0; y < GRID_U_H; y++) {
   0F58 13            [ 6] 2816 	inc	de
   0F59 18 E4         [12] 2817 	jr	00104$
   0F5B                    2818 00108$:
                           2819 ;src/lib/video.c:627: for (int x = 0; x < GRID_U_W; x++) {
   0F5B 03            [ 6] 2820 	inc	bc
   0F5C 18 D4         [12] 2821 	jr	00107$
                           2822 	.area _CODE
                           2823 	.area _INITIALIZER
   0000                    2824 __xinit__v_int_idx:
   0000 00                 2825 	.db #0x00	; 0
   0001                    2826 __xinit__v_pal_idx:
   0001 00                 2827 	.db #0x00	; 0
   0002                    2828 __xinit__v_frame_c:
   0002 00                 2829 	.db #0x00	; 0
   0003                    2830 __xinit__v_cycle_c:
   0003 00 00              2831 	.dw #0x0000
                           2832 	.area _CABS (ABS)
