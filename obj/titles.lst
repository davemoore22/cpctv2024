                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module titles
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _v_reset_timers
                             12 	.globl _v_interrupt
                             13 	.globl _v_draw_logo
                             14 	.globl _v_print
                             15 	.globl _v_print_c
                             16 	.globl _v_wipe_scr
                             17 	.globl _v_clr_scr
                             18 	.globl _v_reset_pal
                             19 	.globl _v_blk_scr
                             20 	.globl _StopMusic
                             21 	.globl _PlayMusic
                             22 	.globl _cpct_isKeyPressed
                             23 	.globl _cpct_removeInterruptHandler
                             24 	.globl _cpct_setInterruptHandler
                             25 	.globl _t_in_titles
                             26 	.globl _t_start
                             27 	.globl _t_stop
                             28 ;--------------------------------------------------------
                             29 ; special function registers
                             30 ;--------------------------------------------------------
                             31 ;--------------------------------------------------------
                             32 ; ram data
                             33 ;--------------------------------------------------------
                             34 	.area _DATA
   0000                      35 _t_in_titles::
   0000                      36 	.ds 1
                             37 ;--------------------------------------------------------
                             38 ; ram data
                             39 ;--------------------------------------------------------
                             40 	.area _INITIALIZED
   0000                      41 _int_idx:
   0000                      42 	.ds 1
   0001                      43 _pal_idx:
   0001                      44 	.ds 1
   0002                      45 _frame_c:
   0002                      46 	.ds 2
                             47 ;--------------------------------------------------------
                             48 ; absolute external ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DABS (ABS)
                             51 ;--------------------------------------------------------
                             52 ; global & static initialisations
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _GSINIT
                             56 	.area _GSFINAL
                             57 	.area _GSINIT
                             58 ;--------------------------------------------------------
                             59 ; Home
                             60 ;--------------------------------------------------------
                             61 	.area _HOME
                             62 	.area _HOME
                             63 ;--------------------------------------------------------
                             64 ; code
                             65 ;--------------------------------------------------------
                             66 	.area _CODE
                             67 ;src/titles.c:37: cpct_keyID t_start(bool skip) {
                             68 ;	---------------------------------
                             69 ; Function t_start
                             70 ; ---------------------------------
   0000                      71 _t_start::
   0000 F5            [11]   72 	push	af
                             73 ;src/titles.c:40: u16 count = 0;
   0001 21 00 00      [10]   74 	ld	hl, #0x0000
   0004 E3            [19]   75 	ex	(sp), hl
                             76 ;src/titles.c:43: v_blk_scr();
   0005 CDr00r00      [17]   77 	call	_v_blk_scr
                             78 ;src/titles.c:44: v_clr_scr();
   0008 CDr00r00      [17]   79 	call	_v_clr_scr
                             80 ;src/titles.c:46: t_in_titles = true;
   000B 21r00r00      [10]   81 	ld	hl,#_t_in_titles + 0
   000E 36 01         [10]   82 	ld	(hl), #0x01
                             83 ;src/titles.c:49: PlayMusic(0);
   0010 AF            [ 4]   84 	xor	a, a
   0011 F5            [11]   85 	push	af
   0012 33            [ 6]   86 	inc	sp
   0013 CDr00r00      [17]   87 	call	_PlayMusic
   0016 33            [ 6]   88 	inc	sp
                             89 ;src/titles.c:52: if (!skip) {
   0017 21 04 00      [10]   90 	ld	hl, #4+0
   001A 39            [11]   91 	add	hl, sp
   001B CB 46         [12]   92 	bit	0, (hl)
   001D C2rDCr00      [10]   93 	jp	NZ, 00128$
                             94 ;src/titles.c:54: v_draw_logo();
   0020 CDr00r00      [17]   95 	call	_v_draw_logo
                             96 ;src/titles.c:55: t_draw_titles();
   0023 CDr05r01      [17]   97 	call	_t_draw_titles
                             98 ;src/titles.c:56: t_draw_menu();
   0026 CDr90r01      [17]   99 	call	_t_draw_menu
                            100 ;src/titles.c:57: v_reset_pal();
   0029 CDr00r00      [17]  101 	call	_v_reset_pal
                            102 ;src/titles.c:60: v_reset_timers();
   002C CDr00r00      [17]  103 	call	_v_reset_timers
                            104 ;src/titles.c:61: cpct_setInterruptHandler(v_interrupt);
   002F 21r00r00      [10]  105 	ld	hl, #_v_interrupt
   0032 CDr00r00      [17]  106 	call	_cpct_setInterruptHandler
                            107 ;src/titles.c:67: while (1) {
   0035                     108 00125$:
                            109 ;src/titles.c:68: ++count;
   0035 FD 21 00 00   [14]  110 	ld	iy, #0
   0039 FD 39         [15]  111 	add	iy, sp
   003B FD 34 00      [23]  112 	inc	0 (iy)
   003E 20 03         [12]  113 	jr	NZ,00176$
   0040 FD 34 01      [23]  114 	inc	1 (iy)
   0043                     115 00176$:
                            116 ;src/titles.c:71: if (count % 200 == 0) {
   0043 21 C8 00      [10]  117 	ld	hl, #0x00c8
   0046 4D            [ 4]  118 	ld	c, l
   0047 44            [ 4]  119 	ld	b, h
   0048 E1            [10]  120 	pop	hl
   0049 E5            [11]  121 	push	hl
   004A C5            [11]  122 	push	bc
   004B E5            [11]  123 	push	hl
   004C CDr00r00      [17]  124 	call	__moduint
   004F F1            [10]  125 	pop	af
   0050 F1            [10]  126 	pop	af
   0051 7C            [ 4]  127 	ld	a, h
   0052 B5            [ 4]  128 	or	a,l
   0053 20 6D         [12]  129 	jr	NZ,00121$
                            130 ;src/titles.c:72: if (cpct_isKeyPressed(Key_0)) {
   0055 21 04 01      [10]  131 	ld	hl, #0x0104
   0058 CDr00r00      [17]  132 	call	_cpct_isKeyPressed
   005B 7D            [ 4]  133 	ld	a, l
   005C B7            [ 4]  134 	or	a, a
   005D 28 06         [12]  135 	jr	Z,00118$
                            136 ;src/titles.c:75: return Key_0;
   005F 21 04 01      [10]  137 	ld	hl, #0x0104
   0062 C3rDFr00      [10]  138 	jp	00130$
   0065                     139 00118$:
                            140 ;src/titles.c:77: } else if (cpct_isKeyPressed(Key_1)) {
   0065 21 08 01      [10]  141 	ld	hl, #0x0108
   0068 CDr00r00      [17]  142 	call	_cpct_isKeyPressed
   006B 7D            [ 4]  143 	ld	a, l
   006C B7            [ 4]  144 	or	a, a
   006D 28 05         [12]  145 	jr	Z,00115$
                            146 ;src/titles.c:80: return Key_1;
   006F 21 08 01      [10]  147 	ld	hl, #0x0108
   0072 18 6B         [12]  148 	jr	00130$
   0074                     149 00115$:
                            150 ;src/titles.c:82: } else if (cpct_isKeyPressed(Key_2)) {
   0074 21 08 02      [10]  151 	ld	hl, #0x0208
   0077 CDr00r00      [17]  152 	call	_cpct_isKeyPressed
   007A 7D            [ 4]  153 	ld	a, l
   007B B7            [ 4]  154 	or	a, a
   007C 28 17         [12]  155 	jr	Z,00112$
                            156 ;src/titles.c:85: g_music_sfx = !g_music_sfx;
   007E FD 21r00r00   [14]  157 	ld	iy, #_g_music_sfx
   0082 FD 7E 00      [19]  158 	ld	a, 0 (iy)
   0085 EE 01         [ 7]  159 	xor	a, #0x01
   0087 FD 77 00      [19]  160 	ld	0 (iy), a
                            161 ;src/titles.c:86: if (!g_music_sfx)
   008A FD CB 00 46   [20]  162 	bit	0, 0 (iy)
   008E 20 32         [12]  163 	jr	NZ,00121$
                            164 ;src/titles.c:87: StopMusic();
   0090 CDr00r00      [17]  165 	call	_StopMusic
   0093 18 2D         [12]  166 	jr	00121$
   0095                     167 00112$:
                            168 ;src/titles.c:89: } else if (cpct_isKeyPressed(Key_3)) {
   0095 21 07 02      [10]  169 	ld	hl, #0x0207
   0098 CDr00r00      [17]  170 	call	_cpct_isKeyPressed
   009B 7D            [ 4]  171 	ld	a, l
   009C B7            [ 4]  172 	or	a, a
   009D 28 05         [12]  173 	jr	Z,00109$
                            174 ;src/titles.c:92: return Key_3;
   009F 21 07 02      [10]  175 	ld	hl, #0x0207
   00A2 18 3B         [12]  176 	jr	00130$
   00A4                     177 00109$:
                            178 ;src/titles.c:94: } else if (cpct_isKeyPressed(Key_4)) {
   00A4 21 07 01      [10]  179 	ld	hl, #0x0107
   00A7 CDr00r00      [17]  180 	call	_cpct_isKeyPressed
   00AA 7D            [ 4]  181 	ld	a, l
   00AB B7            [ 4]  182 	or	a, a
   00AC 28 05         [12]  183 	jr	Z,00106$
                            184 ;src/titles.c:97: return Key_4;
   00AE 21 07 01      [10]  185 	ld	hl, #0x0107
   00B1 18 2C         [12]  186 	jr	00130$
   00B3                     187 00106$:
                            188 ;src/titles.c:99: } else if (cpct_isKeyPressed(Key_9)) {
   00B3 21 04 02      [10]  189 	ld	hl, #0x0204
   00B6 CDr00r00      [17]  190 	call	_cpct_isKeyPressed
   00B9 7D            [ 4]  191 	ld	a, l
   00BA B7            [ 4]  192 	or	a, a
   00BB 28 05         [12]  193 	jr	Z,00121$
                            194 ;src/titles.c:102: return Key_9;
   00BD 21 04 02      [10]  195 	ld	hl, #0x0204
   00C0 18 1D         [12]  196 	jr	00130$
   00C2                     197 00121$:
                            198 ;src/titles.c:106: if (count > 30002)
   00C2 3E 32         [ 7]  199 	ld	a, #0x32
   00C4 FD 21 00 00   [14]  200 	ld	iy, #0
   00C8 FD 39         [15]  201 	add	iy, sp
   00CA FD BE 00      [19]  202 	cp	a, 0 (iy)
   00CD 3E 75         [ 7]  203 	ld	a, #0x75
   00CF FD 9E 01      [19]  204 	sbc	a, 1 (iy)
   00D2 D2r35r00      [10]  205 	jp	NC, 00125$
                            206 ;src/titles.c:107: count = 0;
   00D5 21 00 00      [10]  207 	ld	hl, #0x0000
   00D8 E3            [19]  208 	ex	(sp), hl
   00D9 C3r35r00      [10]  209 	jp	00125$
   00DC                     210 00128$:
                            211 ;src/titles.c:112: return Key_9;
   00DC 21 04 02      [10]  212 	ld	hl, #0x0204
   00DF                     213 00130$:
   00DF F1            [10]  214 	pop	af
   00E0 C9            [10]  215 	ret
   00E1                     216 _text_loc:
   00E1 01                  217 	.db #0x01	; 1
   00E2 08                  218 	.db #0x08	; 8
   00E3                     219 _blurb_loc:
   00E3 01                  220 	.db #0x01	; 1
   00E4 19                  221 	.db #0x19	; 25
   00E5                     222 _menu_loc:
   00E5 0E                  223 	.db #0x0e	; 14
   00E6 0C                  224 	.db #0x0c	; 12
   00E7                     225 _menu_key_x:
   00E7 15                  226 	.db #0x15	; 21
   00E8                     227 _menu_name_x:
   00E8 1A                  228 	.db #0x1a	; 26
                            229 ;src/titles.c:117: void t_stop(void) {
                            230 ;	---------------------------------
                            231 ; Function t_stop
                            232 ; ---------------------------------
   00E9                     233 _t_stop::
                            234 ;src/titles.c:119: v_wipe_scr(true);
   00E9 3E 01         [ 7]  235 	ld	a, #0x01
   00EB F5            [11]  236 	push	af
   00EC 33            [ 6]  237 	inc	sp
   00ED CDr00r00      [17]  238 	call	_v_wipe_scr
   00F0 33            [ 6]  239 	inc	sp
                            240 ;src/titles.c:120: v_blk_scr();
   00F1 CDr00r00      [17]  241 	call	_v_blk_scr
                            242 ;src/titles.c:121: v_clr_scr();
   00F4 CDr00r00      [17]  243 	call	_v_clr_scr
                            244 ;src/titles.c:122: cpct_removeInterruptHandler();
   00F7 CDr00r00      [17]  245 	call	_cpct_removeInterruptHandler
                            246 ;src/titles.c:123: StopMusic();
   00FA CDr00r00      [17]  247 	call	_StopMusic
                            248 ;src/titles.c:124: t_in_titles = false;
   00FD 21r00r00      [10]  249 	ld	hl,#_t_in_titles + 0
   0100 36 00         [10]  250 	ld	(hl), #0x00
                            251 ;src/titles.c:125: v_reset_timers();
   0102 C3r00r00      [10]  252 	jp  _v_reset_timers
                            253 ;src/titles.c:129: static void t_draw_titles(void) {
                            254 ;	---------------------------------
                            255 ; Function t_draw_titles
                            256 ; ---------------------------------
   0105                     257 _t_draw_titles:
                            258 ;src/titles.c:131: u8 y = LINE_P_H * text_loc.y;
   0105 3ArE2r00      [13]  259 	ld	a, (#(_text_loc + 0x0001) + 0)
   0108 4F            [ 4]  260 	ld	c, a
   0109 87            [ 4]  261 	add	a, a
   010A 81            [ 4]  262 	add	a, c
   010B 87            [ 4]  263 	add	a, a
   010C 47            [ 4]  264 	ld	b, a
                            265 ;src/titles.c:132: v_print_c(g_strings[0], y, FONT_RED);
   010D ED 5Br00r00   [20]  266 	ld	de, (#_g_strings + 0)
   0111 C5            [11]  267 	push	bc
   0112 AF            [ 4]  268 	xor	a, a
   0113 F5            [11]  269 	push	af
   0114 33            [ 6]  270 	inc	sp
   0115 C5            [11]  271 	push	bc
   0116 33            [ 6]  272 	inc	sp
   0117 D5            [11]  273 	push	de
   0118 CDr00r00      [17]  274 	call	_v_print_c
   011B F1            [10]  275 	pop	af
   011C F1            [10]  276 	pop	af
   011D C1            [10]  277 	pop	bc
                            278 ;src/titles.c:133: y = y + (LINE_P_H) + 2;
   011E 78            [ 4]  279 	ld	a, b
   011F C6 08         [ 7]  280 	add	a, #0x08
   0121 57            [ 4]  281 	ld	d, a
                            282 ;src/titles.c:134: v_print_c(g_strings[1], y, FONT_WHITE);
   0122 ED 4Br02r00   [20]  283 	ld	bc, (#_g_strings + 2)
   0126 3E 02         [ 7]  284 	ld	a, #0x02
   0128 F5            [11]  285 	push	af
   0129 33            [ 6]  286 	inc	sp
   012A D5            [11]  287 	push	de
   012B 33            [ 6]  288 	inc	sp
   012C C5            [11]  289 	push	bc
   012D CDr00r00      [17]  290 	call	_v_print_c
   0130 F1            [10]  291 	pop	af
   0131 F1            [10]  292 	pop	af
                            293 ;src/titles.c:135: y = LINE_P_H * blurb_loc.y;
   0132 3ArE4r00      [13]  294 	ld	a, (#(_blurb_loc + 0x0001) + 0)
   0135 4F            [ 4]  295 	ld	c, a
   0136 87            [ 4]  296 	add	a, a
   0137 81            [ 4]  297 	add	a, c
   0138 87            [ 4]  298 	add	a, a
   0139 47            [ 4]  299 	ld	b, a
                            300 ;src/titles.c:136: v_print_c(g_strings[2], y, FONT_RED);
   013A ED 5Br04r00   [20]  301 	ld	de, (#_g_strings + 4)
   013E C5            [11]  302 	push	bc
   013F AF            [ 4]  303 	xor	a, a
   0140 F5            [11]  304 	push	af
   0141 33            [ 6]  305 	inc	sp
   0142 C5            [11]  306 	push	bc
   0143 33            [ 6]  307 	inc	sp
   0144 D5            [11]  308 	push	de
   0145 CDr00r00      [17]  309 	call	_v_print_c
   0148 F1            [10]  310 	pop	af
   0149 F1            [10]  311 	pop	af
   014A C1            [10]  312 	pop	bc
                            313 ;src/titles.c:137: y = y + (LINE_P_H) + 2;
   014B 78            [ 4]  314 	ld	a, b
   014C C6 08         [ 7]  315 	add	a, #0x08
   014E 47            [ 4]  316 	ld	b, a
                            317 ;src/titles.c:138: v_print_c(g_strings[3], y, FONT_WHITE);
   014F ED 5Br06r00   [20]  318 	ld	de, (#_g_strings + 6)
   0153 C5            [11]  319 	push	bc
   0154 3E 02         [ 7]  320 	ld	a, #0x02
   0156 F5            [11]  321 	push	af
   0157 33            [ 6]  322 	inc	sp
   0158 C5            [11]  323 	push	bc
   0159 33            [ 6]  324 	inc	sp
   015A D5            [11]  325 	push	de
   015B CDr00r00      [17]  326 	call	_v_print_c
   015E F1            [10]  327 	pop	af
   015F F1            [10]  328 	pop	af
   0160 C1            [10]  329 	pop	bc
                            330 ;src/titles.c:139: y = y + (LINE_P_H) + 2;
   0161 78            [ 4]  331 	ld	a, b
   0162 C6 08         [ 7]  332 	add	a, #0x08
   0164 57            [ 4]  333 	ld	d, a
                            334 ;src/titles.c:140: v_print_c(g_strings[4], y, FONT_WHITE);
   0165 ED 4Br08r00   [20]  335 	ld	bc, (#_g_strings + 8)
   0169 3E 02         [ 7]  336 	ld	a, #0x02
   016B F5            [11]  337 	push	af
   016C 33            [ 6]  338 	inc	sp
   016D D5            [11]  339 	push	de
   016E 33            [ 6]  340 	inc	sp
   016F C5            [11]  341 	push	bc
   0170 CDr00r00      [17]  342 	call	_v_print_c
   0173 F1            [10]  343 	pop	af
   0174 F1            [10]  344 	pop	af
                            345 ;src/titles.c:142: v_print_c(g_strings[5], y, FONT_RED);
   0175 2Ar0Ar00      [16]  346 	ld	hl, (#_g_strings + 10)
   0178 01 B4 00      [10]  347 	ld	bc, #0x00b4
   017B C5            [11]  348 	push	bc
   017C E5            [11]  349 	push	hl
   017D CDr00r00      [17]  350 	call	_v_print_c
   0180 F1            [10]  351 	pop	af
   0181 F1            [10]  352 	pop	af
                            353 ;src/titles.c:144: v_print_c(g_strings[6], y, FONT_WHITE);
   0182 2Ar0Cr00      [16]  354 	ld	hl, (#_g_strings + 12)
   0185 01 BC 02      [10]  355 	ld	bc, #0x02bc
   0188 C5            [11]  356 	push	bc
   0189 E5            [11]  357 	push	hl
   018A CDr00r00      [17]  358 	call	_v_print_c
   018D F1            [10]  359 	pop	af
   018E F1            [10]  360 	pop	af
   018F C9            [10]  361 	ret
                            362 ;src/titles.c:148: static void t_draw_menu(void) {
                            363 ;	---------------------------------
                            364 ; Function t_draw_menu
                            365 ; ---------------------------------
   0190                     366 _t_draw_menu:
   0190 DD E5         [15]  367 	push	ix
   0192 DD 21 00 00   [14]  368 	ld	ix,#0
   0196 DD 39         [15]  369 	add	ix,sp
   0198 F5            [11]  370 	push	af
   0199 F5            [11]  371 	push	af
                            372 ;src/titles.c:150: int ly = menu_loc.y;
   019A 3ArE6r00      [13]  373 	ld	a, (#(_menu_loc + 0x0001) + 0)
   019D DD 77 FE      [19]  374 	ld	-2 (ix), a
   01A0 DD 36 FF 00   [19]  375 	ld	-1 (ix), #0x00
                            376 ;src/titles.c:154: t_draw_opt(g_strings[10], g_strings[16], ly);
   01A4 DD 5E FE      [19]  377 	ld	e, -2 (ix)
   01A7 ED 4Br20r00   [20]  378 	ld	bc, (#_g_strings + 32)
   01AB 2Ar14r00      [16]  379 	ld	hl, (#_g_strings + 20)
   01AE 7B            [ 4]  380 	ld	a, e
   01AF F5            [11]  381 	push	af
   01B0 33            [ 6]  382 	inc	sp
   01B1 C5            [11]  383 	push	bc
   01B2 E5            [11]  384 	push	hl
   01B3 CDr4Er02      [17]  385 	call	_t_draw_opt
   01B6 F1            [10]  386 	pop	af
   01B7 F1            [10]  387 	pop	af
   01B8 33            [ 6]  388 	inc	sp
                            389 ;src/titles.c:155: t_draw_opt(g_strings[11], g_strings[17], ly += 2);
   01B9 DD 5E FE      [19]  390 	ld	e,-2 (ix)
   01BC DD 56 FF      [19]  391 	ld	d,-1 (ix)
   01BF 13            [ 6]  392 	inc	de
   01C0 13            [ 6]  393 	inc	de
   01C1 DD 73 FE      [19]  394 	ld	-2 (ix), e
   01C4 DD 72 FF      [19]  395 	ld	-1 (ix), d
   01C7 ED 4Br22r00   [20]  396 	ld	bc, (#_g_strings + 34)
   01CB 2Ar16r00      [16]  397 	ld	hl, (#_g_strings + 22)
   01CE 7B            [ 4]  398 	ld	a, e
   01CF F5            [11]  399 	push	af
   01D0 33            [ 6]  400 	inc	sp
   01D1 C5            [11]  401 	push	bc
   01D2 E5            [11]  402 	push	hl
   01D3 CDr4Er02      [17]  403 	call	_t_draw_opt
   01D6 F1            [10]  404 	pop	af
   01D7 F1            [10]  405 	pop	af
   01D8 33            [ 6]  406 	inc	sp
                            407 ;src/titles.c:156: t_draw_opt(g_strings[12], g_strings[18], ly += 2);
   01D9 DD 5E FE      [19]  408 	ld	e,-2 (ix)
   01DC DD 56 FF      [19]  409 	ld	d,-1 (ix)
   01DF 13            [ 6]  410 	inc	de
   01E0 13            [ 6]  411 	inc	de
   01E1 33            [ 6]  412 	inc	sp
   01E2 33            [ 6]  413 	inc	sp
   01E3 D5            [11]  414 	push	de
   01E4 ED 4Br24r00   [20]  415 	ld	bc, (#_g_strings + 36)
   01E8 2Ar18r00      [16]  416 	ld	hl, (#_g_strings + 24)
   01EB 7B            [ 4]  417 	ld	a, e
   01EC F5            [11]  418 	push	af
   01ED 33            [ 6]  419 	inc	sp
   01EE C5            [11]  420 	push	bc
   01EF E5            [11]  421 	push	hl
   01F0 CDr4Er02      [17]  422 	call	_t_draw_opt
   01F3 F1            [10]  423 	pop	af
   01F4 F1            [10]  424 	pop	af
   01F5 33            [ 6]  425 	inc	sp
                            426 ;src/titles.c:157: t_draw_opt(g_strings[13], g_strings[19], ly += 2);
   01F6 D1            [10]  427 	pop	de
   01F7 D5            [11]  428 	push	de
   01F8 13            [ 6]  429 	inc	de
   01F9 13            [ 6]  430 	inc	de
   01FA DD 73 FE      [19]  431 	ld	-2 (ix), e
   01FD DD 72 FF      [19]  432 	ld	-1 (ix), d
   0200 ED 4Br26r00   [20]  433 	ld	bc, (#_g_strings + 38)
   0204 2Ar1Ar00      [16]  434 	ld	hl, (#_g_strings + 26)
   0207 7B            [ 4]  435 	ld	a, e
   0208 F5            [11]  436 	push	af
   0209 33            [ 6]  437 	inc	sp
   020A C5            [11]  438 	push	bc
   020B E5            [11]  439 	push	hl
   020C CDr4Er02      [17]  440 	call	_t_draw_opt
   020F F1            [10]  441 	pop	af
   0210 F1            [10]  442 	pop	af
   0211 33            [ 6]  443 	inc	sp
                            444 ;src/titles.c:158: t_draw_opt(g_strings[14], g_strings[20], ly += 2);
   0212 DD 5E FE      [19]  445 	ld	e,-2 (ix)
   0215 DD 56 FF      [19]  446 	ld	d,-1 (ix)
   0218 13            [ 6]  447 	inc	de
   0219 13            [ 6]  448 	inc	de
   021A DD 73 FE      [19]  449 	ld	-2 (ix), e
   021D DD 72 FF      [19]  450 	ld	-1 (ix), d
   0220 ED 4Br28r00   [20]  451 	ld	bc, (#_g_strings + 40)
   0224 2Ar1Cr00      [16]  452 	ld	hl, (#_g_strings + 28)
   0227 7B            [ 4]  453 	ld	a, e
   0228 F5            [11]  454 	push	af
   0229 33            [ 6]  455 	inc	sp
   022A C5            [11]  456 	push	bc
   022B E5            [11]  457 	push	hl
   022C CDr4Er02      [17]  458 	call	_t_draw_opt
   022F F1            [10]  459 	pop	af
   0230 F1            [10]  460 	pop	af
   0231 33            [ 6]  461 	inc	sp
                            462 ;src/titles.c:159: t_draw_opt(g_strings[15], g_strings[21], ly += 2);
   0232 DD 5E FE      [19]  463 	ld	e,-2 (ix)
   0235 DD 56 FF      [19]  464 	ld	d,-1 (ix)
   0238 13            [ 6]  465 	inc	de
   0239 13            [ 6]  466 	inc	de
   023A ED 4Br2Ar00   [20]  467 	ld	bc, (#_g_strings + 42)
   023E 2Ar1Er00      [16]  468 	ld	hl, (#_g_strings + 30)
   0241 7B            [ 4]  469 	ld	a, e
   0242 F5            [11]  470 	push	af
   0243 33            [ 6]  471 	inc	sp
   0244 C5            [11]  472 	push	bc
   0245 E5            [11]  473 	push	hl
   0246 CDr4Er02      [17]  474 	call	_t_draw_opt
   0249 DD F9         [10]  475 	ld	sp,ix
   024B DD E1         [14]  476 	pop	ix
   024D C9            [10]  477 	ret
                            478 ;src/titles.c:163: static void t_draw_opt(const char *key, const char *str, const u8 y) {
                            479 ;	---------------------------------
                            480 ; Function t_draw_opt
                            481 ; ---------------------------------
   024E                     482 _t_draw_opt:
                            483 ;src/titles.c:166: v_print(key, menu_key_x, y * LINE_P_H, FONT_RED);
   024E 21 06 00      [10]  484 	ld	hl, #6+0
   0251 39            [11]  485 	add	hl, sp
   0252 7E            [ 7]  486 	ld	a, (hl)
   0253 4F            [ 4]  487 	ld	c, a
   0254 87            [ 4]  488 	add	a, a
   0255 81            [ 4]  489 	add	a, c
   0256 87            [ 4]  490 	add	a, a
   0257 57            [ 4]  491 	ld	d, a
   0258 21rE7r00      [10]  492 	ld	hl,#_menu_key_x + 0
   025B 46            [ 7]  493 	ld	b, (hl)
   025C D5            [11]  494 	push	de
   025D AF            [ 4]  495 	xor	a, a
   025E F5            [11]  496 	push	af
   025F 33            [ 6]  497 	inc	sp
   0260 58            [ 4]  498 	ld	e, b
   0261 D5            [11]  499 	push	de
   0262 21 07 00      [10]  500 	ld	hl, #7
   0265 39            [11]  501 	add	hl, sp
   0266 4E            [ 7]  502 	ld	c, (hl)
   0267 23            [ 6]  503 	inc	hl
   0268 46            [ 7]  504 	ld	b, (hl)
   0269 C5            [11]  505 	push	bc
   026A CDr00r00      [17]  506 	call	_v_print
   026D F1            [10]  507 	pop	af
   026E F1            [10]  508 	pop	af
   026F 33            [ 6]  509 	inc	sp
   0270 D1            [10]  510 	pop	de
                            511 ;src/titles.c:167: v_print(str, menu_name_x, y * LINE_P_H, FONT_BLUE);
   0271 21rE8r00      [10]  512 	ld	hl,#_menu_name_x + 0
   0274 46            [ 7]  513 	ld	b, (hl)
   0275 3E 01         [ 7]  514 	ld	a, #0x01
   0277 F5            [11]  515 	push	af
   0278 33            [ 6]  516 	inc	sp
   0279 58            [ 4]  517 	ld	e, b
   027A D5            [11]  518 	push	de
   027B 21 07 00      [10]  519 	ld	hl, #7
   027E 39            [11]  520 	add	hl, sp
   027F 4E            [ 7]  521 	ld	c, (hl)
   0280 23            [ 6]  522 	inc	hl
   0281 46            [ 7]  523 	ld	b, (hl)
   0282 C5            [11]  524 	push	bc
   0283 CDr00r00      [17]  525 	call	_v_print
   0286 F1            [10]  526 	pop	af
   0287 F1            [10]  527 	pop	af
   0288 33            [ 6]  528 	inc	sp
   0289 C9            [10]  529 	ret
                            530 	.area _CODE
                            531 	.area _INITIALIZER
   0000                     532 __xinit__int_idx:
   0000 00                  533 	.db #0x00	; 0
   0001                     534 __xinit__pal_idx:
   0001 00                  535 	.db #0x00	; 0
   0002                     536 __xinit__frame_c:
   0002 00 00               537 	.dw #0x0000
                            538 	.area _CABS (ABS)
